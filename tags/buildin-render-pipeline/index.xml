<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BuildIn Render Pipeline on 陈巧倩</title>
    <link>https://www.chenqiaoqian.com/tags/buildin-render-pipeline/</link>
    <description>Recent content in BuildIn Render Pipeline on 陈巧倩</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jul 2023 11:13:34 +0800</lastBuildDate><atom:link href="https://www.chenqiaoqian.com/tags/buildin-render-pipeline/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity内置渲染管线-光照技术-1</title>
      <link>https://www.chenqiaoqian.com/2023/07/07/buildin-renderpipeline-light-1/</link>
      <pubDate>Fri, 07 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/07/buildin-renderpipeline-light-1/</guid>
      <description>&lt;p&gt;Shader(着色器)是用来实现图像渲染的，用来替代固定渲染管线的可编辑程序。&lt;/p&gt;
&lt;h2 id=&#34;光照技术&#34;&gt;光照技术 &lt;a href=&#34;#%e5%85%89%e7%85%a7%e6%8a%80%e6%9c%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;heading&#34;&gt; &lt;a href=&#34;#heading&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity内置渲染管线-基础语法</title>
      <link>https://www.chenqiaoqian.com/2023/07/03/buildin-renderpipeline-base/</link>
      <pubDate>Mon, 03 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/03/buildin-renderpipeline-base/</guid>
      <description>&lt;p&gt;Shader(着色器)是用来实现图像渲染的，用来替代固定渲染管线的可编辑程序。&lt;/p&gt;
&lt;h2 id=&#34;unity-shader基础&#34;&gt;Unity Shader基础 &lt;a href=&#34;#unity-shader%e5%9f%ba%e7%a1%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;开发语言&#34;&gt;开发语言 &lt;a href=&#34;#%e5%bc%80%e5%8f%91%e8%af%ad%e8%a8%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在Unity中，所有的Unity Shader都通过ShaderLab来编写。ShaderLab是Unity提供编写Unity Shader的一种说明性语言。在Unity中通常使用着色器语言CG和HLSL嵌入进ShaderLab中。&lt;/p&gt;
&lt;h3 id=&#34;开发工具&#34;&gt;开发工具 &lt;a href=&#34;#%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Shader代码编写推荐使用VSCode + ShaderlabVSCode(Free)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;下载build-in-shaders&#34;&gt;下载Build In Shaders &lt;a href=&#34;#%e4%b8%8b%e8%bd%bdbuild-in-shaders&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Unity官网下载Build In Shaders合集，以便参考。&lt;/p&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shader &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Study/Hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//Shader的真正名字  可以是路径式的格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*材质球参数及UI面板
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://docs.unity3d.com/cn/current/Manual/SL-Properties.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://docs.unity3d.com/cn/current/ScriptReference/MaterialPropertyDrawer.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://zhuanlan.zhihu.com/p/93194054
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Properties
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _MainTex (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Texture&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2D&lt;/span&gt;) = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	这是为了让你可以在一个Shader文件中写多种版本的Shader，但只有一个会被使用。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	提供多个版本的SubShader，Unity可以根据对应平台选择最合适的Shader。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SubShader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		标签属性，有两种：一种是SubShader层级，一种在Pass层级
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		https://docs.unity3d.com/cn/current/Manual/SL-SubShaderTags.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		https://docs.unity3d.com/cn/current/Manual/SL-PassTags.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Tags { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RenderType&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Opaque&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Pass里面的内容Shader代码真正起作用的地方，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		一个Pass对应一个真正意义上运行在GPU上的完整着色器(Vertex-Fragment Shader)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		一个SubShader里面可以包含多个Pass，每个Pass会被按顺序执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Pass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CGPROGRAM&lt;span style=&#34;color:#75715e&#34;&gt;//Shader代码从这里开始，以下为CG着色语言&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#pragma vertex vert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#pragma fragment frag&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UnityCG.cginc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;//https://docs.unity3d.com/Manual/SL-VertexProgramInputs.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//CPU向顶点Shader提供的模型数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//冒号后面的是特定语义词，告诉CPU需要哪些类似的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				float4 vertex : POSITION; &lt;span style=&#34;color:#75715e&#34;&gt;//模型空间顶点坐标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord0 : TEXCOORD0; &lt;span style=&#34;color:#75715e&#34;&gt;//第一套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord1 : TEXCOORD1; &lt;span style=&#34;color:#75715e&#34;&gt;//第二套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord2 : TEXCOORD2; &lt;span style=&#34;color:#75715e&#34;&gt;//第二套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord4 : TEXCOORD3;  &lt;span style=&#34;color:#75715e&#34;&gt;//模型最多只能有4套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half4 color : COLOR; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点颜色&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half3 normal : NORMAL; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点法线&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half4 tangent : TANGENT; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点切线(模型导入Unity后自动计算得到)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v2f&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//自定义数据结构体，顶点着色器输出的数据，也是片元着色器输入数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                float4 vertex : SV_POSITION;&lt;span style=&#34;color:#75715e&#34;&gt;//输出裁剪空间下的顶点坐标数据，给光栅化使用，必须要写的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;//注意跟上方的TEXCOORD的意义是不一样的，上方代表的是UV，这里可以是任意数据。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//插值器：输出后会被光栅化进行插值，而后作为输入数据，进入片元Shader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//最多可以写16个：TEXCOORD0 ~ TEXCOORD15。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                float2 uv : TEXCOORD0;&lt;span style=&#34;color:#75715e&#34;&gt;//自定义数据体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			Shader内的变量声明，如果跟上面Properties模块内的参数同名，就可以产生链接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            float4 _MainTex_ST;&lt;span style=&#34;color:#75715e&#34;&gt;//纹理坐标_ST固定写法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            v2f vert (appdata v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                v2f o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                o.vertex = UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                o.uv = TRANSFORM_TEX(v.texcoord0, _MainTex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                UNITY_TRANSFER_FOG(o,o.vertex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fixed4 frag (v2f i) : SV_Target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fixed4 col = tex2D(_MainTex, i.uv);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; col;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ENDCG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;properties&#34;&gt;Properties &lt;a href=&#34;#properties&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Properties语义块包含了一系列属性，这些属性会显式的出现在材质面板中。便于开发者在材质面板中能够方便地调整各种材质属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;subshader&#34;&gt;SubShader &lt;a href=&#34;#subshader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;一个Unity Shader文件至少包含一个SubShader语义块。加载时，unity会扫描所有的SubShader语义块，并选择第一个能在目标平台上运行的SubShader。如果都不支持，会使用Fallback指定的Unity Shader。&lt;/p&gt;
&lt;p&gt;仅在SubShader中使用的Tag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;渲染状态设置&#34;&gt;渲染状态设置 &lt;a href=&#34;#%e6%b8%b2%e6%9f%93%e7%8a%b6%e6%80%81%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果在SubShader块中设置了状态，就会应用到全部的Pass。可以在Pass中单独设置状态。&lt;/p&gt;
&lt;h4 id=&#34;pass&#34;&gt;Pass &lt;a href=&#34;#pass&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Shader代码真正起作用的地方，一个Pass对应一个真正意义上运行在GPU上的完整着色流程。&lt;/p&gt;
&lt;p&gt;仅在SubShader中使用的Tag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个SubShader里面可以包含多个Pass，每个Pass会被按顺序执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cg和glsl常用函数&#34;&gt;CG和GLSL常用函数 &lt;a href=&#34;#cg%e5%92%8cglsl%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;数学函数&#34;&gt;数学函数 &lt;a href=&#34;#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;GLSL语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ceil(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ceil(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;floor(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;floor(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*fmod(x,y)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*mod(x, y)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*返回x/y的余数。如果y为0，结果不可预料。*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*frac(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*fract(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*返回标量或矢量的小数*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;frexp(x, out i)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;将浮点数 x 分解为尾数和指数，即 x = m* 2^exp，返回 m，并将指数存入 exp 中；如果 x 为 0，则尾数和指数都返回 0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;modf(x, out ip)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;round(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回四舍五入值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算ex的值，e=2.71828182845904523536&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算2x的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算log2(x)的值，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log10(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算lg(x)的值，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;max(a, b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;max(a, b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;比较两个标量或等长向量元素，返回最大值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;min(a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;min(a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;比较两个标量或等长向量元素，返回最小值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;pow(x, y)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;pow(x, y)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算xy的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sqrt(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sqrt(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;求x的平方根，，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*rsqrt(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*inversesqrt(x)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*x的平方根的倒数，x必须大于0*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;abs(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;abs(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回输入参数的绝对值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ldexp(x, n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x∗2n的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(M, N)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*M*N**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*矩阵M和矩阵N的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(M, v)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*M*v**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*矩阵M和列向量v的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(v, M)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*v* M**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*行向量v和矩阵M的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;determinant(m)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算矩阵的行列式因子。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;transpose(M)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;asin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;asin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反正弦函数,输入参数取值区间为，返回角度值范围为[−π/2,π/2]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;acos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;acos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反正切函数，返回角度值范围为[−π/2,π/2]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan2(y,x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan2(y,x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数为弧度，计算正弦值，返回值范围 为[-1,1]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回弧度x的余弦值。返回值范围为&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x正切值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sincos(float x, out s, out c)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sinh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x的双曲正弦&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cosh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tanh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x的双曲线切线&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;radians(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;radians(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;函数将角度值转换为弧度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;degrees(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;degrees(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数为弧度值(radians)，函数将其转换为角度值(degrees)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cross(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cross(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;lit(NdotL, NdotH, m)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 N表示法向量； L表示入射光向量； H表示半角向量； m表示高光系数。 X位表示环境光的贡献，总是1.0; Y位代表散射光的贡献，如果 N∙L&amp;lt;0，则为0；否则为N∙L Z位代表镜面光的贡献，如果N∙L&amp;lt;0 或者N∙H&amp;lt;0，则位0；否则为(N∙L)m; W位始终位1.0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;all(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;all(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果输入参数均不为0，则返回ture； 否则返回flase。&amp;amp;&amp;amp;运算&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;any(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;any(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数只要有其中一个不为0，则返回true。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isfinite(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isinf(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isnan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;step(a, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;step(a, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x&amp;lt;a, 返回0；否则返回1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sign(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sign(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x&amp;gt;0则返回1；如果x=0返回0；如果x&amp;lt;0则返回-1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;dot(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;dot(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;noise(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;clamp(x,a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;clamp(x,a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x值小于a，则返回a； 如果x值大于b，返回b； 否则，返回x。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*lerp(a, b, f)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*mix(a, b, f)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*计算或者的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;saturate(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把x限制到[0,1]之间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;smoothstep(min, max, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;smoothstep(min, max, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;值x位于min、max区间中。 如果x=min，返回0；如果x=max，返回1； 如果x在两者之间，按照下列公式返回数据： –2∗((x–min)/(max–min))3+3∗((x–min)/(max–min))2&lt;strong&gt;&lt;strong&gt;float smoothstep(float a, float b, float x)&lt;/strong&gt;&lt;/strong&gt;{&lt;/strong&gt;    &lt;strong&gt;float t = saturate((x - a)/(b - a)); return t*t*(3.0 - (2.0*t));****}&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;几何函数&#34;&gt;几何函数 &lt;a href=&#34;#%e5%87%a0%e4%bd%95%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;GLSL语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;distance(pt1, pt2)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;distance(pt1, pt2)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;两点之间的欧几里德距离（Euclidean distance）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;faceforward(N,I,Ng)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;faceforward(N,I,Ng)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据 矢量 N 与Nref 调整法向量,如果Ng•I &amp;lt; 0 ，返回 N；否则返回-N。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;length(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;length(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回一个向量的模，即sqrt(dot(v,v))&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;normalize(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;normalize(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回v向量的单位向量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;reflect(I, N)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;reflect(I, N)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据入射光方向向量 I，和顶点法向量 N，计算反射光方向向量。 其中 I 和 N 必须被归一化，需要非常注意的是，这个 I 是指向顶点的； 函数只对三元向量有效&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;refract(I,N,eta)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;refract(I,N,eta)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算折射向量，I 为入射光线，N 为法向量，eta 为折射系数； 其中 I 和 N 必须被归一化，如果 I 和 N 之间的夹角太大，则返回（0，0，0），也就是没有折射光线；I 是指向顶点的； 函数只对三元向量有效&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;纹理映射函数&#34;&gt;纹理映射函数 &lt;a href=&#34;#%e7%ba%b9%e7%90%86%e6%98%a0%e5%b0%84%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tex1D(sampler1D tex, float s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tex1D(sampler1D tex, float s, float dsdx, float dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询一维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1D(sampler1D tex, float2 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询一维纹理， 并进行深度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1Dproj(sampler1D tex, float2 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维投影纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1Dproj(sampler1D tex, float3 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维投影纹理查询，并比较深度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float2 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询二维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float3 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询二维纹理，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2Dproj(sampler2D tex, float3 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2Dproj(sampler2D tex, float4 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT(samplerRECT tex, float2 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影使用导数的矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT (samplerRECT tex, float3 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影深度比较矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT proj(samplerRECT tex, float3 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT proj(samplerRECT tex, float3 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影矩形纹理深度比较查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3D(sampler3D tex, float s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;三维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;结合导数值（derivatives）查询三维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3Dproj(sampler3D tex, float4 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询三维投影纹理，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBE(samplerCUBE tex, float3 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;结合导数值（derivatives）查询立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBEproj (samplerCUBE tex, float4 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询投影立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;偏导函数&#34;&gt;偏导函数 &lt;a href=&#34;#%e5%81%8f%e5%af%bc%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ddx(a)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;近似a关于屏幕空间x轴的偏导数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ddy(a)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;近似a关于屏幕空间y轴的偏导数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;unity常用内置函数和变量&#34;&gt;Unity常用内置函数和变量 &lt;a href=&#34;#unity%e5%b8%b8%e7%94%a8%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0%e5%92%8c%e5%8f%98%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;顶点着色器输入结构体&#34;&gt;顶点着色器输入结构体 &lt;a href=&#34;#%e9%a1%b6%e7%82%b9%e7%9d%80%e8%89%b2%e5%99%a8%e8%be%93%e5%85%a5%e7%bb%93%e6%9e%84%e4%bd%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包含的变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_base&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点法线、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_tan&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点切线、顶点法线、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_full&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点切线、顶点法线、四组（或更多）纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_img&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_base&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_tan&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 tangent : TANGENT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_full&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 tangent : TANGENT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord1 : TEXCOORD1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord2 : TEXCOORD2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord3 : TEXCOORD3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fixed4 color : COLOR;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_img&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    half2 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;顶点着色器输出&#34;&gt;顶点着色器输出 &lt;a href=&#34;#%e9%a1%b6%e7%82%b9%e7%9d%80%e8%89%b2%e5%99%a8%e8%be%93%e5%87%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包含的变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;v2f_img&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输出&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;裁剪空间中的位置、纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v2f_img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        float4 pos : SV_POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        half2 uv : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNITY_VERTEX_OUTPUT_STEREO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;空间变换函数&#34;&gt;空间变换函数 &lt;a href=&#34;#%e7%a9%ba%e9%97%b4%e5%8f%98%e6%8d%a2%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 UnityWorldToClipPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把世界坐标空间中某一点pos变换到齐次裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 UnityViewToClipPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把观察坐标空间中某一点pos变换到齐次裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToViewPos(float3 pos或float4 pos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;模型局部空间坐标系中某一个点pos变换到观察空间坐标系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldToViewPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把世界坐标系下的一个点pos变换到观察空间坐标系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToWorldDir(float3 dir )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把方向矢量从模型空间转换到世界空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldToObjectDir(float3 dir )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把方向矢量从世界空间转换到模型空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToWorldNormal(float3 norm )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;将法线从模型空间转换到世界空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldSpaceLightDir(float3 worldPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数worldPos是一个世界坐标系下的坐标，得到世界空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 WorldSpaceLightDir(float4 localPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到世界空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 ObjSpaceLightDir(float4 v )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到模型空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldSpaceViewDir(float3 worldPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数worldPos是一个世界坐标系下的坐标，得到世界空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 WorldSpaceViewDir(float4 localPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到世界空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 ObjSpaceViewDir(float4 v )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到模型空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;屏幕空间函数&#34;&gt;屏幕空间函数 &lt;a href=&#34;#%e5%b1%8f%e5%b9%95%e7%a9%ba%e9%97%b4%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 ComputeScreenPos (float4 clipPos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算用于执行屏幕空间贴图纹理采样的纹理坐标。输入是裁剪空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 ComputeGrabScreenPos (float4 clipPos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算用于 GrabPass 纹理采样的纹理坐标。输入是裁剪空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;内置变量矩阵&#34;&gt;内置变量矩阵 &lt;a href=&#34;#%e5%86%85%e7%bd%ae%e5%8f%98%e9%87%8f%e7%9f%a9%e9%98%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;变量名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MVP&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的模型*观察*投影矩阵，用于将顶点/方向矢量从模型空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的模型*观察矩阵，用于将顶点/方向矢量从模型空间转换到观察空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_V&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的观察矩阵，用于将顶点/方向矢量从世界空间转换到观察空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_P&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的投影矩阵，用于将顶点/方向矢量从观察空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_VP&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的观察*投影矩阵，用于将顶点/方向矢量从世界空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_T_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV的转置矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_IT_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV的逆转置矩阵，用于将法线从模型空间转换到观察空间，也可以用于得到UNITY_MATRIX_MV的逆矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;unity_ObjectToWorld&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前模型矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;unity_WorldToObject&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前世界矩阵的逆矩阵。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;摄像机和屏幕参数&#34;&gt;摄像机和屏幕参数 &lt;a href=&#34;#%e6%91%84%e5%83%8f%e6%9c%ba%e5%92%8c%e5%b1%8f%e5%b9%95%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 _WorldSpaceCameraPos&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机在世界空间中的位置&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ProjectionParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=1.0(或-1.0，如果正在使用一个翻转的投影矩阵进行渲染)，y=Near,z=Far,w=1.0+1.0/Far,其中Near和Far分别是近裁剪平面和远裁剪平面到摄像机的距离&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ScreenParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=width,y=height,z=1.0+1.0/width,w=1.0+1.0/height,其中width和height分别是该摄像机的渲染目标（render target）的像素宽度和高度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ZBufferParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=1-Far/Near,y=Far/Near,z=x/Far,w=y/Far,该变量用于线性化Z缓存中的深度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_OrthoParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=width,y=height,z没有定义,w=1.0(该摄像机是正交摄像机)或w=0.0（该摄像机是透视摄像机），其中width和height是正交投影摄像机的宽度和高度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 unity_CameraProjection&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的投影矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 unity_CameraInvProjection&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的投影矩阵的逆矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_CameraWorldClipPlanes[6]&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的6个裁剪平面在世界空间下的等式，按左、右、下、上、近、远裁剪平面&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;时间参数&#34;&gt;时间参数 &lt;a href=&#34;#%e6%97%b6%e9%97%b4%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _Time&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;自关卡加载以来的时间 (t/20, t, t*2, t*3)，用于将着色器中的内容动画化&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _SinTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;时间正弦：(t/8, t/4, t/2, t)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _CosTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;时间余弦：(t/8, t/4, t/2, t)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_DeltaTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;增量时间：(dt, 1/dt, smoothDt, 1/smoothDt)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;光照相关参数前向渲染&#34;&gt;光照相关参数(前向渲染) &lt;a href=&#34;#%e5%85%89%e7%85%a7%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0%e5%89%8d%e5%90%91%e6%b8%b2%e6%9f%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 _LightColor0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（在 Lighting.cginc 中声明）光源颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _WorldSpaceLightPos0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;方向光：（世界空间方向，0）。其他光源：（世界空间位置，1）。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 _LightMatrix0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（在 AutoLight.cginc 中声明） 世界/光源矩阵。用于对剪影和衰减纹理进行采样。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_4LightPosX0、unity_4LightPosY0、unity_4LightPosZ0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的世界空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_4LightAtten0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的衰减因子。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half4[4] unity_LightColor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4[4] unity_WorldToShadow&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;世界/阴影矩阵。聚光灯的一个矩阵，方向光级联最多有四个矩阵。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;光照相关参数延迟渲染&#34;&gt;光照相关参数(延迟渲染) &lt;a href=&#34;#%e5%85%89%e7%85%a7%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0%e5%bb%b6%e8%bf%9f%e6%b8%b2%e6%9f%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientSky&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的天空环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientEquato&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的赤道环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientGround&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的地面环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 UNITY_LIGHTMODEL_AMBIENT&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;环境光照颜色（梯度环境情况下的天空颜色）。旧版变量。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_FogColor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;雾效颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_FogParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于雾效计算的参数：(density / sqrt(ln(2))、density / ln(2)、–1/(end-start) 和 end/(end-start))。x 对于 Exp2 雾模式很有用；*y* 对于 Exp 模式很有用，*z* 和 w 对于 Linear 模式很有用。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;数学常量&#34;&gt;数学常量 &lt;a href=&#34;#%e6%95%b0%e5%ad%a6%e5%b8%b8%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#ifndef UNITY_CG_INCLUDED
#define UNITY_CG_INCLUDED
#define UNITY_PI 3.14159265359f //圆周率
#define UNITY_TWO_PI 6.28318530718f //2倍圆周率
#define UNITY_FOUR_PI 12.56637061436f //4倍圆周率
#define UNITY_INV_PI 0.31830988618f //圆周率的倒数
#define UNITY_INV_TWO_PI 0.15915494309f //2倍圆周率的倒数
#define UNITY_INV_FOUR_PI 0.07957747155f //4倍圆周率的倒数
#define UNITY_HALF_PI 1.57079632679f //半圆周率
#define UNITY_INV_HALF_PI 0.636619772367f //半圆周率的倒数
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;颜色空间&#34;&gt;颜色空间 &lt;a href=&#34;#%e9%a2%9c%e8%89%b2%e7%a9%ba%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;bool IsGammaSpace()&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据宏UNITY_COLORSPACE_GAMMA是否被启用了，判断当前是否启用了伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float GammaToLinearSpaceExact (float value)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把一个颜色值精确地从伽马颜色空间(sRGB颜色空间)变化到线性空间(CIE-XYZ颜色空间)。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half3 GammaToLinearSpace (half3 sRGB)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用一个近似模拟的函数把颜色值近似地从伽马空间变换到线性空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float LinearToGammaSpaceExact (float value)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把一个颜色值精确地从线性空间变换到伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half3 LinearToGammaSpace (half3 linRGB)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用一个近似模拟的函数把颜色值近似地从线性空间变换到伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity内置渲染管线-概述</title>
      <link>https://www.chenqiaoqian.com/2023/07/01/buildin-renderpipeline-overview/</link>
      <pubDate>Sat, 01 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/01/buildin-renderpipeline-overview/</guid>
      <description>&lt;p&gt;渲染是指以软件由模型生成图像的过程。模型是用语言或者数据结构进行严格定义的三维物体或虚拟场景的描述，它包括几何、视点、纹理、照明和阴影等信息。图像是数字图像或者位图图像。彩现用于描述：计算视频编辑软件中的效果，以生成最终视频的输出过程。&lt;/p&gt;
&lt;h2 id=&#34;内置渲染管线概述&#34;&gt;内置渲染管线概述 &lt;a href=&#34;#%e5%86%85%e7%bd%ae%e6%b8%b2%e6%9f%93%e7%ae%a1%e7%ba%bf%e6%a6%82%e8%bf%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;渲染管线是将三维场景模型转换到屏幕像素空间输出的过程。图形渲染管线接受一组3D坐标，然后把它们转变为屏幕上的有色2D像素输出。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-overview-1.png&#34; alt=&#34;&#34;&gt;
内置渲染管线由两部分组成CPU应用程序端渲染逻辑和GPU渲染管线。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-struction-2.png&#34; alt=&#34;&#34;&gt;
内置管线渲染流程图，如下：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-detail-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cpu应用程序阶段&#34;&gt;CPU应用程序阶段 &lt;a href=&#34;#cpu%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;剔除culling&#34;&gt;剔除Culling &lt;a href=&#34;#%e5%89%94%e9%99%a4culling&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;视锥体剔除(Frustum Culling)，视锥体是指由摄像机的FOV、Near和Far组成的金字塔形状的立方体，场景里的物体和视锥体进行碰撞检测，如有相交则说明物体在视锥体范围内，需要进行绘制，反之剔除，不进行绘制。(碰撞检测可以通过给场景里的物体叫Box来进行优化)。&lt;/li&gt;
&lt;li&gt;层级剔除(Layer Culling Mask)，对物体进行层级设置，然后在摄像机处进行层级筛选。&lt;/li&gt;
&lt;li&gt;遮挡剔除(Occlusion Culling)，剔除场景中完全被遮挡住的物体，防止此类物体进行渲染计算。&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;排序sort&#34;&gt;排序Sort &lt;a href=&#34;#%e6%8e%92%e5%ba%8fsort&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;渲染队列排序RenderQueue，数值越小则越靠前渲染。&lt;/li&gt;
&lt;li&gt;不透明队列(RenderQueue &amp;lt; 2500)，按摄像机距离&lt;strong&gt;从前到后&lt;/strong&gt;排序。&lt;/li&gt;
&lt;li&gt;半透明队列(RenderQueue &amp;gt; 2500)，按摄像机距离&lt;strong&gt;从后往前&lt;/strong&gt;排序。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-sort-4.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;打包数据发给cpu&#34;&gt;打包数据发给CPU &lt;a href=&#34;#%e6%89%93%e5%8c%85%e6%95%b0%e6%8d%ae%e5%8f%91%e7%bb%99cpu&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模型信息：顶点坐标、法线、UV、切线、顶点色和索引列表。&lt;/li&gt;
&lt;li&gt;变换矩阵：世界变换矩阵、摄像机位置以及fov等参数。&lt;/li&gt;
&lt;li&gt;灯光、材质参数：shader、材质信息和灯光信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模型文件数据：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-batch-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;gpu渲染阶段&#34;&gt;GPU渲染阶段 &lt;a href=&#34;#gpu%e6%b8%b2%e6%9f%93%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;GPU渲染流程如下：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-1.png&#34; alt=&#34;&#34;&gt;
注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型空间顶点：3D建模软件里面的模型坐标；&lt;/li&gt;
&lt;li&gt;图元转配置：对顶点进行连线，组成三角形。&lt;/li&gt;
&lt;li&gt;光栅化：对每个图元插值生成片段，可以理解成没有上色的像素。&lt;/li&gt;
&lt;li&gt;片元着色：对片元进行上色。&lt;/li&gt;
&lt;li&gt;输出合并：处理前后遮挡关系，以及混合合并。
Shader与GPU渲染管线对应关系：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-3.png&#34; alt=&#34;&#34;&gt;
对应关系：&lt;/li&gt;
&lt;li&gt;第一阶段，告诉CPU端，需要顶点坐标和UV。&lt;/li&gt;
&lt;li&gt;第二阶段，进行顶点shader，所有的顶点都会调用，来完成投影成像的操作(模型空间-&amp;gt;裁剪空间)。&lt;/li&gt;
&lt;li&gt;第三阶段，顶点shader输出，裁剪空间下的顶点坐标和UV等等，提供给片元shader使用。&lt;/li&gt;
&lt;li&gt;第四阶段，所有片元都会调用，进行着色。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顶点shader&#34;&gt;顶点Shader &lt;a href=&#34;#%e9%a1%b6%e7%82%b9shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;将顶点坐标从模型空间变换为裁剪空间。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型空间：建模软件坐标系。&lt;/li&gt;
&lt;li&gt;世界空间：游戏引擎坐标系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;硬件操作阶段&#34;&gt;硬件操作阶段 &lt;a href=&#34;#%e7%a1%ac%e4%bb%b6%e6%93%8d%e4%bd%9c%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;硬件操作阶段有叫光栅化阶段，发生在平台的硬件层面，其行为不可操作。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;裁剪操作：物体转换到裁剪空间后，根据裁剪空间大小，对范围外的进行裁剪。&lt;/li&gt;
&lt;li&gt;NDC：将物体坐标坐标归一化，(0,0) -&amp;gt;(1,1)。&lt;/li&gt;
&lt;li&gt;背面剔除：对背对摄像机的三角面剔除。&lt;/li&gt;
&lt;li&gt;屏幕坐标：将NDC坐标转换为屏幕坐标的像素坐标。&lt;/li&gt;
&lt;li&gt;图元装配：根据顶点生成三角形片元。&lt;/li&gt;
&lt;li&gt;光栅化：忽略Z坐标，根据X、Y坐标对片元进行颜色插值，光栅化会产生锯齿。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-hard-process-1.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;片元shader&#34;&gt;片元Shader &lt;a href=&#34;#%e7%89%87%e5%85%83shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;重要任务是上色，主要通过纹理技术(Texturing)和光照计算(Lighting)。&lt;/p&gt;
&lt;h5 id=&#34;纹理技术&#34;&gt;纹理技术 &lt;a href=&#34;#%e7%ba%b9%e7%90%86%e6%8a%80%e6%9c%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;纹理采样：根据纹理坐标，在纹素地址中查找对应的颜色值。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-1.png&#34; alt=&#34;&#34;&gt;
纹理过滤机制：用来解决纹理失真所采用的手段。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​	Point：最容易理解的一个。由于每个像素的纹理坐标，刚好对应贴图上的一个采样点纹素，所以最近点采样就是直接取最接近的纹素进行采样。如果纹理大小和被贴合的三维模型大小差不多时，这种方法会比较有效和快捷，但是如果大小不同，纹理就会变得矮胖、变形或者模糊，容易出现块状的像素，使得处理出的效果很差。&lt;/li&gt;
&lt;li&gt;​	Bilinear：双线性过滤以像素对应的纹理坐标为中心，采集这个坐标周围的4个纹素的像素，再取平均，最后以这个平均值作为采样值。这样过滤后的像素则会更加平滑，至少不会出现块状像素了。但双线性过滤只作用于一个MipMap Level，它选取纹素和像素之间大小最接近的那一层MipMap进行采样。这意味着如果和像素匹配大小的纹素大小在两层	MipMap Level之间的话，双线性过滤的效果就有限了，因此有了三线性过滤。&lt;/li&gt;
&lt;li&gt;​	Trilinear：三线性过滤以双线性过滤为基础。会对像素大小于纹素大小最接近的两层MipMap Level分别进行双线性过滤，然后再对两层得到的结果生成线性插值。在各向同性的情况下，三线性过滤能获得很不错的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Minmap：为了解决纹理大小和图像大小不匹配，所产生的问题。
纹理寻址模式：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;光照计算&#34;&gt;光照计算 &lt;a href=&#34;#%e5%85%89%e7%85%a7%e8%ae%a1%e7%ae%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;光照组成：直接光照和间接光照。
光照模型：Phong光照模型。基本组成：直接光漫反射+直接光镜面反射+间接光漫反射+间接光镜面反射。&lt;/p&gt;
&lt;h4 id=&#34;输出合并&#34;&gt;输出合并 &lt;a href=&#34;#%e8%be%93%e5%87%ba%e5%90%88%e5%b9%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;处理遮挡关系、处理半透明混合。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-1.png&#34; alt=&#34;&#34;&gt;
Alpha测试：低于某个数值则直接丢弃。&lt;/p&gt;
&lt;p&gt;深度测试：同一个点上，重叠的两个片元，进行选择，比较Depth，Depth值越小，越靠近摄像机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZWrite深度写入：ZWrite如果被关闭也不会被写入深度缓冲区，但是不影响颜色缓冲区的写入。&lt;/li&gt;
&lt;li&gt;ZTest深度测试：设置通关深度测试的规则。ZTest Less（深度小于当前缓存则通过）， ZTest Greater（深度大于当前缓存则通过）&amp;hellip;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-2.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;帧缓冲区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜色缓冲区&lt;/li&gt;
&lt;li&gt;深度缓冲区&lt;/li&gt;
&lt;li&gt;模版缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;混合Blending：对缓冲区重叠的部分进行混合，Blend SrcAlpha OneMinusSrcAlpha、Blend One OneMinusSrcAlpha&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半透明混合从前到后&lt;/li&gt;
&lt;li&gt;半透明混合关闭ZWrite
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-3.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity-shader-ase</title>
      <link>https://www.chenqiaoqian.com/2023/06/20/shader-ase-1/</link>
      <pubDate>Tue, 20 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/20/shader-ase-1/</guid>
      <description>&lt;p&gt;Amplify Shader Editor是行业领先开放且紧密集成的解决方案，它提供了一个Unity开发者易于上手的开发环境，可以与Unity编辑器和着色器使用无缝融合。通过这款工具，开发者能轻松实现AAA级质量的作品，并能灵活地应用在任何Unity项目开发之中，进而大大缩短了制作团队在美术效果上的迭代时间。&lt;/p&gt;
&lt;h2 id=&#34;amplify-shader-editorase&#34;&gt;Amplify Shader Editor(ASE) &lt;a href=&#34;#amplify-shader-editorase&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;安装&#34;&gt;安装 &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Unity资源商店中搜索Amplify Shader Editor进行安装。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-1.png&#34; alt=&#34;&#34;&gt;
导入后展开Amplify Shader Editor目录结构：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;编辑器界面简介&#34;&gt;编辑器界面简介 &lt;a href=&#34;#%e7%bc%96%e8%be%91%e5%99%a8%e7%95%8c%e9%9d%a2%e7%ae%80%e4%bb%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;打开amplify-shader-editor编辑器界面&#34;&gt;打开Amplify Shader Editor编辑器界面 &lt;a href=&#34;#%e6%89%93%e5%bc%80amplify-shader-editor%e7%bc%96%e8%be%91%e5%99%a8%e7%95%8c%e9%9d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-3.png&#34; alt=&#34;&#34;&gt;
依次点击Window → Amplify Shader Editor → Open Canvas打开编辑器画布（Canvas）界面；或者可以双击Amplify Shader Editor（下文简称ASE）材质或着色器自动打开画布界面。&lt;/p&gt;
&lt;h4 id=&#34;创建amplify表面着色器surface-shader&#34;&gt;创建Amplify表面着色器（Surface Shader） &lt;a href=&#34;#%e5%88%9b%e5%bb%baamplify%e8%a1%a8%e9%9d%a2%e7%9d%80%e8%89%b2%e5%99%a8surface-shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-4.png&#34; alt=&#34;&#34;&gt;
在项目（Project）界面选中资源文件夹的情况下，依次点击 Assets → Create → Shader → Amplify Surface Shader创建；或者依次点击右键 → Create → Shader → Amplify Surface Shader进行创建。&lt;/p&gt;
&lt;h4 id=&#34;画布ui交互&#34;&gt;画布UI交互 &lt;a href=&#34;#%e7%94%bb%e5%b8%83ui%e4%ba%a4%e4%ba%92&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-5.png&#34; alt=&#34;&#34;&gt;
1.节点属性界面
​	&lt;strong&gt;主属性（Main Properties）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;着色器类型（Shader Type）：此区域显示所使用的当前着色器类型。&lt;/li&gt;
&lt;li&gt;着色器名称（Shader Name）：可编辑文本框，定义着色器的名称和路径。使用正斜杠“/”定义其类别和名称，例如UserSamples / EnvironmentGradient。请注意，此框中显示的名称与文件名不同，必须单独设置。&lt;/li&gt;
&lt;li&gt;光照模型（Light Model）：定义表面如何反射光，通常称为所使用的着色器类型。 ASE目前提供标准（金属 Standard（Metallic））、标准镜面（Standard Specular）、Lambert和Blinn Phong。&lt;/li&gt;
&lt;li&gt;着色器模型（Shader Model）：当编写表面着色器或常规着色器程序时，HLSL源可以编译成不同的“着色器模型”。更高的着色器编译目标允许使用更多的现代GPU功能，但可能使得着色器不能在较旧的GPU或平台上工作。&lt;/li&gt;
&lt;li&gt;精度（Precision）：定义内部计算的精度，使用较低类型提供了额外的性能提升以换取一些精度。默认设置为Float。&lt;/li&gt;
&lt;li&gt;剔除模式（Cull Mode）：Front – 剔除前向几何体，Back – 剔除后向几何体，关闭 - 禁用剔除（双面材料）。默认情况下设置为Back。&lt;/li&gt;
&lt;li&gt;渲染路径（Render Path）：允许您定义着色器支持哪种模式（提前Forward / 延时Deferred）。默认设置为全部。&lt;/li&gt;
&lt;li&gt;投射阴影（Cast Shadows）：定义使用着色器的对象是否投射阴影。&lt;/li&gt;
&lt;li&gt;接收阴影（Receive Shadows）：定义使用着色器的对象是否接收阴影，这包括自阴影（只有使用正向渲染）。&lt;/li&gt;
&lt;li&gt;队列索引（Queue Index）：渲染队列偏移值，接受正（较晚）和负（较早）整数。&lt;/li&gt;
&lt;li&gt;自定义编辑器（Custom Editor）：自定义检查器允许您自定义ASE材料检查器。
​	&lt;strong&gt;混合模式（Blend Mode）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-7.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;混合模式（Blend Mode）：所选模式自动调整可用参数;不透明（Opaque），遮罩（Masked），透明（Transparent），Alpha预乘（Alpha Transparent）或自定义（Custom）。&lt;/li&gt;
&lt;li&gt;渲染类型（Render Type）：该标记将着色器分为几个预定义组。可用标签：不透明（Opaque），透明（Transparent），透明抠出（Transparent Cutout），背景（Background），覆盖（Overlay），不透明树（Tree Opaque），透明树剪出（Tree Transparent Cutout），布告板树（Tree Billboard），草和布告板草皮（Grass and Grass Billboard）。&lt;/li&gt;
&lt;li&gt;渲染队列（Render Queue）：为了获得最佳性能，通过几何体渲染队列排布，从而优化对象的绘制顺序。所有其他渲染队列按距离对对象进行排序，从最远的那些开始渲染，并以最接近的结束。可用选项有背景、几何、Alpha测试、透明和覆盖。&lt;/li&gt;
&lt;li&gt;掩码片段值（Mask Clip Value）：要与不透明度alpha比较的默认值。 0完全不透明，1完全掩蔽。默认设置为0，常用于透明抠出（Transparent Cutout）材质。&lt;/li&gt;
&lt;li&gt;混合RGB和混合Alpha（Blend RGB and Blend Alpha）：当渲染图形时，在所有着色器执行并且所有纹理都应用后，像素被写入屏幕。它们如何与已经存在的内容组合由Blend命令控制。 ASE目前提供定制、Alpha混合（Alpha Blend）、预乘（Premultiplied）、加法（Additive）、软加法（Soft Additive）、乘法（Multiplicative）和2x乘法（2x Multiplicative）模式。&lt;/li&gt;
&lt;li&gt;混合因子（Blend Factor）（SrcFactor ＆ DstFactor）：以下所有属性都适用于混合命令中的SrcFactor＆DstFactor。源指的是计算的颜色，目标是已经在屏幕上的颜色。如果BlendOp使用逻辑运算，则忽略混合因子。&lt;/li&gt;
&lt;li&gt;混合操作RGB和混合操作Alpha（Blend Op RGB &amp;amp; Blend Op Alpha）：添加（Add）、子（Sub）、修改子（Rev Sub）、最小（Min）和最大（Max）。&lt;/li&gt;
&lt;li&gt;颜色蒙版（Color Mask）：设置颜色通道写入蒙版，将其全部关闭使其不可见。
​	&lt;strong&gt;模版缓冲（Stencil Buffer）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-8.png&#34; alt=&#34;&#34;&gt;
模板缓冲器可以用作每像素掩模的通用目的，用于保存或丢弃像素。它通常是每个像素8位整数。该值可以写入、递增或递减。 后续绘制调用可以根据该值进行测试，以决定是否应该在运行像素着色器之前丢弃该像素。&lt;/li&gt;
&lt;li&gt;参考（Reference）：要比较的值和/或要写入缓冲区的值（如果Pass，Fail或ZFail设置为替换）。范围是0-255整数。&lt;/li&gt;
&lt;li&gt;读取掩码（Read Mask）：作为0-255整数的8位掩码，用于将参考值与缓冲区（referenceValue＆readMask），比较方法comparisonFunction（stencilBufferValue＆readMask）的内容进行比较。默认值是255。&lt;/li&gt;
&lt;li&gt;写掩码（Write Mask）：8位掩码，作为0-255整数，写入缓冲区时使用。默认值是255。&lt;/li&gt;
&lt;li&gt;比较（Comparison）：用于将参考值与缓冲区的当前内容进行比较的函数。默认值是always。&lt;/li&gt;
&lt;li&gt;通过（Pass）：如果模板测试（和深度测试）通过，对缓冲区的内容做什么。默认值是keep。&lt;/li&gt;
&lt;li&gt;失败（Fail）：如果模板测试失败，对缓冲区的内容做什么。默认值是keep。&lt;/li&gt;
&lt;li&gt;ZFail（ZFail）：如果模板测试通过，则缓冲区的内容如何处理，但深度测试失败。默认值是keep。
​	&lt;strong&gt;曲面细分（Tessellation）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-9.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;冯氏曲面细分（Phong）：修改细分面的位置，使得生成的面稍微跟随网格法线，默认设置为OFF。&lt;/li&gt;
&lt;li&gt;类型（Type）：定义所使用的技术，基于距离、固定、边长和边长Cull。&lt;/li&gt;
&lt;li&gt;曲面细分因子（Tess）：范围是1-32。&lt;/li&gt;
&lt;li&gt;最小值（Min）：最小细分距离。&lt;/li&gt;
&lt;li&gt;最大值（Max）：最大细分距离。
​	&lt;strong&gt;深度（Depth）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-10.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;ZWrite模式（ZWrite Mode）：控制来自此对象的像素是否写入深度缓冲区（默认为开）。如果你画的是实体对象，请保持此状态。如果您绘制半透明效果，请切换到ZWrite Off。&lt;/li&gt;
&lt;li&gt;ZTest模式（ZTest Mode）：如何进行深度测试。默认值为LEqual（将对象从现有对象或远距离绘制为现有对象;隐藏其后面的对象）。 ASE提供ZTest 小于（Less）、大于（Greater）、小于等于（LEqual）、大于等于（GEqual）、等于（Equal）、不等于（NotEqual）和通常（Always）。&lt;/li&gt;
&lt;li&gt;偏移（Offset）：允许您使用两个参数指定深度偏移 — 因子和单位。因子相对于多边形的X或Y缩放最大Z斜率，单位缩放最小可分辨深度缓冲区值。这允许您强制一个多边形绘制在另一个顶部，虽然它们实际上在相同的位置。例如，偏移（0，-1）拉动多边形更接近相机忽略多边形的斜率，而偏移（-1，-1）将拉近多边形，看看掠角。&lt;/li&gt;
&lt;li&gt;因子（Factor）：相对于多边形的X或Y，缩放最大Z斜率。&lt;/li&gt;
&lt;li&gt;单位（Units）：单位缩放最小可分辨深度缓冲区值。
​	&lt;strong&gt;渲染平台（Rendering Platforms）&lt;/strong&gt;
​	定义支持哪些平台， 默认设置为全部。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-11.png&#34; alt=&#34;&#34;&gt;
​	&lt;strong&gt;可用属性（Available Properties）&lt;/strong&gt;
​	设置为属性（Property）的变量将在此部分中列出，您可以通过拖动它们来调整它们的位置。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-12.png&#34; alt=&#34;&#34;&gt;
2.保存按钮：手动保存/更新着色器数据。修改着色器名称只有在点击这个按钮之后才会正式生效。
3.自动切换按钮：切换自动保存/更新着色器数据。
4.文本编辑按钮：将着色器文件在文本编辑器中打开。
5.选择回归按钮：屏幕视角回归到选择的节点。
6.主节点回归按钮：屏幕视角回归到主节点。
7.清除按钮：删除已经断开连接的节点。
8.节点选项板界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
