<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈巧倩</title>
    <link>https://www.chenqiaoqian.com/</link>
    <description>Recent content on 陈巧倩</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jul 2023 11:13:34 +0800</lastBuildDate><atom:link href="https://www.chenqiaoqian.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity中文版-Unity&#39;s Package Manager(四)(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/21/2023-07-21-unity-Documents-5/</link>
      <pubDate>Fri, 21 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/21/2023-07-21-unity-Documents-5/</guid>
      <description>&lt;p&gt;翻译Unity中文版的初衷是因为官方提供的中文版存在缺陷，而且翻译的不全。现在基于Unity2023.2版本对官方文档进行翻译。&lt;/p&gt;
&lt;h1 id=&#34;unitys-package-manager四&#34;&gt;Unity’s Package Manager(四) &lt;a href=&#34;#unitys-package-manager%e5%9b%9b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;package-manager-window包管理器窗口&#34;&gt;Package Manager window(包管理器窗口) &lt;a href=&#34;#package-manager-window%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;inspecting-packages检查包&#34;&gt;Inspecting packages(检查包) &lt;a href=&#34;#inspecting-packages%e6%a3%80%e6%9f%a5%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;项目视图显示了你的项目中当前从所有来源安装的包的列表。这意味着你从包注册表中安装的&lt;strong&gt;不可变&lt;/strong&gt;包是可见的，以及&lt;strong&gt;可变&lt;/strong&gt;的包（如嵌入式和本地包）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-inspect.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;左边是注册表包（不可变），右边是嵌入式包（可变）。&lt;/p&gt;
&lt;p&gt;你可以查看在项目视图中出现的任何包的内容。你还可以通过专用的&lt;strong&gt;检查器&lt;/strong&gt;查看&lt;strong&gt;包清单&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要查看包清单，只需在项目视图中点击它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-project-view.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;检查包清单&lt;/p&gt;
&lt;p&gt;对于嵌入式或本地包，你可以改变包的内容，并编辑包清单。&lt;/p&gt;
&lt;h1 id=&#34;package-manifest-window包清单窗口&#34;&gt;Package Manifest window(包清单窗口) &lt;a href=&#34;#package-manifest-window%e5%8c%85%e6%b8%85%e5%8d%95%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你在&lt;strong&gt;项目&lt;/strong&gt;窗口的&lt;code&gt;Packages&lt;/code&gt;子文件夹中选择包清单文件(&lt;code&gt;package.json&lt;/code&gt;)时，&lt;strong&gt;包清单&lt;/strong&gt;窗口将会打开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/class-PackageManifestImporter.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在编辑器中检查包清单：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; 选择&lt;strong&gt;打开&lt;/strong&gt;来在你的默认代码编辑器中（例如Visual Studio）加载这个包清单。选择&lt;strong&gt;在包管理器中查看&lt;/strong&gt;以打开包管理器窗口，并在其详绕面板中加载这个包。如果你想选择不同的导入器，选择&lt;strong&gt;导入器&lt;/strong&gt;下拉菜单并选择你想使用的包导入器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; 信息部分包含了这个特定包版本的详细信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; 使用&lt;strong&gt;简短描述&lt;/strong&gt;文本框来指定你想在包管理器窗口的详细面板中显示的文本。更多信息，参考描述属性的文档。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D)&lt;/strong&gt; 使用依赖项部分来管理这个包所依赖的包的列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(E)&lt;/strong&gt; 选择&lt;strong&gt;还原&lt;/strong&gt;以丢弃你对清单所作的任何更改。选择&lt;strong&gt;应用&lt;/strong&gt;来保存你对清单所作的任何更改。&lt;/p&gt;
&lt;h2 id=&#34;information信息&#34;&gt;Information(信息) &lt;a href=&#34;#information%e4%bf%a1%e6%81%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/class-PackageManifestImporter-Info.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个包的官方名称。对于Unity包，这是短名称（去掉&lt;code&gt;com.unity.&lt;/code&gt;字符串后的官方名称。）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Organization name&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;创建这个包的Unity组织的标识符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Display name&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在&lt;strong&gt;项目窗口&lt;/strong&gt;和包管理器窗口中显示给用户看的名称。更多信息，请参考displayName属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包的版本号码。更多信息，请参考version属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Minimal Unity version&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用这个选项来指定这个包兼容的最低Unity版本。当你启用这个选项时，&lt;strong&gt;主要版本&lt;/strong&gt;，&lt;strong&gt;次要版本&lt;/strong&gt;，和&lt;strong&gt;发布版&lt;/strong&gt;属性会显示。如果这个包兼容所有Unity版本，取消勾选这个选项并移除&lt;strong&gt;主要版本&lt;/strong&gt;，&lt;strong&gt;次要版本&lt;/strong&gt;，和&lt;strong&gt;发布版&lt;/strong&gt;属性。更多信息，请参考unity属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Major&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定最小Unity版本的主要部分。更多信息，请参考unity属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Minor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定最小Unity版本的次要部分。更多信息，请参考unity属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Release&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定最小Unity版本的更新和发布部分。更多信息，请参考unityRelease属性的文档。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;dependencies依赖项&#34;&gt;Dependencies(依赖项) &lt;a href=&#34;#dependencies%e4%be%9d%e8%b5%96%e9%a1%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/class-PackageManifestImporter-Depend.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;依赖项部分&lt;/p&gt;
&lt;p&gt;列出了其他作为此包依赖项的包。每个条目由官方包名（例如，&lt;code&gt;com.unity.probuilder&lt;/code&gt;）和其版本号组成。&lt;/p&gt;
&lt;p&gt;要添加新的依赖项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择&lt;strong&gt;添加&lt;/strong&gt;按钮。列表中会出现新的一行。&lt;/li&gt;
&lt;li&gt;在左边输入包名，在右边输入版本号。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;若要删除依赖项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击你想删除的包左边的选择器按钮。&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;移除&lt;/strong&gt;按钮，该行将从列表中消失。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;scripting-api-for-packages包脚本api&#34;&gt;Scripting API for packages(包脚本API) &lt;a href=&#34;#scripting-api-for-packages%e5%8c%85%e8%84%9a%e6%9c%acapi&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以使用包管理器的脚本API通过C#&lt;strong&gt;脚本&lt;/strong&gt;与包管理器进行交互。例如，你可能想要根据目标机器的平台安装特定的包或版本。&lt;/p&gt;
&lt;p&gt;该系统严重依赖PackageManager.Client类，你可以使用它来寻找包，浏览包列表，以及通过脚本安装和卸载包。&lt;/p&gt;
&lt;p&gt;另一个重要的类是PackageManager.PackageInfo，它包含了包的状态，包括从&lt;strong&gt;包清单&lt;/strong&gt;和注册表获取的元数据。例如，你可以获取该包的可用版本列表，或者在查找或安装包时可能发生的任何错误的列表。&lt;/p&gt;
&lt;h2 id=&#34;adding-a-package-to-the-project把包添加到项目中&#34;&gt;Adding a package to the project(把包添加到项目中) &lt;a href=&#34;#adding-a-package-to-the-project%e6%8a%8a%e5%8c%85%e6%b7%bb%e5%8a%a0%e5%88%b0%e9%a1%b9%e7%9b%ae%e4%b8%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个例子演示了如何使用Client类来安装或添加包到项目中。&lt;/p&gt;
&lt;p&gt;你可以使用Client.Add来添加包。当你调用&lt;code&gt;Client.Add&lt;/code&gt;方法时，你可以只指定包名，或者带有特定版本的名字。例如，使用&lt;code&gt;Client.Add(&amp;quot;com.unity.textmeshpro&amp;quot;)&lt;/code&gt;安装（或更新到）TextMesh Pro包的最新版本；使用&lt;code&gt;Client.Add(&amp;quot;com.unity.textmeshpro@1.3.0&amp;quot;)&lt;/code&gt;安装TextMesh Pro包的1.3.0版本。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Client.Add&lt;/code&gt;方法返回一个AddRequest实例，你可以使用它来获取状态，任何错误，或者包含新添加包的PackageInfo信息的Request响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager.Requests;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Unity.Editor.Example {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddPackageExample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; AddRequest Request;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;       [MenuItem(&amp;#34;Window/Add Package Example&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Add()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;// Add a package to the project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Request = Client.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.unity.textmeshpro&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           EditorApplication.update += Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Progress()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.IsCompleted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status == StatusCode.Success)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Installed: &amp;#34;&lt;/span&gt; + Request.Result.packageId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status &amp;gt;= StatusCode.Failure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   Debug.Log(Request.Error.message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               EditorApplication.update -= Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;browsing-the-list-of-packages-in-a-project浏览项目中的包列表&#34;&gt;Browsing the list of packages in a project(浏览项目中的包列表) &lt;a href=&#34;#browsing-the-list-of-packages-in-a-project%e6%b5%8f%e8%a7%88%e9%a1%b9%e7%9b%ae%e4%b8%ad%e7%9a%84%e5%8c%85%e5%88%97%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个例子演示了如何使用Client类遍历项目中的包。&lt;/p&gt;
&lt;p&gt;Client.List方法返回一个ListRequest实例，你可以使用它获取List操作的状态、任何错误，或者包含你可以遍历的PackageCollection的Request响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager.Requests;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Unity.Editor.Example {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ListPackageExample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ListRequest Request;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;       [MenuItem(&amp;#34;Window/List Package Example&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; List()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           Request = Client.List();    &lt;span style=&#34;color:#75715e&#34;&gt;// List packages installed for the project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           EditorApplication.update += Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Progress()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.IsCompleted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status == StatusCode.Success)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; package &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; Request.Result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                       Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Package name: &amp;#34;&lt;/span&gt; + package.name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status &amp;gt;= StatusCode.Failure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   Debug.Log(Request.Error.message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               EditorApplication.update -= Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;embedding-a-package-in-the-project将包嵌入项目中&#34;&gt;Embedding a package in the project(将包嵌入项目中) &lt;a href=&#34;#embedding-a-package-in-the-project%e5%b0%86%e5%8c%85%e5%b5%8c%e5%85%a5%e9%a1%b9%e7%9b%ae%e4%b8%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个例子演示了如何使用Client类将已经安装在你的项目中的某个包嵌入其中。主要方法是Client.Embed方法，它复制一个包并将其存储在你的项目的&lt;code&gt;Packages&lt;/code&gt;文件夹下。&lt;/p&gt;
&lt;p&gt;Client.Embed方法返回一个EmbedRequest实例，你可以使用它获取Embed操作的状态、任何错误，或者包含新嵌入包的PackageInfo信息的Request响应。&lt;/p&gt;
&lt;p&gt;这个例子还使用了Client.List方法来访问当前已经安装在你的项目中的包集合，并选择出第一个既非嵌入也非内置的包。&lt;/p&gt;
&lt;p&gt;Client.List方法返回一个ListRequest实例，你可以使用它获取List操作的状态、任何错误，或者包含你可以遍历的PackageCollection的Request响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager.Requests;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Unity.Editor.Example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmbedPackageExample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; String targetPackage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EmbedRequest Request;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; ListRequest LRequest;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [MenuItem(&amp;#34;Window/Embed Package Example&amp;#34;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetPackageName()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// First get the name of an installed package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            LRequest = Client.List();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            EditorApplication.update += LProgress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; LProgress()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (LRequest.IsCompleted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (LRequest.Status == StatusCode.Success)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; package &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; LRequest.Result)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Only retrieve packages that are currently installed in the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// project (and are neither Built-In nor already Embedded)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (package.isDirectDependency &amp;amp;&amp;amp; package.source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            != PackageSource.BuiltIn &amp;amp;&amp;amp; package.source
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            != PackageSource.Embedded)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            targetPackage = package.name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Debug.Log(LRequest.Error.message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                EditorApplication.update -= LProgress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Embed(targetPackage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Embed(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; inTarget)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Embed a package in the project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Embed(&amp;#39;&amp;#34;&lt;/span&gt; + inTarget + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;) called&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Request = Client.Embed(inTarget);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            EditorApplication.update += Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Progress()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.IsCompleted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status == StatusCode.Success)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Embedded: &amp;#34;&lt;/span&gt; + Request.Result.packageId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (Request.Status &amp;gt;= StatusCode.Failure)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    Debug.Log(Request.Error.message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                EditorApplication.update -= Progress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;package-manager-events包管理器事件&#34;&gt;Package Manager events(包管理器事件) &lt;a href=&#34;#package-manager-events%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e4%ba%8b%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Events类在包管理器中注册一个事件处理器。Events类包含两个你可以订阅的事件，包管理器在以下时机会触发这些事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在包管理器更改依赖列表之前立即（registeringPackages）&lt;/li&gt;
&lt;li&gt;在包管理器导入并编译了更改后的包依赖列表之后（registeredPackages）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下示例演示了如何使用这两种事件。&lt;/p&gt;
&lt;h3 id=&#34;example-of-using-the-registeringpackages-event使用registeringpackages事件的示例&#34;&gt;Example of using the registeringPackages event(使用registeringPackages事件的示例) &lt;a href=&#34;#example-of-using-the-registeringpackages-event%e4%bd%bf%e7%94%a8registeringpackages%e4%ba%8b%e4%bb%b6%e7%9a%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Unity.Editor.Example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventSubscribingExample_RegisteringPackages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EventSubscribingExample_RegisteringPackages()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Subscribe to the event using the addition assignment operator (+=).&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// This executes the code in the handler whenever the event is fired.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Events.registeringPackages += RegisteringPackagesEventHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// The method is expected to receive a PackageRegistrationEventArgs event argument.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisteringPackagesEventHandler(PackageRegistrationEventArgs packageRegistrationEventArgs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The list of registered packages is about to change!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; addedPackage &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; packageRegistrationEventArgs.added)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Adding {addedPackage.displayName}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; removedPackage &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; packageRegistrationEventArgs.removed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Removing {removedPackage.displayName}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// The changedFrom and changedTo collections contain the packages that are about to be updated.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Both collections are guaranteed to be the same size with indices matching the same package name.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt;= packageRegistrationEventArgs.changedFrom.Count; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; oldPackage = packageRegistrationEventArgs.changedFrom[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; newPackage = packageRegistrationEventArgs.changedTo[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;Changing ${oldPackage.displayName} version from ${oldPackage.version} to ${newPackage.version}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;example-of-using-the-registeredpackages-event使用registeredpackages事件的示例&#34;&gt;Example of using the registeredPackages event(使用registeredPackages事件的示例) &lt;a href=&#34;#example-of-using-the-registeredpackages-event%e4%bd%bf%e7%94%a8registeredpackages%e4%ba%8b%e4%bb%b6%e7%9a%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor.PackageManager;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; Unity.Editor.Example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EventSubscribingExample_RegisteredPackages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// You must use &amp;#39;[InitializeOnLoadMethod]&amp;#39; or &amp;#39;[InitializeOnLoad]&amp;#39; to subscribe to this event.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;        [InitializeOnLoadMethod]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SubscribeToEvent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// This causes the method to be invoked after the Editor registers the new list of packages.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Events.registeredPackages += RegisteredPackagesEventHandler;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisteredPackagesEventHandler(PackageRegistrationEventArgs packageRegistrationEventArgs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Code executed here can safely assume that the Editor has finished compiling the new list of packages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Debug.Log(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The list of registered packages has changed!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;accessing-package-assets访问包内资产&#34;&gt;Accessing package assets(访问包内资产) &lt;a href=&#34;#accessing-package-assets%e8%ae%bf%e9%97%ae%e5%8c%85%e5%86%85%e8%b5%84%e4%ba%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本节解释如何访问或引用在包内定义的资产：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用包路径&lt;/li&gt;
&lt;li&gt;加载包内的纹理&lt;/li&gt;
&lt;li&gt;解析绝对路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：包管理器不支持在包中流处理资产。请使用Addressables包代替。&lt;/p&gt;
&lt;h2 id=&#34;referring-to-package-paths引用包路径&#34;&gt;Referring to package paths(引用包路径) &lt;a href=&#34;#referring-to-package-paths%e5%bc%95%e7%94%a8%e5%8c%85%e8%b7%af%e5%be%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要引用在包内定义的资产，请使用这个路径方案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Packages/&amp;lt;package-name&amp;gt;/...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包内的资产路径以&lt;code&gt;Packages/&lt;/code&gt;和包名（而非显示名）开头。&lt;/p&gt;
&lt;p&gt;相比之下，你可以使用这个策略访问项目资产：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assets/...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如，&lt;strong&gt;com.unity.images-library&lt;/strong&gt;包的&lt;code&gt;/Example/Images&lt;/code&gt;子文件夹中的&lt;code&gt;image.png&lt;/code&gt;文件的路径为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Packages/com.unity.images-library/Example/Images/image.png&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要获取在你&lt;code&gt;Packages&lt;/code&gt;文件夹中的项目的绝对路径，你可以使用部分路径作为Path.GetFullPath()方法的参数。举例可参考解析绝对路径部分。&lt;/p&gt;
&lt;h2 id=&#34;loading-a-texture-inside-a-package加载包内的纹理&#34;&gt;Loading a Texture inside a package(加载包内的纹理) &lt;a href=&#34;#loading-a-texture-inside-a-package%e5%8a%a0%e8%bd%bd%e5%8c%85%e5%86%85%e7%9a%84%e7%ba%b9%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要加载存储在包内的纹理，使用LoadAssetAtPath方法，它需要&lt;code&gt;using UnityEditor&lt;/code&gt;指令。指定路径遵循&lt;code&gt;Packages/&amp;lt;package-name&amp;gt;/&lt;/code&gt;路径方案，如本示例所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEditor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Texture2D texture = (Texture2D)AssetDatabase.LoadAssetAtPath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Packages/com.unity.images-library/Example/Images/image.png&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Texture2D));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;resolving-absolute-paths解析绝对路径&#34;&gt;Resolving absolute paths(解析绝对路径) &lt;a href=&#34;#resolving-absolute-paths%e8%a7%a3%e6%9e%90%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要获取打包资产的绝对路径，使用Path.GetFullPath()方法，它需要&lt;code&gt;using System.IO&lt;/code&gt;指令。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.IO;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; absolute =   Path.GetFullPath(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Packages/com.unity.images-library/Example/Images/image.png&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;scoped-registries作用域注册表&#34;&gt;Scoped registries(作用域注册表) &lt;a href=&#34;#scoped-registries%e4%bd%9c%e7%94%a8%e5%9f%9f%e6%b3%a8%e5%86%8c%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;作用域注册表允许Unity将任何自定义包注册服务器的位置信息传递给包管理器，这样你可以同时访问多个包集合。&lt;/p&gt;
&lt;p&gt;以下是一些重要概念，以帮助你理解这个功能：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Concept概念&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;package registry server包注册服务器&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个跟踪包并提供存储它们的地方的应用程序。在Unity的包管理器窗口中，当你选择Unity注册表上下文时，所有在Unity注册表上注册的包都会在列表面板中显示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;package manager包管理器&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个告诉用户什么包可用，并根据用户对其项目的需求下载安装任何包的应用程序。Unity实现了其自己的包管理器版本，但在其他组织中有几个类似的应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;scope作用域&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义一个包名或名称空间(以反向域格式)，如&lt;code&gt;com.example.mycompany.animation&lt;/code&gt;或&lt;code&gt;com.example&lt;/code&gt;。当用户请求一个包时，包管理器从最匹配作用域的注册表中获取包。更多信息，请参考下方的为项目管理作用域注册表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;你与作用域注册表的交互方式取决于你的角色：&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;包提供者设置自定义注册服务器，除Unity注册表外，还托管并分发自定义包。&lt;/li&gt;
&lt;li&gt;包消费者为每个项目设置作用域注册表，以访问自定义包提供商的注册服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;integrity-and-security-of-scoped-registries作用域注册表的完整性和安全性&#34;&gt;Integrity and security of scoped registries(作用域注册表的完整性和安全性) &lt;a href=&#34;#integrity-and-security-of-scoped-registries%e4%bd%9c%e7%94%a8%e5%9f%9f%e6%b3%a8%e5%86%8c%e8%a1%a8%e7%9a%84%e5%ae%8c%e6%95%b4%e6%80%a7%e5%92%8c%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作为一个包提供者，确保你设置的任何包注册服务器都符合Unity的服务条款和Unity的包指导原则和指南。Unity提供了访问包管理器的权限以便分享知识和内容，但并非作为第三方产品的市场。&lt;/p&gt;
&lt;p&gt;作为一个包消费者，当你安装一个作用域注册表时，要像安装其他任何第三方软件一样保持警惕：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅从可信赖的来源安装作用域注册表，因为那些注册表中的包可以包含可执行代码。&lt;/li&gt;
&lt;li&gt;警惕可能会带来危害或在没有适当控制的情况下捕获数据的第三方注册表。也要防备假扮为Unity，或者声明获得或得到Unity支持的第三方。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;benefits-of-scoped-registries作用域注册表的好处&#34;&gt;Benefits of scoped registries(作用域注册表的好处) &lt;a href=&#34;#benefits-of-scoped-registries%e4%bd%9c%e7%94%a8%e5%9f%9f%e6%b3%a8%e5%86%8c%e8%a1%a8%e7%9a%84%e5%a5%bd%e5%a4%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;作用域注册表可以帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过分发工具、库和其他资产来提供新功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作为提供者，你可以创建你自己的注册表来分发工具和&lt;strong&gt;脚本&lt;/strong&gt;(或其他类型的资产)，版本号表示包的成熟程度。基于语义版本，版本号也表示更新是引入破坏性的API变更还是小修正。你的代码可以依赖其它包中的代码，因为包管理器支持包的依赖。&lt;/p&gt;
&lt;p&gt;作为消费者，你浏览和安装包管理器中的第三方自定义包的体验与浏览Unity的包一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展现有Unity包的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作为消费者，你可以有一个无缝的体验，其中自定义包覆盖Unity包，而不需要手动更改注册表或明确安装不同的包版本。这是因为你可以将包映射到特定的注册表，以便包管理器从Unity注册表或自定义包注册服务器获取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在封闭网络环境中访问包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有些组织在封闭的网络内工作，这使得访问Unity的包注册表变得困难。在这些情况下，组织可以在他们封闭网络内的服务器上设置他们自己的包注册表。然后，网络管理员可以定期与Unity的包注册表同步，以确保作用域注册表有最新的包集合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你是一个包消费者，参考为项目管理作用域注册表获取关于如何在你的Unity项目中连接到现有的自定义包注册服务器的信息。如果你是包生产者，参考分享你的包获取关于受支持的包注册服务器的信息。这些信息还包括如何设置他们与作用域注册表一起使用的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 如果你正在设置一个指向有访问限制的包注册服务器的作用域注册表，你可以配置包管理器将你的&lt;code&gt;npm&lt;/code&gt;验证令牌传递给服务器。更多信息，请参考作用域注册表验证。&lt;/p&gt;
&lt;h2 id=&#34;importing-scoped-registries导入作用域注册表&#34;&gt;Importing scoped registries(导入作用域注册表) &lt;a href=&#34;#importing-scoped-registries%e5%af%bc%e5%85%a5%e4%bd%9c%e7%94%a8%e5%9f%9f%e6%b3%a8%e5%86%8c%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你正在一个共享项目中工作，另一个用户在项目中添加了一个作用域注册表，Unity会警告你另一个用户添加了一个新的作用域注册表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/class-PackageManager-scoped.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你的项目的作用域注册表列表有更改，Unity会发出警告。&lt;/p&gt;
&lt;p&gt;当你点击&lt;strong&gt;关闭&lt;/strong&gt;时，包管理器项目设置窗口会出现，让你可以为你的项目添加、修改或移除作用域注册表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;strong&gt;要在任何时候访问包管理器项目设置窗口，使用Unity的主菜单（&lt;strong&gt;Edit &amp;gt; Project Settings&lt;/strong&gt;，然后选择&lt;/strong&gt;Package Manager&lt;/strong&gt;类别）。你也可以在包管理器窗口的高级设置菜单中选择&lt;strong&gt;Advanced Project Settings&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;managing-scoped-registries-for-a-project对项目进行作用域注册表管理&#34;&gt;Managing scoped registries for a project(对项目进行作用域注册表管理) &lt;a href=&#34;#managing-scoped-registries-for-a-project%e5%af%b9%e9%a1%b9%e7%9b%ae%e8%bf%9b%e8%a1%8c%e4%bd%9c%e7%94%a8%e5%9f%9f%e6%b3%a8%e5%86%8c%e8%a1%a8%e7%ae%a1%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要管理项目中的作用域包注册表，你可以直接编辑你的项目清单文件，或使用包管理器项目设置窗口让Unity为你更改清单。&lt;/p&gt;
&lt;p&gt;项目清单使用了一个scopedRegistries属性，它包含了一个作用域注册表配置对象的数组。每个对象都有如下属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;JSON Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;name&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在用户界面中显示的作用域名称。包管理器窗口在详情面板中显示此名称。例如，&lt;code&gt;&amp;quot;name&amp;quot;: &amp;quot;工具&amp;quot;&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;url&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指向与npm兼容的注册表服务器的URL。例如，&lt;code&gt;&amp;quot;url&amp;quot;: &amp;quot;https://mycompany.example.com/tools-registry&amp;quot;&lt;/code&gt; &lt;strong&gt;注意&lt;/strong&gt;：并非所有的注册表提供商都与Unity的包管理器兼容。确保你试图添加的包注册表服务器实现了 &lt;code&gt;/-/v1/search&lt;/code&gt; 或 &lt;code&gt;/-/all&lt;/code&gt; 端点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;scopes&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Array of Strings&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;你可以映射到包名的作用域数组，可以是包名的确切匹配，也可以是命名空间。不支持通配符和其他全局模式。例如，&lt;code&gt;&amp;quot;scopes&amp;quot;: [ &amp;quot;com.example&amp;quot;, &amp;quot;com.example.tools.physics&amp;quot; ]&lt;/code&gt; &lt;strong&gt;注意&lt;/strong&gt;：这种配置类型假设包遵循反向域名标记。这确保了 &lt;code&gt;com.unity&lt;/code&gt; 等同于匹配 &lt;code&gt;com.unity&lt;/code&gt; 命名空间的任何包名，如 &lt;code&gt;com.unity.timeline&lt;/code&gt; 或 &lt;code&gt;com.unity.2d.animation&lt;/code&gt;。 &lt;strong&gt;警告&lt;/strong&gt;：Unity不支持npm的作用域表示法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当包管理器决定从哪个注册表获取一个包时，它会比较包的&lt;strong&gt;名称&lt;/strong&gt;和&lt;strong&gt;作用域&lt;/strong&gt;值，找到与&lt;strong&gt;作用域&lt;/strong&gt;值最接近匹配的注册表。&lt;/p&gt;
&lt;p&gt;例如，在下面的项目清单中，有两个作用域注册表，“General”和“Tools”：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scopedRegistries&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;General&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://example.com/registry&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scopes&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.tools.physics&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tools&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mycompany.example.com/tools-registry&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scopes&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.example.mycompany.tools&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.example.mycompany.tools.animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.example.tools.physics&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.example.animation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当包管理器查找 &lt;code&gt;com.example.animation&lt;/code&gt; 包时，它发现 &lt;code&gt;com.example&lt;/code&gt; 名称空间与其名称最接近，于是从&amp;quot;General&amp;quot;注册表中获取该包。&lt;/p&gt;
&lt;p&gt;当包管理器查找 &lt;code&gt;com.example.tools.physics&lt;/code&gt; 包时，&amp;ldquo;General&amp;quot;注册表具有与包名完全匹配的作用域。&lt;/p&gt;
&lt;p&gt;当包管理器查找 &lt;code&gt;com.example.mycompany.tools.animation&lt;/code&gt; 包时，包管理器发现 &lt;code&gt;com.example.mycompany.tools&lt;/code&gt; 名称空间与其名称最接近，于是从&amp;quot;Tools&amp;quot;注册表中获取该包。尽管它也匹配&amp;quot;General&amp;quot;作用域，但 &lt;code&gt;com.example&lt;/code&gt; 名称空间不是最接近的匹配。&lt;/p&gt;
&lt;p&gt;当包管理器查找 &lt;code&gt;com.unity.animation&lt;/code&gt; 包时，包管理器在任何作用域注册表中都找不到匹配项。在这种情况下，它是从默认注册表中获取包的。&lt;/p&gt;
&lt;h1 id=&#34;resolution-and-conflict解决和冲突&#34;&gt;Resolution and conflict(解决和冲突) &lt;a href=&#34;#resolution-and-conflict%e8%a7%a3%e5%86%b3%e5%92%8c%e5%86%b2%e7%aa%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你将一个包添加到&lt;strong&gt;项目清单&lt;/strong&gt;中，Unity将该包视为项目的依赖项（直接依赖）。然而，一个包也可以依赖于其他包，这在需要该包的任何项目中创建&lt;strong&gt;间接依赖&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于大多数项目在开发游戏和应用程序时需要不止一个包，包管理器必须评估要从注册表中检索的所有请求包版本（无论是直接还是间接的），并决定安装哪些包版本。为了做到这一点，它计算满足项目中所有直接和间接依赖项的包集合，从项目依赖项开始，递归地探索每个间接依赖项，收集所有依赖项信息，然后选择满足依赖性要求而没有任何冲突的包集合。例如，这个依赖图表示了一个有四个&lt;strong&gt;直接依赖&lt;/strong&gt;的项目以及他们所有的间接依赖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个项目直接和间接包依赖的图表&lt;/p&gt;
&lt;p&gt;在这个例子中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浅蓝色节点代表项目的直接依赖。&lt;/li&gt;
&lt;li&gt;深蓝色节点表示该项目中作为间接依赖的相同包和版本。&lt;/li&gt;
&lt;li&gt;红色节点显示两个版本不同的相同包，这是一个冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：只有声明了版本的包依赖需要被解决。包管理器会选择从其他来源安装的包，例如嵌入式包，以及使用本地路径、Git URL和内置包声明的依赖，优先于基于版本的依赖。&lt;/p&gt;
&lt;h2 id=&#34;choosing-the-best-solution选择最佳解决方案&#34;&gt;Choosing the best solution(选择最佳解决方案) &lt;a href=&#34;#choosing-the-best-solution%e9%80%89%e6%8b%a9%e6%9c%80%e4%bd%b3%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;根据在项目清单中定义的包集合，评估所有可能的包组合可能需要很长时间：一个项目可能依赖于数百个包，每个包又依赖于数百个其他包，大多数需要不同的版本。&lt;/p&gt;
&lt;h3 id=&#34;lock-files-and-resolutionstrategy锁定文件和解决策略&#34;&gt;Lock files and resolutionStrategy(锁定文件和解决策略) &lt;a href=&#34;#lock-files-and-resolutionstrategy%e9%94%81%e5%ae%9a%e6%96%87%e4%bb%b6%e5%92%8c%e8%a7%a3%e5%86%b3%e7%ad%96%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了提供最有效的解决方案，包管理器通过在锁定文件中跟踪它们来优先考虑之前使用过的包版本。这保证了使用相同输入进行后续依赖解决时，得到的输出是相同的。它也最小化了耗时的操作，如下载、解压或复制包。&lt;/p&gt;
&lt;p&gt;有时，包管理器无法找到只包括锁定包的解决方案。在这种情况下，包管理器会使用风险最小的升级方案，优先考虑补丁升级而不是小版本或大版本升级，默认情况下，小版本升级优先于大版本升级。然而，你可以通过解决策略属性自定义在考虑更高版本时，你希望包管理器有多大的进取心。&lt;/p&gt;
&lt;h2 id=&#34;example示例&#34;&gt;Example(示例) &lt;a href=&#34;#example%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在这个例子中，有以下几个包的多个版本被请求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;burst@1.2.2&lt;/code&gt; (twice) and &lt;code&gt;burst@1.3.0-preview.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collections@0.5.1-preview.11&lt;/code&gt; and &lt;code&gt;collections@0.5.2-preview.8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jobs@0.2.4-preview.11&lt;/code&gt; (twice) and &lt;code&gt;jobs@0.2.5-preview.20&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用直接和间接依赖的集合，包管理器选择了 burst 包的最高版本(&lt;code&gt;burst@1.3.0-preview.3&lt;/code&gt;)，这满足了 &lt;code&gt;collections@0.5.2-preview.8&lt;/code&gt; 包的依赖：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在依赖关系图中，蓝色节点表示包管理器选择了哪些版本&lt;/p&gt;
&lt;h1 id=&#34;lock-files锁定文件&#34;&gt;Lock files(锁定文件) &lt;a href=&#34;#lock-files%e9%94%81%e5%ae%9a%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;锁定文件包含了包管理器对一个项目进行依赖解析的结果。包管理器用锁定文件来在解析包依赖图时提供一个确定的结果。当Unity包管理器计算出一个成功的解析时，它会将该解析存储在项目的&lt;code&gt;Packages&lt;/code&gt;文件夹中，名为&lt;code&gt;packages-lock.json&lt;/code&gt;的JSON文件里。对&lt;strong&gt;项目清单&lt;/strong&gt;或&lt;strong&gt;可变&lt;/strong&gt;包清单（嵌入的或从本地文件夹安装的）的任何修改都可能迫使包管理器重新计算已解析的包版本。但只要锁定文件中的包版本满足依赖版本和解析策略预设的范围，那么该包将被锁定在那个版本。&lt;/p&gt;
&lt;p&gt;例如，这是锁定文件中的一个典型条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.unity.textmeshpro&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;depth&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;registry&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.ugui&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://packages.unity.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当包管理器解析任何冲突的间接依赖时，它尽量重用尽可能多的锁定包。这确保了对同一组依赖进行后续的依赖解析会产生相同的结果。它也最大程度地减少了耗时的操作，如下载、提取或复制包。&lt;/p&gt;
&lt;p&gt;如果没有只包括锁定包的解决方案，那么包管理器会选择一组风险最小的升级包，优先选择补丁级别的升级而不是小版本或大版本的升级，而小版本的升级优先于大版本的升级。实际上，你可以自定义升级的风险级别。有关更多信息，请查看自定义解析策略。&lt;/p&gt;
&lt;p&gt;要强制刷新间接依赖版本，就删除锁定文件。&lt;/p&gt;
&lt;p&gt;不要手动修改锁定文件：包管理器创建和维护锁定文件，因此它会覆盖你对文件做的任何更改。&lt;/p&gt;
&lt;p&gt;将锁定文件放在源代码控制下，这样你可以始终复现相同的包集，确保你的项目随着时间的推移和在不同的机器上保持一致。&lt;/p&gt;
&lt;h2 id=&#34;disabling-the-lock-file禁止锁定文件&#34;&gt;Disabling the lock file(禁止锁定文件) &lt;a href=&#34;#disabling-the-lock-file%e7%a6%81%e6%ad%a2%e9%94%81%e5%ae%9a%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;默认情况下，当包管理器成功计算出一个依赖图时，它会创建或更新锁定文件。如果你看到意外的结果，你可以在你的项目清单中设置enableLockFile属性为&lt;code&gt;false&lt;/code&gt;来禁用锁定。然而，如果你禁用了锁定文件，包管理器会再次克隆Git URL包，这会导致性能降低和额外的网络使用。如果你在两次解析之间向远程Git仓库提交了更新的提交，那么可能会导致结果不确定。&lt;/p&gt;
&lt;h1 id=&#34;project-manifest项目清单&#34;&gt;Project manifest(项目清单) &lt;a href=&#34;#project-manifest%e9%a1%b9%e7%9b%ae%e6%b8%85%e5%8d%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当Unity加载一个项目时，Unity包管理器会读取&lt;strong&gt;项目清单&lt;/strong&gt;，以便计算出要获取和加载哪些包的列表。当用户通过包管理器窗口安装或卸载一个包时，包管理器会将这些更改存储在项目清单文件中。项目清单文件通过依赖对象管理包的列表。&lt;/p&gt;
&lt;p&gt;此外，项目清单还充当包管理器的配置文件，包管理器使用清单来自定义注册表URL并注册自定义注册表。&lt;/p&gt;
&lt;p&gt;你可以在你的Unity项目的根文件夹下的&lt;code&gt;Packages&lt;/code&gt;文件夹中找到项目清单文件，名为&lt;code&gt;manifest.json&lt;/code&gt;。像包清单文件一样，项目清单文件使用JSON（JavaScript对象表示法）语法。&lt;/p&gt;
&lt;h2 id=&#34;properties属性&#34;&gt;Properties(属性) &lt;a href=&#34;#properties%e5%b1%9e%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;所有属性都是可选的。然而，如果你的项目清单文件不包含任何值，包管理器窗口将无法加载，而且包管理器也不会加载任何包。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Key&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;JSON Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;dependencies依赖&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Object&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需要的包集合，仅包括直接依赖（间接依赖放在包清单中）。每个条目将包名映射到最低版本需求： &lt;code&gt;{&lt;/code&gt; &lt;code&gt;&amp;quot;dependencies&amp;quot;: {&lt;/code&gt; &lt;code&gt;&amp;quot;com.my-package&amp;quot;: &amp;quot;2.3.1&amp;quot;,&lt;/code&gt; &lt;code&gt;&amp;quot;com.my-other-package&amp;quot;: &amp;quot;1.0.1-preview.1&amp;quot;,&lt;/code&gt; &lt;code&gt;等.&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; 指定版本号表示需要包管理器从包注册中心下载此包（也就是说，这个包的来源是注册中心）。然而，除了使用版本号外，你也可以指定一个本地文件夹或tarball文件的路径，或者一个Git的URL。 &lt;strong&gt;注意&lt;/strong&gt;：你不需要在这里指定内嵌包，因为包管理器会在你的项目的&lt;code&gt;Packages&lt;/code&gt;文件夹中找到它们，并自动加载。如果有与同名的内嵌包在它自己的包清单里，包管理器会忽略此项。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;enableLockFile启动锁定文件&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Boolean&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用锁定文件，以确保以确定的方式解析依赖。这个默认设置为&lt;code&gt;true&lt;/code&gt;。更多信息，请查看使用锁定文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;resolutionStrategy解决策略&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;基于语义化版本规则升级间接依赖。这个默认设置为&lt;code&gt;lowest&lt;/code&gt;。更多信息，请在下方查看设置解析策略。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;scopedRegistries范围注册&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Array of Objects&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;除了默认注册中心，你可以指定自定义注册中心。这可以让你自己托管你的包。 更多详细信息，请查看范围注册中心。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;testables可测试&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Array of Strings&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;列出那些你想在Unity测试框架中加载的包。更多信息，请查看如何给包添加测试。 &lt;strong&gt;注意&lt;/strong&gt;：你不需要在这里指定内嵌包，因为Unity测试框架默认他们是可测试的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;example&#34;&gt;Example &lt;a href=&#34;#example&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scopedRegistries&amp;#34;&lt;/span&gt;: [{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;My internal registry&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://my.internal.registry.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;scopes&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.company&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.package-1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.package-2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.company.my-package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.my-local-package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:&amp;lt;path&amp;gt;/my_package_folder&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.my-local-tarball&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:&amp;lt;path&amp;gt;/my_package_tarball.tgz&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.unity.my-git-package&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://my.repository/my-package.git#v1.2.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;enableLockFile&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resolutionStrategy&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;highestMinor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;testables&amp;#34;&lt;/span&gt;: [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.unity.package-1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.unity.package-2&amp;#34;&lt;/span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-a-resolution-strategy设置解决策略&#34;&gt;Setting a resolution strategy(设置解决策略) &lt;a href=&#34;#setting-a-resolution-strategy%e8%ae%be%e7%bd%ae%e8%a7%a3%e5%86%b3%e7%ad%96%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;虽然你可以通过在项目清单中显式添加它们来强制Unity的包依赖解析使用间接依赖的更高版本，但这并不是一个好的策略，原因有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这将更多的责任放在项目所有者身上，以维护依赖版本。&lt;/li&gt;
&lt;li&gt;随着时间的推移，你可能会有一些项目不需要的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个更好的方法是通过设置 &lt;strong&gt;resolutionStrategy&lt;/strong&gt; 属性来自定义包管理器根据语义化版本规则选择间接依赖的方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Value:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;lowest&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不升级间接依赖。相反，它使用的是精确的请求版本。这是默认模式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;highestPatch&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;升级到具有相同主要和次要组件的最高版本。例如，请求版本1.2.3，此策略选择范围 &lt;code&gt;[1.2.3, 1.3.0)&lt;/code&gt;（即，&lt;code&gt;&amp;gt;= 1.2.3&lt;/code&gt; 和 &lt;code&gt;&amp;lt; 1.3.0&lt;/code&gt;）中的最高版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;highestMinor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;升级到具有相同主要组件的最高版本。例如，请求版本1.2.3，此策略选择范围 &lt;code&gt;[1.2.3, 2.0.0)&lt;/code&gt;（即，&lt;code&gt;&amp;gt;= 1.2.3&lt;/code&gt; 和 &lt;code&gt;&amp;lt; 2.0.0&lt;/code&gt;）中的最高版本。 &lt;strong&gt;注意&lt;/strong&gt;：版本&lt;code&gt;1.0.0&lt;/code&gt;标记为第一个稳定的，生产就绪的版本。在那之下，版本&lt;code&gt;0.X.Y&lt;/code&gt;表明它们的API尚未稳定，连续的次要版本可能引入破坏性的变化。SemVer规范的这一部分允许在不妨碍快速开发的情况下发布包的早期版本。因此，当目标版本为&lt;code&gt;0.X.Y&lt;/code&gt;时，&lt;strong&gt;最高次要&lt;/strong&gt;表现得像&lt;strong&gt;最高补丁&lt;/strong&gt;，以确保选择一个向后兼容的版本。例如，请求版本&lt;code&gt;0.1.3&lt;/code&gt;，此策略选择范围 &lt;code&gt;[0.1.3,0.2.0)&lt;/code&gt; 中的最高版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;highest&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;升级到最高版本。例如，请求版本1.2.3，此策略选择范围 &lt;code&gt;[1.2.3,)&lt;/code&gt;（即，&lt;code&gt;&amp;gt;= 1.2.3&lt;/code&gt;，没有上限）中的最高版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这些范围永远不允许依赖从稳定版本跳到实验性或预发布包中。&lt;/p&gt;
&lt;h1 id=&#34;embedded-dependencies嵌入式依赖&#34;&gt;Embedded dependencies(嵌入式依赖) &lt;a href=&#34;#embedded-dependencies%e5%b5%8c%e5%85%a5%e5%bc%8f%e4%be%9d%e8%b5%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你项目中&lt;code&gt;Packages&lt;/code&gt;文件夹下的任何包都被嵌入到那个项目中。你可以通过几种方式创建一个&lt;strong&gt;嵌入式包&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在项目的&lt;code&gt;Packages&lt;/code&gt;文件夹下直接创建新包。&lt;/li&gt;
&lt;li&gt;手动从项目的包缓存中复制Unity包，粘贴到你的项目的&lt;code&gt;Packages&lt;/code&gt;文件夹下。&lt;/li&gt;
&lt;li&gt;使用C#脚本将已安装的包版本嵌入到项目中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嵌入式包不需要作为依赖出现在&lt;strong&gt;项目清单&lt;/strong&gt;中。然而，如果你嵌入了一个已安装的包的版本，你的项目清单仍然会列出对原始已安装版本的依赖。在这种情况下，磁盘上的包优先于作为依赖列出的包版本，所以不需要从项目清单中删除它。例如，如果项目清单指定了对&lt;code&gt;com.unity.example&lt;/code&gt;包版本1.3.1的依赖，但项目也有一个嵌入了名为该名称的包，包管理器会使用嵌入式包，无论它的明显版本如何，而不会去从注册表中下载版本1.3.1。&lt;/p&gt;
&lt;p&gt;确保你跟踪你的嵌入式包的内容，以及你对其进行的任何更改。如果你的Unity项目在源代码控制之下，将在该项目中嵌入的任何包添加到同一源代码控制中。&lt;/p&gt;
&lt;h2 id=&#34;creating-a-new-custom-package创建新的自定义包&#34;&gt;Creating a new custom package(创建新的自定义包) &lt;a href=&#34;#creating-a-new-custom-package%e5%88%9b%e5%bb%ba%e6%96%b0%e7%9a%84%e8%87%aa%e5%ae%9a%e4%b9%89%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要嵌入一个新的包，将你的新包内容创建在&lt;code&gt;Packages&lt;/code&gt;文件夹下的一个子文件夹中。获取更多信息，可以按照创建自定义包的指示进行操作。&lt;/p&gt;
&lt;p&gt;通常，你的新包会一直嵌入在你的项目中，直到你准备好与其他用户分享并在其他项目中测试它。然后，你可以将它发布到有作用域的包注册表中。&lt;/p&gt;
&lt;h2 id=&#34;copying-a-unity-package-from-the-cache从缓存复制unity包&#34;&gt;Copying a Unity package from the cache(从缓存复制Unity包) &lt;a href=&#34;#copying-a-unity-package-from-the-cache%e4%bb%8e%e7%bc%93%e5%ad%98%e5%a4%8d%e5%88%b6unity%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从注册表安装的包是&lt;strong&gt;不可变的&lt;/strong&gt;，这意味着你不能编辑它。如果你想编辑一个包，你可以通过将它复制到你的&lt;code&gt;Projects&lt;/code&gt;文件夹来使其变为&lt;strong&gt;可变的&lt;/strong&gt;。这种类型的包被称为嵌入式包，它会覆盖你的包缓存中的内容。之后，你可以从&lt;code&gt;Project&lt;/code&gt;文件夹中删除该嵌入式包的文件夹，包管理器会自动切换到不可变的，已缓存的包。&lt;/p&gt;
&lt;p&gt;在缓存中找到你的包文件夹的最可靠方法是直接在Unity编辑器中定位已安装的版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开项目窗口，选择&lt;strong&gt;Window&lt;/strong&gt;菜单，然后选择&lt;strong&gt;General&lt;/strong&gt; &amp;gt; &lt;strong&gt;Project&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从&lt;strong&gt;Project窗口&lt;/strong&gt;中找出你想要嵌入的已安装包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右键点击所选包的文件夹，选择&lt;strong&gt;Show in Explorer&lt;/strong&gt;（Windows）或&lt;strong&gt;Reveal in Finder&lt;/strong&gt;（macOS）。此操作将在文件浏览器中使用&lt;code&gt;&amp;lt;package-name&amp;gt;@&amp;lt;package-version&amp;gt;&lt;/code&gt;命名规则直接打开该包的文件夹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你想要嵌入在你的项目中找不到的包，你可以直接从你项目的包缓存（&lt;code&gt;&amp;lt;project&amp;gt;/Library/PackageCache&lt;/code&gt;）获取，只需使用你的文件浏览器或命令行导航到正确的文件夹。然而，让编辑器为你找到它更为可靠，因为除了在项目缓存中定位包外，编辑器还会找到从本地文件夹或tarball安装，以及已经嵌入的包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-embed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;文件浏览器打开到项目包缓存下的包文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制包文件夹并直接粘贴到你的项目的&lt;code&gt;Packages&lt;/code&gt;文件夹中。不要将它放在&lt;code&gt;Assets&lt;/code&gt;文件夹中，因为包管理器不会扫描该文件夹以寻找包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移除文件夹名中的&lt;code&gt;@&amp;lt;package-version&amp;gt;&lt;/code&gt;部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你的项目已经在源代码控制下，那么将新嵌入的包添加到源代码控制中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你也可以在全局缓存下找到包文件夹，但全局缓存包含了你的系统上曾安装过的所有Unity编辑器版本的包，所以选择与你的项目的编辑器版本兼容的版本时要小心。&lt;/p&gt;
&lt;p&gt;如果你想删除嵌入式包，使用你的文件浏览器或命令行在你的&lt;code&gt;Packages&lt;/code&gt;文件夹中定位那个包。考虑给嵌入式包的文件夹备份，否则你会失去对该包作的任何更改。然后，从你的&lt;code&gt;Packages&lt;/code&gt;文件夹中删除那个包的文件夹。包管理器会自动切换回不可改变的，已缓存的包。&lt;/p&gt;
&lt;h1 id=&#34;git-dependenciesgit依赖项&#34;&gt;Git dependencies(Git依赖项) &lt;a href=&#34;#git-dependenciesgit%e4%be%9d%e8%b5%96%e9%a1%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当包管理器从Git仓库获取一个包时，它会将包本地添加到你的项目中。这允许你测试未发布的更改，但你不能用它来为那个Git仓库贡献代码。如果你想将一个已存在的本地Git仓库设为你的项目的依赖项，那么可以使用指向你本地Git仓库的路径来代替。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你不能在package.json文件中指定&lt;strong&gt;Git依赖项&lt;/strong&gt;，因为包管理器不支持包之间的Git依赖。它只支持项目的Git依赖，所以你只能在项目的manifest.json文件中声明Git依赖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果你想更新你的Git依赖到仓库中的特定版本（修订版），请参阅Locked Git依赖项。&lt;/p&gt;
&lt;p&gt;本节包括以下主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求&lt;/li&gt;
&lt;li&gt;Git URLs
&lt;ul&gt;
&lt;li&gt;使用HTTP/HTTPS协议&lt;/li&gt;
&lt;li&gt;使用SSH协议&lt;/li&gt;
&lt;li&gt;使用FILE协议&lt;/li&gt;
&lt;li&gt;使用GIT协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扩展语法
&lt;ul&gt;
&lt;li&gt;指定一个Git修订版&lt;/li&gt;
&lt;li&gt;在仓库的子文件夹中指定一个包&lt;/li&gt;
&lt;li&gt;同时指定修订版和路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;锁定的Git依赖项&lt;/li&gt;
&lt;li&gt;Git LFS支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;requirements要求&#34;&gt;Requirements(要求) &lt;a href=&#34;#requirements%e8%a6%81%e6%b1%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要在项目中使用Git依赖项，请确保你在电脑上安装了Git客户端（最低版本2.14.0），并已将Git可执行路径添加到PATH系统环境变量中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：Unity已经测试过包管理器与Git 2.14.0及以上版本的兼容性。如果你使用的Git版本低于2.14.0，Unity无法保证结果。&lt;/p&gt;
&lt;p&gt;如果仓库跟踪的文件使用的是Git LFS，确保你的机器上也安装了Git LFS客户端。如果未安装，包管理器无法获取存储在LFS服务器上的文件，而是在没有任何错误或警告消息的情况下检出LFS指针文件。&lt;/p&gt;
&lt;p&gt;你可以使用包管理器窗口直接从Git仓库安装一个包。要获取更多信息，请参考从Git URL安装。&lt;/p&gt;
&lt;h2 id=&#34;git-urls&#34;&gt;Git URLs &lt;a href=&#34;#git-urls&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包管理器支持所有的Git协议，除了本地文件路径。要将Git URL指定为依赖项，需要在&lt;strong&gt;项目清单&lt;/strong&gt;中添加包的名称，使用Git的URL而不是版本号或本地文件路径。例如，以下是如何使用不同协议指定远程Git的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository1.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh://git@github.example.com/myuser/myrepository2.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file://localhost/github.example.com/myuser/myrepository3.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage4&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git://github.example.com/myuser/myrepository4.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;包管理器通过查看仓库路径末尾的&lt;code&gt;.git&lt;/code&gt;文件扩展名，来识别格式为URL的依赖项是否为Git URL。一些Git仓库托管服务不支持带有此扩展名的URL，而其他一些则强制要求。因此，Git依赖项语法允许你在使用GIT协议，或在HTTP/HTTPS，SSH，FILE URL之前添加特殊的&lt;code&gt;git+&lt;/code&gt;前缀时，省略这个扩展名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;git+&lt;/code&gt;前缀是&lt;code&gt;manifest.json&lt;/code&gt;文件中的一个特殊标记，表明依赖项是基于Git的。包管理器在克隆仓库时不会将它传递给Git。&lt;/p&gt;
&lt;p&gt;要获取有关Git支持的URL格式的更多信息，请参考git clone命令的文档。要了解Git使用的协议之间的区别，请参阅Git文档中关于使用协议的部分。&lt;/p&gt;
&lt;p&gt;你还可以为Git依赖项使用扩展语法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果你想要的包不在仓库的根目录，你可以指定到仓库中包的子文件夹的路径。只有当你需要的包不在仓库的根部时，才需要这样做。例如，在以下字符串中的&lt;code&gt;?path=/folder1/folder2&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git?path=/folder1/folder2&amp;quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;要获取更多信息，请参阅在子文件夹中指定一个包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以指定一个Git修订版，它可以是一个标签，分支名，或一个特定的提交哈希来锁定。这确保包管理器始终加载那个确切的修订版。如果你不指定修订版，包管理器会克隆默认分支和最新提交的仓库，并锁定到那个修订版。例如，以下字符串中的&lt;code&gt;#v2.0.0&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git#v2.0.0&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要获取更多信息，请参阅指定一个Git修订版。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-the-httphttps-protocol&#34;&gt;Using the HTTP/HTTPS protocol &lt;a href=&#34;#using-the-httphttps-protocol&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;你可以使用带有完整URL的HTTPS协议：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository.git&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你的Git服务器不支持&lt;code&gt;.git&lt;/code&gt;扩展，你可以添加特殊的&lt;code&gt;git+&lt;/code&gt;前缀，带或不带这个扩展：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+https://github.example.com/myuser/myrepository1.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+https://github.example.com/myuser/myrepository2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：或者，你可以使用GIT协议，而不是&lt;code&gt;git+&lt;/code&gt;前缀。要获取更多信息，请参阅使用GIT协议。&lt;/p&gt;
&lt;p&gt;如果仓库可以公开访问，对于与用户分享Git URLs，我们建议使用HTTPS方案，因为你可以直接从Git仓库托管服务网页复制和粘贴URL。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-git-cloning.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从包仓库复制URL&lt;/p&gt;
&lt;p&gt;如果仓库不是公开可访问的，并且你正在使用HTTPS，仓库服务器会因为你无法与服务器交互以提供你的凭证而无法验证你的身份。在这种情况下，编辑器会通知你身份验证失败。&lt;/p&gt;
&lt;p&gt;要解决这些身份验证问题，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预先使用Git凭证助手进行身份验证。获取更多信息，请参考&amp;quot;使用HTTPS Git URL与私有仓库进行交互&amp;rdquo;。&lt;/li&gt;
&lt;li&gt;改为使用SSH协议。如果你设置并配置了与Git仓库托管服务的SSH密钥对，包管理器可以无缝地代表你验证请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;using-the-ssh-protocol&#34;&gt;Using the SSH protocol &lt;a href=&#34;#using-the-ssh-protocol&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;你可以使用带有完整URL的SSH协议：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ssh://git@mycompany.github.com/gitproject/com.mycompany.mypackage.git&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你的Git服务器不支持&lt;code&gt;.git&lt;/code&gt;扩展，你可以添加特殊的&lt;code&gt;git+&lt;/code&gt;前缀，带或不带这个扩展：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+ssh://git@github.example.com/myuser/myrepository1.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+ssh://git@github.example.com/myuser/myrepository2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：或者，你可以使用GIT协议，而不是&lt;code&gt;git+&lt;/code&gt;前缀。要获取更多信息，请参见使用GIT协议的部分。&lt;/p&gt;
&lt;p&gt;你也可以使用类似SCP的简写，包管理器总是会识别它为Git依赖项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git@mycompany.github.com:gitproject/com.mycompany.mypackage.git&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;using-putty-on-windows在windows上使用putty&#34;&gt;Using PuTTY on Windows(在Windows上使用PuTTY) &lt;a href=&#34;#using-putty-on-windows%e5%9c%a8windows%e4%b8%8a%e4%bd%bf%e7%94%a8putty&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;当你使用SSH进行身份验证时，Git将使用默认位置的密钥。然而，如果你在Windows上使用PuTTY作为SSH客户端，你需要配置&lt;code&gt;GIT_SSH&lt;/code&gt;环境变量，使其指向&lt;code&gt;plink.exe&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;authenticating-with-sshssh身份验证&#34;&gt;Authenticating with SSH(SSH身份验证) &lt;a href=&#34;#authenticating-with-sshssh%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;如果你想使用SSH协议，你需要在Unity外部设置SSH密钥。有关为特定主机设置身份验证的更多信息，请参阅Bitbucket、GitLab和GitHub的帮助页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你用密语加密了你的SSH密钥，包管理器就无法检索到包，因为它没有提供在终端或命令行中输入密语的方式。在这种情况下，编辑器会通知你身份验证失败。关于使用身份验证代理的信息，请参阅&amp;quot;使用SSH Git URLs的口令保护SSH密钥&amp;quot;。关于使用&lt;strong&gt;ssh-agent&lt;/strong&gt;进行身份验证的更多信息，请参阅SSH的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;using-the-file-protocol使用file协议&#34;&gt;Using the FILE protocol(使用FILE协议) &lt;a href=&#34;#using-the-file-protocol%e4%bd%bf%e7%94%a8file%e5%8d%8f%e8%ae%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;除非它们格式正确，否则包管理器不会把带有&lt;code&gt;file:&lt;/code&gt;前缀的Git URL识别为Git依赖项。这意味着你必须使用&lt;code&gt;git+file:&lt;/code&gt;协议，或者使用带&lt;code&gt;.git&lt;/code&gt;后缀的&lt;code&gt;file:&lt;/code&gt;协议：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+file://github.example.com/myuser/myrepository1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+file:///github.example.com/myuser/myrepository2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:///github.example.com/myuser/myrepository3.git&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：或者，你可以使用GIT协议，而不是&lt;code&gt;git+&lt;/code&gt;前缀。要获得更多信息，请参见使用GIT协议的部分。&lt;/p&gt;
&lt;p&gt;包管理器会将任何其他语法解读为本地路径。&lt;/p&gt;
&lt;h3 id=&#34;using-the-git-protocol使用git协议&#34;&gt;Using the GIT protocol(使用GIT协议) &lt;a href=&#34;#using-the-git-protocol%e4%bd%bf%e7%94%a8git%e5%8d%8f%e8%ae%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;包管理器能识别带或不带&lt;code&gt;.git&lt;/code&gt;路径后缀的&lt;code&gt;git:&lt;/code&gt;协议：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git://github.example.com/myuser/myrepository1.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git://github.example.com/myuser/myrepository2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GIT协议不需要也不支持&lt;code&gt;git+&lt;/code&gt;前缀。&lt;/p&gt;
&lt;h2 id=&#34;extended-syntax扩展语法&#34;&gt;Extended syntax(扩展语法) &lt;a href=&#34;#extended-syntax%e6%89%a9%e5%b1%95%e8%af%ad%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你可以使用扩展语法来标识特定的Git版本，一个子文件夹中的包，或者两者都标识。&lt;/p&gt;
&lt;p&gt;你可以在Unity支持的任何Git协议中使用扩展语法。&lt;/p&gt;
&lt;h3 id=&#34;specifying-a-git-revision指定git版本&#34;&gt;Specifying a Git revision(指定Git版本) &lt;a href=&#34;#specifying-a-git-revision%e6%8c%87%e5%ae%9agit%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;为了声明你希望包管理器克隆的特定版本，在URL的末尾加上由井号(&lt;code&gt;#&lt;/code&gt;)前缀的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository1.git#revision&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage2&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git+https://github.example.com/myuser/myrepository2#revision&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;版本可以是任何标签，分支或提交哈希。你必须提供完整的提交哈希。Unity不支持缩短的SHA-1哈希。以下表格展示了指定版本的例子：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Syntax语法&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;URL example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最新默认分支&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定的分支&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git#my-branch&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;特定版本&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git#v2.0.0&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提交哈希&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;quot;https://github.example.com/myuser/myrepository.git#9e72f9d5a6a3dadc38d813d8399e1b0e86781a49&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;specifying-a-package-in-a-subfolder-of-the-repository指定仓库子文件夹中的包&#34;&gt;Specifying a package in a subfolder of the repository(指定仓库子文件夹中的包) &lt;a href=&#34;#specifying-a-package-in-a-subfolder-of-the-repository%e6%8c%87%e5%ae%9a%e4%bb%93%e5%ba%93%e5%ad%90%e6%96%87%e4%bb%b6%e5%a4%b9%e4%b8%ad%e7%9a%84%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;如果你使用Git URL语法指定一个仓库，包管理器会假设包必须位于仓库的根目录。然而，有些包并不在它们的仓库的根级别，有些仓库中包含了多个包。&lt;/p&gt;
&lt;p&gt;你可以在Git URL中使用&lt;code&gt;path&lt;/code&gt;查询参数通知包管理器在何处找到包。你指定的路径必须是相对于仓库根目录的，并且你指定的子文件夹必须包含&lt;strong&gt;包清单&lt;/strong&gt;（&lt;code&gt;package.json&lt;/code&gt;文件）。&lt;/p&gt;
&lt;p&gt;要为Git依赖关系指定一个仓库子文件夹，使用&lt;code&gt;path&lt;/code&gt;查询参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository.git?path=/subfolder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，包管理器会注册位于指定仓库子文件夹中的包，并忽略仓库的其他部分。&lt;/p&gt;
&lt;p&gt;有时，一个仓库包含几个相关的包。如果你想要从同一仓库添加多个包，你必须在你的项目清单中添加两个单独的条目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository.git?path=/subfolder1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage3&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository.git?path=/subfolder2/subfolder3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你多次指定同一仓库，包管理器会克隆同一个仓库多次，这将导致性能降低和额外的网络使用。&lt;/p&gt;
&lt;h3 id=&#34;specifying-revisions-and-paths-at-the-same-time同时指定修订版本和路径&#34;&gt;Specifying revisions and paths at the same time(同时指定修订版本和路径) &lt;a href=&#34;#specifying-revisions-and-paths-at-the-same-time%e5%90%8c%e6%97%b6%e6%8c%87%e5%ae%9a%e4%bf%ae%e8%ae%a2%e7%89%88%e6%9c%ac%e5%92%8c%e8%b7%af%e5%be%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;你可以使用Unity支持的任何Git协议指定路径和修订版本。然而，&lt;code&gt;path&lt;/code&gt;查询参数总是位于修订版本锚点的前面。反向顺序是无效的。以下是正确顺序的一个示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;com.mycompany.mypackage&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.example.com/myuser/myrepository.git?path=/example/folder#v1.2.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;locked-git-dependencies锁定的git依赖&#34;&gt;Locked Git dependencies(锁定的Git依赖) &lt;a href=&#34;#locked-git-dependencies%e9%94%81%e5%ae%9a%e7%9a%84git%e4%be%9d%e8%b5%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包管理器的核心原则之一是确定性。如果你与其他用户共享你的项目，包管理器应该安装相同的包依赖和版本集，并包括它从Git中获取的包。为了达到这个目标，包管理器通过使用锁文件来跟踪Git依赖的提交哈希。&lt;/p&gt;
&lt;p&gt;当你添加一个Git依赖项并将修订版本设置为一个分支或一个标签时，包管理器会获取相应的提交哈希以存储在锁文件中。随着时间的推移，分支和标签可能会指向Git仓库上的不同提交。例如，一个分支可能有更多的新提交添加到它上面。&lt;/p&gt;
&lt;p&gt;要更新包到分支或标签指向的不同提交，使用从git URL安装包的按钮并输入一个Git URL。你可以使用相同的Git URL，因为当你提交一个新请求时，包管理器会忽略锁定的提交哈希。然而，你也可以指定一个新的修订号、标签或分支作为修订。&lt;/p&gt;
&lt;p&gt;另外，你也可以使用那个Git URL创建一个带有Client.Add C# API方法的脚本。&lt;/p&gt;
&lt;h2 id=&#34;git-lfs-supportgit-lfs支持&#34;&gt;Git LFS Support(Git LFS支持) &lt;a href=&#34;#git-lfs-supportgit-lfs%e6%94%af%e6%8c%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包管理器支持使用Git LFS的Git依赖项仓库。由于Git LFS设计用来进行最小的配置开销，因此它支持HTTPS和SSH认证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于HTTPS认证的信息，请参考使用HTTP/HTTPS协议。&lt;/li&gt;
&lt;li&gt;关于SSH认证的信息，请参考使用SSH协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果用户需要认证并且没有访问远程仓库权限的有效凭据，则无法从LFS服务器检索存储的文件。&lt;/p&gt;
&lt;p&gt;包作者可以通过在仓库中的&lt;code&gt;.lfsconfig&lt;/code&gt;配置文件中提供URL来帮助Git LFS客户端定位LFS服务器。有两种方式可以做到这一点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;setting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;lfs&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ssh:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//git@HOSTNAME/path/to/repo.git
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Option&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;per-remote&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;setting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;remote&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;origin&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;lfsurl&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ssh:&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//git@HOSTNAME/path/to/repo.git
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果仓库包含一个&lt;code&gt;.lfsconfig&lt;/code&gt;文件，确保你将其包含在&lt;code&gt;.npmignore&lt;/code&gt;文件中，以避免在发布包的版本中包含它。&lt;/p&gt;
&lt;h3 id=&#34;git-lfs-cachegit-lfs缓存&#34;&gt;Git LFS cache(Git LFS缓存) &lt;a href=&#34;#git-lfs-cachegit-lfs%e7%bc%93%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;从Unity 2021.2开始，你可以选择启用一个Git LFS缓存供包管理器在检出基于Git的依赖项时使用。这样可以避免在检出仓库的不同修改版本时下载相同的文件。&lt;/p&gt;
&lt;p&gt;包管理器的Git LFS缓存与你的Git仓库的&lt;code&gt;.git/lfs&lt;/code&gt;文件夹中的Git LFS缓存是不同的。包管理器不能使用默认的Git缓存，因为它在将包复制到项目缓存后不会保留克隆的仓库。&lt;/p&gt;
&lt;p&gt;要启用包管理器的Git LFS缓存，选择以下选项之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要启用Git LFS缓存并使用默认全局缓存根下的&lt;code&gt;git-lfs&lt;/code&gt;子文件夹作为其位置，将&lt;code&gt;UPM_ENABLE_GIT_LFS_CACHE&lt;/code&gt;环境变量设置为任何非空值。&lt;/li&gt;
&lt;li&gt;要启用Git LFS缓存并为其使用自定义位置，将&lt;code&gt;UPM_GIT_LFS_CACHE_PATH&lt;/code&gt;环境变量设置为自定义路径。当你设置位置时，Git LFS缓存选项将自动启用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关设置全局缓存的环境变量的更多信息，请参阅自定义全局缓存。&lt;/p&gt;
&lt;p&gt;**注意：**使用启用Git LFS的包时，这种优化需要额外的硬盘空间。你需要决定哪个更有利：Git LFS文件缓存消耗磁盘空间但避免了重新下载相同的文件。然而，有些情况不能利用缓存，并在不复用文件的情况下占用磁盘空间。例如，你的Git依赖项可能解析为引用不同LFS跟踪文件内容的修订，如下面的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在多个项目的依赖项中使用不同的Git修订&lt;/li&gt;
&lt;li&gt;频繁更新包至包含不同变更的LFS文件的修订&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;local-folder-or-tarball-paths本地文件夹或压缩包路径&#34;&gt;Local folder or tarball paths(本地文件夹或压缩包路径) &lt;a href=&#34;#local-folder-or-tarball-paths%e6%9c%ac%e5%9c%b0%e6%96%87%e4%bb%b6%e5%a4%b9%e6%88%96%e5%8e%8b%e7%bc%a9%e5%8c%85%e8%b7%af%e5%be%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以将依赖项指定为包含包的任何本地文件夹或压缩包。此功能对本地离线开发和测试非常有用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你想将本地文件系统上的包作为Git依赖项引用，应使用&lt;code&gt;file://&amp;lt;url&amp;gt;&lt;/code&gt;格式。Unity不支持直接用文件路径引用本地可访问的Git仓库。有关&lt;code&gt;file://&amp;lt;url&amp;gt;&lt;/code&gt;格式的更多信息，请参考Git依赖。&lt;/p&gt;
&lt;p&gt;本节描述了如何使用&lt;strong&gt;项目清单&lt;/strong&gt;设置本地依赖项。如果你想使用包管理器窗口，可按照以下页面的说明操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从本地文件夹安装包&lt;/li&gt;
&lt;li&gt;从本地压缩包文件安装包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;路径引用始终以&lt;code&gt;file:&lt;/code&gt;为前缀，并使用正斜杠(&lt;code&gt;/&lt;/code&gt;)作为路径分隔符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：在Windows上，你也可以使用反斜杠(&lt;code&gt;\&lt;/code&gt;)，但每个反斜杠都必须转义（例如，&lt;code&gt;&amp;quot;file:..\\github\\my_package_folder&amp;quot;&lt;/code&gt;或&lt;code&gt;&amp;quot;file:C:\\Users\\my_username\\github\\my_package_folder&amp;quot;&lt;/code&gt;）。这些路径并不容易阅读，容易打错，且只能在Windows机器上使用。因此，使用正斜杠是更好的选择。&lt;/p&gt;
&lt;p&gt;你可以使用绝对路径，或相对于项目的&lt;code&gt;Packages&lt;/code&gt;文件夹（即项目清单的根文件夹）的路径。换句话说，前缀为两个点(&lt;code&gt;..&lt;/code&gt;)的路径指的是项目路径的根，因此&lt;code&gt;../another_folder&lt;/code&gt;是&lt;code&gt;Packages&lt;/code&gt;文件夹的同级文件夹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：相对路径配合正斜杠在同一仓库中跟踪项目和包时，可以在不同的机器和操作系统上提供更好的可移植性。&lt;/p&gt;
&lt;p&gt;对于Windows的绝对路径，驱动器字母及其冒号（通常为&lt;code&gt;C:&lt;/code&gt;）跟在&lt;code&gt;file:&lt;/code&gt;前缀后，其余的与Linux或macOS路径相同。&lt;/p&gt;
&lt;h2 id=&#34;example-of-a-relative-path相对路径示例&#34;&gt;Example of a relative path(相对路径示例) &lt;a href=&#34;#example-of-a-relative-path%e7%9b%b8%e5%af%b9%e8%b7%af%e5%be%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;file:&lt;/code&gt;前缀之后，路径是一个标准的相对路径。在以下示例中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目的&lt;code&gt;Packages&lt;/code&gt;文件夹是&lt;code&gt;C:\Users\my_username\Projects\my_project\Packages&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Projects&lt;/code&gt;，&lt;code&gt;github&lt;/code&gt;，和&lt;code&gt;Downloads&lt;/code&gt;文件夹是同级文件夹。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;my_package_c&lt;/code&gt;是一个&lt;strong&gt;嵌入式包&lt;/strong&gt;（复制到&lt;code&gt;Packages&lt;/code&gt;文件夹中以使其可变的包）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_a&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:../github/my_package_folder&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_b&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:../Downloads/my_package_tarball.tgz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my_package_c&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:com.unity.textmeshpro&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-of-an-absolute-path-in-linux-or-macoslinux或macos中的绝对路径示例&#34;&gt;Example of an absolute path in Linux or macOS(Linux或macOS中的绝对路径示例) &lt;a href=&#34;#example-of-an-absolute-path-in-linux-or-macoslinux%e6%88%96macos%e4%b8%ad%e7%9a%84%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;file:&lt;/code&gt;前缀之后，路径是一个标准的可移植操作系统接口（POSIX）路径，以正斜杠&lt;code&gt;/&lt;/code&gt;开头：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_a&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:/Users/my_username/github/my_package_folder&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_b&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:/Users/my_username/Downloads/my_package_tarball.tgz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;example-of-an-absolute-path-in-windowswindows中的绝对路径示例&#34;&gt;Example of an absolute path in Windows(Windows中的绝对路径示例) &lt;a href=&#34;#example-of-an-absolute-path-in-windowswindows%e4%b8%ad%e7%9a%84%e7%bb%9d%e5%af%b9%e8%b7%af%e5%be%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;注意，驱动器字母紧跟在&lt;code&gt;file:&lt;/code&gt;前缀之后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_a&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:C:/Users/my_username/github/my_package_folder&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;my_package_b&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file:C:/Users/my_username/Downloads/my_package_tarball.tgz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;troubleshooting故障排除&#34;&gt;Troubleshooting(故障排除) &lt;a href=&#34;#troubleshooting%e6%95%85%e9%9a%9c%e6%8e%92%e9%99%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本节提供以下问题的信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Type of error:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Error message:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一般启动问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 在包管理器窗口中的错误消息 - 包管理器缺失或窗口无法打开 - 升级Unity至新版本后出现的问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包安装问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 包安装失败 - 无法从Git URL添加包 - 硬盘空间不足&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包签名问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 包版本没有签名 - 包版本没有有效的签名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;安装git依赖项的问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 没有找到&amp;rsquo;git&amp;rsquo;可执行文件 - git-lfs: 命令未找到 - 仓库未找到 - 无法读取用户名: 终端提示禁用 - 无法更新Git版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;资产商店&lt;/strong&gt;中的&lt;strong&gt;资产包&lt;/strong&gt;（我的资产）&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 在我的资产上下文中&amp;rsquo;解析http回应失败&#39;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;域注册&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 在包管理器窗口中找不到‘我的注册’&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;构建包时的问题&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 缺少MonoBehaviour错误&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果你遇到可能与网络有关的问题，你也可以运行Unity包管理器的&lt;strong&gt;诊断&lt;/strong&gt;工具。欲了解更多信息，请参考诊断网络问题。&lt;/p&gt;
&lt;h2 id=&#34;error-messages-in-the-package-manager-window包管理器窗口中的错误消息&#34;&gt;Error messages in the Package Manager window(包管理器窗口中的错误消息) &lt;a href=&#34;#error-messages-in-the-package-manager-window%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e7%aa%97%e5%8f%a3%e4%b8%ad%e7%9a%84%e9%94%99%e8%af%af%e6%b6%88%e6%81%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当包管理器遇到问题时，它会在包管理器窗口中显示错误指示符。&lt;/p&gt;
&lt;h3 id=&#34;system-wide-issues系统范围的问题&#34;&gt;System-wide issues(系统范围的问题) &lt;a href=&#34;#system-wide-issues%e7%b3%bb%e7%bb%9f%e8%8c%83%e5%9b%b4%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;网络连接问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当包管理器检测到与特定包无关的问题时，错误消息会出现在状态栏中。例如，如果包管理器无法访问包注册服务器，它会在状态栏中显示此消息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-ui-errors.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;刷新资产错误（或刷新包错误）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果您的网络无法连接到包注册服务器，可能是因为网络连接问题。当您或您的系统管理员诊断并解决网络错误后，状态栏会被清空。&lt;/p&gt;
&lt;p&gt;如果您的网络连接正常，但你没有登录您的Unity账户，包管理器不会显示任何资产商店的包。当你试图使用&lt;strong&gt;我的资产&lt;/strong&gt;上下文时，包管理器会提示你登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-ui-unityid.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击列表面板内的&lt;strong&gt;登录&lt;/strong&gt;按钮，通过Unity Hub登录您的Unity账户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;package-specific-issues特定包的问题&#34;&gt;Package-specific issues(特定包的问题) &lt;a href=&#34;#package-specific-issues%e7%89%b9%e5%ae%9a%e5%8c%85%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果在加载或安装特定包时出现问题（例如，确定要加载哪个版本的包时），错误图标会在被影响的包旁边的列表面板中出现 &lt;strong&gt;(A)&lt;/strong&gt;。要了解问题在哪，检查被影响的包的详细信息面板，以查看详细的错误消息 &lt;strong&gt;(B)&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-ui-errormsg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-manager-missing-or-window-doesnt-open包管理器缺失或窗口无法打开&#34;&gt;Package Manager missing or window doesn’t open(包管理器缺失或窗口无法打开) &lt;a href=&#34;#package-manager-missing-or-window-doesnt-open%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e7%bc%ba%e5%a4%b1%e6%88%96%e7%aa%97%e5%8f%a3%e6%97%a0%e6%b3%95%e6%89%93%e5%bc%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包管理器窗口可能被移出屏幕或被其它窗口覆盖。当这种情况发生时，看起来就像包管理器窗口无法打开一样。在这种情况下，你可以尝试重置窗口布局（&lt;strong&gt;Window&lt;/strong&gt; &amp;gt; &lt;strong&gt;Layouts&lt;/strong&gt; &amp;gt; &lt;strong&gt;Default&lt;/strong&gt;），然后重试打开包管理器窗口。&lt;/p&gt;
&lt;p&gt;如果包管理器窗口仍然无法显示，你可以检查一下你的Unity &lt;strong&gt;Console window&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Failed to resolve packages: The file [&amp;lt;project-path&amp;gt;/Packages/manifest.json] is not valid JSON:
  Unexpected token &amp;#39;}&amp;#39; at 44:1
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个错误信息表明 &lt;code&gt;manifest.json&lt;/code&gt; 文件存在问题。它还告诉你包管理器在解析文件失败的行号，因此你可以修复 JSON。你可以使用几个在线验证器尝试纠正问题。一旦你保存了修正后的文件，Unity就会重新加载包管理器窗口。&lt;/p&gt;
&lt;p&gt;如果你从早期版本的Unity编辑器升级，可能会存在其它的 &lt;strong&gt;包清单&lt;/strong&gt; 文件问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从2019.3开始，你的 &lt;code&gt;manifest.json&lt;/code&gt; 文件中不应该包含对 &lt;strong&gt;com.unity.package-manager-ui&lt;/strong&gt; 包的引用。请从依赖列表中删除以下这行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;com.unity.package-manager-ui&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.1.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查你的 &lt;strong&gt;项目清单&lt;/strong&gt; 是否使用 &lt;strong&gt;“exclude”&lt;/strong&gt; 作为包版本。这是依赖性属性的已废弃值。如果你找到了类似的行，删除整行。包管理器只安装显式地作为项目依赖包含的包，所以一旦你删除了那个条目，包管理器就会忽略该包，不会进行安装。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;problems-after-upgrading-unity-to-new-version升级到新版unity后的问题&#34;&gt;Problems after upgrading Unity to new version(升级到新版Unity后的问题) &lt;a href=&#34;#problems-after-upgrading-unity-to-new-version%e5%8d%87%e7%ba%a7%e5%88%b0%e6%96%b0%e7%89%88unity%e5%90%8e%e7%9a%84%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当你将一个项目升级到更新的Unity版本后，包管理器会自动更新不兼容的包到新的适用的版本。然而，如果你的包无法编译，包管理器会在 &lt;strong&gt;控制台&lt;/strong&gt; 窗口显示错误信息。&lt;/p&gt;
&lt;p&gt;为了纠正这些信息，阅读错误消息并修复你能解决的任何问题。例如，一个包可能缺少对其他包或版本的依赖。在这种情况下，你可以尝试自行安装此包。&lt;/p&gt;
&lt;p&gt;你也可以尝试以下解决方案的顺序，直到你找到有效的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;备份然后删除项目下的 &lt;code&gt;Packages&lt;/code&gt; 文件夹。&lt;/li&gt;
&lt;li&gt;备份并删除项目 &lt;code&gt;Packages&lt;/code&gt; 文件夹中的包源，只留下 &lt;code&gt;manifest.json&lt;/code&gt; 文件。然后尝试重新载入项目。&lt;/li&gt;
&lt;li&gt;创建一个新的空白项目。如果包管理器窗口在没有错误的情况下加载，将失败项目中的 &lt;code&gt;Library/PackageCache/com.unity.package-manager-ui@&amp;lt;version&amp;gt;&lt;/code&gt; 文件夹替换成新创建项目中的相同文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-installation-fails包安装失败&#34;&gt;Package installation fails(包安装失败) &lt;a href=&#34;#package-installation-fails%e5%8c%85%e5%ae%89%e8%a3%85%e5%a4%b1%e8%b4%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你正在尝试从注册表安装一个新的包但不行，可能是由于权限问题。&lt;/p&gt;
&lt;p&gt;你必须对缓存文件夹具有完全权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows（用户帐户）：&lt;code&gt;%LOCALAPPDATA%\Unity\cache\upm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows（系统账户）：&lt;code&gt;%ALLUSERSPROFILE%\Unity\cache\upm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;macOS：&lt;code&gt;$HOME/Library/Caches/Unity/upm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;$HOME/.cache/Unity/upm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可能是网络问题。请检查你的防火墙和代理设置。&lt;/p&gt;
&lt;p&gt;有时，像学校、政府办公室或使用网络保护的工作场所等机构环境会设置代理服务器，以控制网络和互联网之间的流量，并使用他们自己的服务器证书，这些证书可能无法被Unity或包管理器识别。请联系你的网络管理员。&lt;/p&gt;
&lt;h2 id=&#34;unable-to-add-package-from-git-url无法从git-url添加包&#34;&gt;Unable to add package from Git URL(无法从Git URL添加包) &lt;a href=&#34;#unable-to-add-package-from-git-url%e6%97%a0%e6%b3%95%e4%bb%8egit-url%e6%b7%bb%e5%8a%a0%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;请参阅“无法找到存储库”&lt;/p&gt;
&lt;h2 id=&#34;insufficient-drive-space磁盘空间不足&#34;&gt;Insufficient drive space(磁盘空间不足) &lt;a href=&#34;#insufficient-drive-space%e7%a3%81%e7%9b%98%e7%a9%ba%e9%97%b4%e4%b8%8d%e8%b6%b3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你的安装盘空间不足，可以考虑下列解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改全局缓存的位置。参阅“自定义全局缓存”。&lt;/li&gt;
&lt;li&gt;更改资源包缓存的位置。参阅“自定义资源包缓存位置”。&lt;/li&gt;
&lt;li&gt;减少注册表数据缓存限制的最大大小。参阅“自定义全局缓存”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-version-has-no-signature包版本没有签名&#34;&gt;Package version has no signature(包版本没有签名) &lt;a href=&#34;#package-version-has-no-signature%e5%8c%85%e7%89%88%e6%9c%ac%e6%b2%a1%e6%9c%89%e7%ad%be%e5%90%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当你从定制注册表获取Unity包时，可能会出现此信息。Unity会对其创建的包进行签名，除了较老的包，这些包在后续版本中不一定重新签名。如果你从定制注册表复制一个未签名的Unity包到另一个注册表，包管理器无法确定包内容是否安全，和原始包是否相同。&lt;/p&gt;
&lt;p&gt;如果你收到此信息，可以尝试以下解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用包的其他版本。&lt;/li&gt;
&lt;li&gt;从Unity注册表获取Unity包。&lt;/li&gt;
&lt;li&gt;如果你拥有定制注册表，确保你从Unity注册表复制包的最新版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-version-doesnt-have-a-valid-signature包版本没有有效的签名&#34;&gt;Package version doesn’t have a valid signature(包版本没有有效的签名) &lt;a href=&#34;#package-version-doesnt-have-a-valid-signature%e5%8c%85%e7%89%88%e6%9c%ac%e6%b2%a1%e6%9c%89%e6%9c%89%e6%95%88%e7%9a%84%e7%ad%be%e5%90%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包有一个签名以确保内容在传输前或传输过程中不被更改。无效签名通常发生在以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有人在他们自己的注册表上发布了修改后的包。&lt;/li&gt;
&lt;li&gt;在将文件传输给最终用户时发生了错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这两种情况下，包管理器认为该包可能有恶意。&lt;/p&gt;
&lt;p&gt;当你收到一个无效的签名时，你可以尝试安装包的不同版本。同样，避免使用来自Unity注册表以外的注册表的Unity包。&lt;/p&gt;
&lt;p&gt;如果你正在分享一个有修复内容的Unity包，可以考虑使用Git URL，或者将包嵌入到你的项目中。&lt;/p&gt;
&lt;h2 id=&#34;no-git-executable-was-found未找到-git-可执行文件&#34;&gt;No ‘git’ executable was found(未找到 &amp;lsquo;git&amp;rsquo; 可执行文件) &lt;a href=&#34;#no-git-executable-was-found%e6%9c%aa%e6%89%be%e5%88%b0-git-%e5%8f%af%e6%89%a7%e8%a1%8c%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你尝试从git URL安装包，会出现类似这样的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cannot perform upm operation: Unable to add package
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;https://github.example.com/myuser/myrepository.git&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;No &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git&amp;#39;&lt;/span&gt; executable was found. Please install Git on your system and restart Unity &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;NotFound&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UnityEditor.EditorApplication:Internal_CallUpdateFunctions&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;git-lfs-command-not-found找不到git-lfs命令&#34;&gt;git-lfs: command not found(找不到git-lfs命令) &lt;a href=&#34;#git-lfs-command-not-found%e6%89%be%e4%b8%8d%e5%88%b0git-lfs%e5%91%bd%e4%bb%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你正在尝试下载使用了Git LFS（大型文件存储）的包，你可能会收到此错误信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error when executing git command. git-lfs filter-process: command not found.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这表示你的计算机上可能没有安装Git LFS。为了确认，可以在命令行上进行测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git lfs --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果命令返回类似以下内容，表示已安装Git LFS：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git-lfs/2.8.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;GitHub; darwin amd64; go 1.12.7&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;否则，你可以按照Bitbucket GitHub的说明进行安装。&lt;/p&gt;
&lt;h2 id=&#34;repository-not-found未找到存储库&#34;&gt;Repository not found(未找到存储库) &lt;a href=&#34;#repository-not-found%e6%9c%aa%e6%89%be%e5%88%b0%e5%ad%98%e5%82%a8%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你指定了一个不存在的位置，在Unity控制台会出现类似的信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Cannot perform upm operation: Unable to add package [https://mycompany.github.com/gitproject/com.mycompany.mypackage.git]:
  Error when executing git command. fatal: repository &amp;#39;https://mycompany.github.com/gitproject/com.mycompany.mypackage.git/&amp;#39; not found
 [NotFound]
UnityEditor.EditorApplication:Internal_CallUpdateFunctions() (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorApplication.cs:310)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;检查你的拼写是否正确。为了确保你使用的URL是正确的，可以转到存储库的页面，从“克隆”按钮中复制URL。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-giturl-locate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击GitHub &lt;strong&gt;（A）&lt;/strong&gt; 或GitLab **（B）**上URL右侧的按钮，将URL复制到剪贴板。&lt;/p&gt;
&lt;p&gt;如果存储库的位置是正确的，那么URL可能存在其他问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你定位特定的修订版本，确保你的修订版本在最后。例如：
&lt;code&gt;https://github.example.com/myuser/myrepository1.git#revision&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果你定位的是一个修订版本，并且包不在根目录，确保 &lt;code&gt;path&lt;/code&gt;查询参数在修订锚点之前。例如：
&lt;code&gt;https://github.example.com/myuser/myrepository.git?path=/example/folder#v1.2.3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;could-not-read-username-terminal-prompts-disabled无法读取用户名终端提示已禁用&#34;&gt;Could not read Username: terminal prompts disabled(无法读取用户名：终端提示已禁用) &lt;a href=&#34;#could-not-read-username-terminal-prompts-disabled%e6%97%a0%e6%b3%95%e8%af%bb%e5%8f%96%e7%94%a8%e6%88%b7%e5%90%8d%e7%bb%88%e7%ab%af%e6%8f%90%e7%a4%ba%e5%b7%b2%e7%a6%81%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你正在尝试从需要认证的私有存储库安装包，在Unity控制台会显示类似这样的信息：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Cannot perform upm operation: Unable to add package [https://mycompany.github.com/gitproject/com.mycompany.mypackage.git]:
  Error when executing git command. fatal: could not read Username for &amp;#39;https://mycompany.github.com&amp;#39;: terminal prompts disabled
 [NotFound]
UnityEditor.EditorApplication:Internal_CallUpdateFunctions() (at /Users/builduser/buildslave/unity/build/Editor/Mono/EditorApplication.cs:310)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通常，这个信息出现是因为包管理器并没有提供一个交互式的终端或对话框，让你可以输入你的HTTP用户名和密码，或者输入你的SSH密钥的解锁密码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;strong&gt;HTTP(S)&lt;/strong&gt;，每次你登录到Bitbucket、GitHub或GitLab，你需要在一个终端或对话框中输入你的用户名和密码。然而，包管理器并没有提供一个交互式的终端或对话框，让你可以为HTTP(S)输入你的用户名和密码。&lt;/p&gt;
&lt;p&gt;为了绕过这个问题，你可以使用HTTPS解决方案中给出的一些变通方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH&lt;/strong&gt;使用一对公有和私有的SSH密钥。你可以将你的公有SSH密钥添加到Bitbucket、GitHub或GitLab，然后无需输入用户名和密码即可访问存储库。&lt;/p&gt;
&lt;p&gt;然而，如果你为了保护你的SSH密钥而设置了一个解锁密码，你仍然需要在一个终端或对话框中输入这个密码以授权你的密钥。在这种情况下，你可以使用一个SSH代理，该代理可以解锁你的SSH密钥，代你向包管理器进行验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solutions-for-httpshttps的解决方案&#34;&gt;Solutions for HTTPS(HTTPS的解决方案) &lt;a href=&#34;#solutions-for-httpshttps%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;包管理器并没有提供一个交互式的终端或对话框，让你可以输入你的HTTP(S)用户名和密码。为了绕过这个问题，你可以采取以下的一些变通方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遵循使用HTTPS Git URL的私有存储库和使用SSH Git URL的密码保护SSH密钥的说明。&lt;/li&gt;
&lt;li&gt;使用资格证书管理器（Git Credential Manager for Windows 或 OSXKeyChain）。资格证书管理器可以在无需使用终端或命令提示符的情况下发送密码。&lt;/li&gt;
&lt;li&gt;从终端或命令提示符使用git-credentials，然后从同一终端启动Hub，这样Unity就可以访问到已缓存或存储的凭据。&lt;/li&gt;
&lt;li&gt;使用SSH进行身份验证。如果你设置你的SSH密钥时没有使用密码，包管理器不需要解密它来进行Git服务器的身份验证。如果你决定为了增加安全性而使用密码，你可以在macOS或Windows上使用&lt;strong&gt;ssh-agent&lt;/strong&gt;来解决身份验证问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solutions-for-sshssh的解决方案&#34;&gt;Solutions for SSH(SSH的解决方案) &lt;a href=&#34;#solutions-for-sshssh%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;如果你使用SSH协议通过Git URL安装包，你可能会从Git中收到一个身份验证错误。这种情况通常发生在你在本地计算机上设置了一个用密码保护的私有SSH密钥。&lt;/p&gt;
&lt;p&gt;解决这个问题的方法是，设置一个SSH代理，代理可以解锁你的SSH密钥，代你与包管理器进行身份验证。按照你的操作系统对应部分的说明进行操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为Windows设置OpenSSH&lt;/li&gt;
&lt;li&gt;为macOS添加SSH密钥到你的SSH代理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setting-up-openssh-for-windows为windows设置openssh&#34;&gt;Setting up OpenSSH for Windows(为Windows设置OpenSSH) &lt;a href=&#34;#setting-up-openssh-for-windows%e4%b8%bawindows%e8%ae%be%e7%bd%aeopenssh&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;内置的Windows OpenSSH版本的&lt;strong&gt;ssh-agent&lt;/strong&gt;比默认与Git for Windows一起提供的版本效果更好。此程序说明如何设置OpenSSH客户端并将您的密钥添加到其ssh-agent中。如果您正在使用Git for Windows，您也可以将内置Windows OpenSSH优先于Git for Windows SSH代理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;确保已安装OpenSSH客户端。为此，在Windows设置&lt;strong&gt;可选功能&lt;/strong&gt;窗口中（&lt;strong&gt;开始&lt;/strong&gt; &amp;gt; &lt;strong&gt;设置&lt;/strong&gt;，然后搜索“可选功能”）中搜索它。这适用于Windows 10+。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查您的&lt;code&gt;%PATH%&lt;/code&gt;环境变量，确保内置的Windows OpenSSH位置出现（例如，&lt;code&gt;C:\WINDOWS\System32\OpenSSH\&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果您已经在使用Git for Windows，确保内置的Windows OpenSSH位置在&lt;code&gt;%PATH%&lt;/code&gt;变量中的Git for Windows SSH位置之前出现。这确保Windows使用内置Windows OpenSSH代理而非Git for Windows SSH代理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在PowerShell终端中，启动&lt;code&gt;ssh-agent&lt;/code&gt;进程并确保它自动启动:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ssh-agent service to start automatically and manually start it now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-Service ssh-agent | Set-Service -StartupType Automatic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run the ssh-agent process to start the ssh-agent service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将您的密钥导入到ssh-agent中。要做到这一点，在命令行上运行&lt;code&gt;ssh-add&lt;/code&gt;，然后按照说明操作。默认情况下，代理添加&lt;code&gt;%USERPROFILE%\.ssh\id_rsa&lt;/code&gt;密钥并提示您输入密码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Import the key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要使用不同的密钥，您可以将其指定为参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Set the ssh-agent service to start automatically and manually start it now&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add &amp;lt;your-secure-ssh-key-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您记不住密钥的名称，使用以下命令列出您的密钥：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果您安装了Git for Windows，重置&lt;code&gt;%GIT-SSH%&lt;/code&gt;环境变量以确保Git始终使用内置Windows OpenSSH版本的ssh-agent。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Environment&lt;/span&gt;]::SetEnvironmentVariable(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GIT_SSH&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$((Get-Command ssh).Source)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;System.EnvironmentVariableTarget&lt;/span&gt;]::User)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;adding-ssh-keys-to-your-ssh-agent-for-macos为macos向你的ssh代理添加ssh密钥&#34;&gt;Adding SSH keys to your SSH Agent for macOS(为macOS向你的SSH代理添加SSH密钥) &lt;a href=&#34;#adding-ssh-keys-to-your-ssh-agent-for-macos%e4%b8%bamacos%e5%90%91%e4%bd%a0%e7%9a%84ssh%e4%bb%a3%e7%90%86%e6%b7%bb%e5%8a%a0ssh%e5%af%86%e9%92%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;ssh-add&lt;/code&gt;命令将SSH密钥添加到运行在macOS系统上的ssh-agent。你使用的命令参数取决于你的macOS版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在macOS 11及更早版本中，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add -K ~/.ssh/&amp;lt;your-secure-ssh-key-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在macOS 12及更高版本中，使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add --apple-use-keychain ~/.ssh/&amp;lt;your-secure-ssh-key-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行此命令后，终端会要求你输入密码以解锁SSH密钥，然后将其添加到macOS的钥匙串中。然而，一旦你重新启动你的系统，存储在ssh-agent中的每个密钥都会被重置。&lt;/p&gt;
&lt;p&gt;为了确保你在重新启动系统后不需要重新输入密码，打开&lt;code&gt;~/.ssh/config&lt;/code&gt;文件（如果找不到则创建一个），并添加以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Host *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UseKeychain yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    AddKeysToAgent yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IdentityFile ~/.ssh/&amp;lt;your-secure-ssh-key-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重启你的电脑以应用这些更改。&lt;/p&gt;
&lt;h2 id=&#34;cant-update-git-version无法更新git版本&#34;&gt;Can’t update Git version(无法更新Git版本) &lt;a href=&#34;#cant-update-git-version%e6%97%a0%e6%b3%95%e6%9b%b4%e6%96%b0git%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你试图从仓库更新你的&lt;strong&gt;Git依赖&lt;/strong&gt;到一个更新的版本，但它没有工作，那可能是因为一个锁定的Git依赖。如果你想从仓库更新你的Git依赖到一个新的版本，使用添加包从Git URL按钮并输入一个Git URL。要获取更多信息，请参考锁定的Git依赖项。&lt;/p&gt;
&lt;h2 id=&#34;failed-to-parse-http-response-in-my-assets-context在我的资产上下文中无法解析http响应&#34;&gt;‘Failed to parse http response’ in My Assets context(在我的资产上下文中“无法解析http响应”) &lt;a href=&#34;#failed-to-parse-http-response-in-my-assets-context%e5%9c%a8%e6%88%91%e7%9a%84%e8%b5%84%e4%ba%a7%e4%b8%8a%e4%b8%8b%e6%96%87%e4%b8%ad%e6%97%a0%e6%b3%95%e8%a7%a3%e6%9e%90http%e5%93%8d%e5%ba%94&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果当你试图从资产商店下载一个资产包时在&lt;strong&gt;控制台&lt;/strong&gt;窗口中收到以下消息，那可能是你的资产包缓存有问题：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[PackageManager] Error Failed to parse response. UnityEditor.AsyncHTTPClient![:D](https://forum.unity.com/styles/default/xenforo/clear.png)one(State, Int32)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要解决这个问题，从已下载的资产包文件的位置删除所有下载的资产，然后试图再次下载资产。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：如果你的项目有大量的资产数据，重新下载所有的内容可能需要大量的时间和带宽。&lt;/p&gt;
&lt;h2 id=&#34;missing-my-registries-in-the-package-manager-window在包管理器窗口中缺少我的注册表&#34;&gt;Missing ‘My Registries’ in the Package Manager window(在包管理器窗口中缺少&amp;quot;我的注册表&amp;quot;) &lt;a href=&#34;#missing-my-registries-in-the-package-manager-window%e5%9c%a8%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e7%aa%97%e5%8f%a3%e4%b8%ad%e7%bc%ba%e5%b0%91%e6%88%91%e7%9a%84%e6%b3%a8%e5%86%8c%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;并非所有的注册表提供商都与Unity的包管理器兼容。如果你添加的包注册服务没有实现&lt;code&gt;/-/v1/search&lt;/code&gt;或 &lt;code&gt;/-/all&lt;/code&gt;端点，那么你的范围内的注册表将与Unity的包管理器不兼容，而且在包管理器窗口的导航面板的&lt;strong&gt;我的注册表&lt;/strong&gt;中不会显示。&lt;/p&gt;
&lt;h2 id=&#34;missing-monobehaviour-errors缺少monobehaviour错误&#34;&gt;Missing MonoBehaviour errors(缺少MonoBehaviour错误) &lt;a href=&#34;#missing-monobehaviour-errors%e7%bc%ba%e5%b0%91monobehaviour%e9%94%99%e8%af%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在构建过程中，如果出现很多关于缺失行为的错误，那么UnityLinker可能错误地剔除了它认为未被引用的组件。通常是因为剔除级别过高导致的。例如，如果你在一个AssetBundle中有一个&lt;strong&gt;预设&lt;/strong&gt;，它引用了2D SpriteShape包中的SpriteShape组件，那么这个对象可能会丢失，并可能会生成编译器警告。&lt;/p&gt;
&lt;p&gt;为解决这个问题，你可以降低UnityLinker的剔除级别，或者在&lt;code&gt;link.xml&lt;/code&gt;文件中声明包的程序集，以防止它们被剔除。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;linker&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;assembly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fullname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unity.2D.SpriteShape.Runtime&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preserve=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;assembly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fullname=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unity.2D.Common.Runtime&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;preserve=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/linker&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有关剔除级别和UnityLinker的更多信息，请参考托管代码剔除。&lt;/p&gt;
&lt;h1 id=&#34;diagnose-network-issues诊断网络问题&#34;&gt;Diagnose network issues(诊断网络问题) &lt;a href=&#34;#diagnose-network-issues%e8%af%8a%e6%96%ad%e7%bd%91%e7%bb%9c%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;使用Unity包管理器诊断工具可以帮助你诊断与Unity包管理器相关的常见网络问题。诊断工具运行一些基本的网络测试并生成Unity支持团队需要的文件，以诊断常见的网络问题。运行工具后，你可以将结果分享给Unity支持团队，他们会更好地指导你解决这些问题。&lt;/p&gt;
&lt;p&gt;要诊断网络问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过使用Unity包管理器错误对话框或手动运行脚本来运行Unity包管理器诊断工具。&lt;/li&gt;
&lt;li&gt;查看shell窗口中的测试结果。工具的输出结果也会列出它创建的&lt;code&gt;upm-diagnostic-report.txt&lt;/code&gt;报告和&lt;code&gt;upm-diag.log&lt;/code&gt;文件的位置。&lt;/li&gt;
&lt;li&gt;如果你需要Unity支持团队的帮助，在提交错误时请附上&lt;code&gt;upm-diagnostic-report.txt&lt;/code&gt;和&lt;code&gt;upm-diag.log&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;method-1-use-the-unity-package-manager-error-dialog方法1使用unity包管理器错误对话框&#34;&gt;Method 1: Use the Unity Package Manager Error dialog(方法1：使用Unity包管理器错误对话框) &lt;a href=&#34;#method-1-use-the-unity-package-manager-error-dialog%e6%96%b9%e6%b3%951%e4%bd%bf%e7%94%a8unity%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e9%94%99%e8%af%af%e5%af%b9%e8%af%9d%e6%a1%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当Unity尝试启动时，它在加载项目之前运行包管理器进程。如果遇到包管理器的重大错误，Unity会显示以下错误信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-network.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;要运行诊断工具，点击&lt;strong&gt;诊断&lt;/strong&gt;。Unity会关闭并在新窗口中启动诊断工具。&lt;/p&gt;
&lt;h2 id=&#34;method-2-manually-run-the-script方法2手动运行脚本&#34;&gt;Method 2: Manually run the script(方法2：手动运行脚本) &lt;a href=&#34;#method-2-manually-run-the-script%e6%96%b9%e6%b3%952%e6%89%8b%e5%8a%a8%e8%bf%90%e8%a1%8c%e8%84%9a%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在你的Unity编辑器安装文件夹中的&lt;code&gt;Diagnostics&lt;/code&gt;文件夹内找到&lt;code&gt;RunUnityPackageManagerDiagnostics&lt;/code&gt;脚本。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;操作系统:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;诊断命令行工具的路径&lt;/strong&gt;:&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;path-to-unity-installation-folder&amp;gt;&lt;/code&gt;   &lt;code&gt;\Unity&lt;/code&gt;    &lt;code&gt;\Data&lt;/code&gt;      &lt;code&gt;\Resources&lt;/code&gt;       &lt;code&gt;\PackageManager&lt;/code&gt;         &lt;code&gt;\Diagnostics&lt;/code&gt;          &lt;code&gt;\RunUnityPackageManagerDiagnostics.bat&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;macOS Linux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;path-to-unity-installation-folder&amp;gt;&lt;/code&gt;   &lt;code&gt;\Unity.app&lt;/code&gt;    &lt;code&gt;\Contents&lt;/code&gt;      &lt;code&gt;\Resources&lt;/code&gt;       &lt;code&gt;\PackageManager&lt;/code&gt;         &lt;code&gt;\Diagnostics&lt;/code&gt;          &lt;code&gt;\RunUnityPackageManagerDiagnostics&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要启动工具，你可以选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从命令行运行脚本文件。&lt;/li&gt;
&lt;li&gt;在文件浏览器中双击脚本文件。&lt;strong&gt;注意：&lt;strong&gt;在macOS上，你必须右键单击&lt;code&gt;Unity.app&lt;/code&gt;，然后选择&lt;/strong&gt;显示包内容&lt;/strong&gt;来访问&lt;code&gt;Unity.app&lt;/code&gt;的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sample-output样本输出&#34;&gt;Sample output(样本输出) &lt;a href=&#34;#sample-output%e6%a0%b7%e6%9c%ac%e8%be%93%e5%87%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-5/upm-network-diagnostics.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于深度神经网络预测游戏关卡难度-中文版</title>
      <link>https://www.chenqiaoqian.com/2023/07/21/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/</link>
      <pubDate>Fri, 21 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/21/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/</guid>
      <description>&lt;p&gt;作者SAMI PURMONEN&lt;/p&gt;
&lt;h1 id=&#34;摘要&#34;&gt;摘要 &lt;a href=&#34;#%e6%91%98%e8%a6%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我们探索了蒙特卡洛树搜索（MCTS）和深度学习在预测Candy Crush游戏关卡难度（以成功尝试次数衡量）中的应用。通过大量的游戏玩家数据，我们训练了一个深度神经网络（DNN）来预测游戏状态的移动。该DNN在Candy Crush的大量关卡中游玩，然后我们拟合了一个回归模型来从机器人的难度中预测人类玩家的难度。我们将我们的结果与MCTS机器人的结果进行了对比。结果表明，DNN可以在明显较短的时间内，做出与MCTS相当的游戏关卡难度估计。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结 &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我们探索了使用蒙特卡洛树搜索（MCTS）和深度学习来评估Candy Crush游戏关卡的难度。通过大量游戏数据，我们训练了一个深度神经网络（DNN）来预测从游戏关卡中的游戏动作。DNN在Candy Crush的各种关卡中进行游戏，我们构建了一个模型来预测从DNN难度中的人类玩家难度。我们将结果与MCTS进行了比较。我们的结果显示，DNN可以在显著较短的时间内做出与MCTS相当的评估。&lt;/p&gt;
&lt;h1 id=&#34;致谢&#34;&gt;致谢 &lt;a href=&#34;#%e8%87%b4%e8%b0%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我想感谢计算机科学与通信学院（CSC）的Karl Meinke教授对我的毕业论文的指导。我要感谢来自King公司AI团队的Stefan Freyr，Erik Poromaa和Alex Nodet，没有他们，这篇毕业论文的完成将无法成为可能。我还要对来自King公司AI团队的John Pertoft，Philipp Eisen和Lele Cao一直对我的工作提供反馈表示感谢。我要感谢Olov Engwall教授对我的论文的审阅。&lt;/p&gt;
&lt;h1 id=&#34;第1章&#34;&gt;第1章 &lt;a href=&#34;#%e7%ac%ac1%e7%ab%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言 &lt;a href=&#34;#%e5%bc%95%e8%a8%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;玩游戏可能很有趣，但前提是游戏的难度不能太难也不能太简单。如果游戏太难，玩家会感到沮丧并停止玩游戏。如果游戏太简单，玩家会感到无聊并停止玩游戏。在游戏发布给玩家之前，预测游戏关卡的难度是困难的。如果没有任何技术工具，关卡设计师只能多次手动玩关卡，然后根据对关卡设计师来说的难度，去猜测它对一般玩家的难度。然而，手动玩游戏需要大量时间，这导致在发布前的迭代次数较少。
对于游戏公司和关卡设计师来说，拥有能够快速并准确预测游戏关卡难度的工具将非常有用。这对于像King的Candy Crush这样不断发布新关卡的游戏尤其重要。它可以让关卡设计师在发布前多次调整关卡，以保证其难度适中。&lt;/p&gt;
&lt;h2 id=&#34;11-机器人&#34;&gt;1.1 机器人 &lt;a href=&#34;#11-%e6%9c%ba%e5%99%a8%e4%ba%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;预测游戏关卡难度的一种自动化方式是创建一个程序，一个机器人，按照某种策略来玩这个游戏。机器人可以多次玩一个关卡，并根据&amp;quot;每次成功所需的尝试次数&amp;quot;这样的难度度量标准，估计机器人觉得这个关卡有多难。如果我们让机器人玩很多关卡，然后估计每个关卡的机器人难度，我们可以比较这些难度与人类的难度，试图将机器人的难度与人类的难度关联起来。如果一关对人类来说相对困难，对机器人来说也相对困难；如果对人类来说相对容易，对机器人来说也相对容易，那么我们可能可以创建一个有效的回归模型，从机器人的难度中预测人类的难度。新关卡的难度可以通过让机器人多次玩这个关卡，测量机器人的难度，然后用预测模型从机器人的难度中预测人类的难度来预测。这样有很多种策略可以创建。&lt;/p&gt;
&lt;h3 id=&#34;111-手动启发式&#34;&gt;1.1.1 手动启发式 &lt;a href=&#34;#111-%e6%89%8b%e5%8a%a8%e5%90%af%e5%8f%91%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;机器人可以使用的一种策略是手动启发式，这种策略会对可用的走法进行排名，然后选择最好的一种。这种启发式可以查看当前的游戏状态，以判断每个可用走法的吸引力。这种方法的缺点是它不具有通用性或可维护性。当游戏发生变化，例如引入新的游戏元素时，启发式需要进行更新。每个游戏都必须创建新的启发式。&lt;/p&gt;
&lt;h3 id=&#34;112-蒙特卡洛树搜索&#34;&gt;1.1.2 蒙特卡洛树搜索 &lt;a href=&#34;#112-%e8%92%99%e7%89%b9%e5%8d%a1%e6%b4%9b%e6%a0%91%e6%90%9c%e7%b4%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;一种更通用的方法是蒙特卡洛树搜索（MCTS）。MCTS并不是创建一大套规则去决定一步走位的吸引力，而是使用仿真。MCTS会多次执行每一个走法，并试玩到最后，估计它通向成功的频率。这就不需要对游戏有任何知识，可以自动处理游戏改变的情况，或者被用在一个全新的游戏上。MCTS的缺点是它很慢，因为它需要模拟许多次游戏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;113-深度神经网络&#34;&gt;1.1.3 深度神经网络 &lt;a href=&#34;#113-%e6%b7%b1%e5%ba%a6%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;机器学习也可以用来从游戏状态中对走法进行排序，本质上是从数据中学习启发式。如果一个包含有游戏状态和走法的大型数据集可用，那么就可以在监督学习中使用，来训练一个分类器，预测在任何给定的游戏状态中应选择哪种走法。深度神经网络（DNN）就是一种可用于分类的机器学习算法，并已在图像识别、机器翻译和游戏中取得了重大突破。使用DNN从游戏状态中预测走法将比MCTS快得多，因为它不需要进行模拟，同时也具有通用性，因为只需要新的数据集就能学习一个新的游戏。不解的问题是它是否也具有精确性。这就是本论文中將要探讨的问题。
表1.1显示了这些方法在假设上相互比较的情况。&lt;/p&gt;
&lt;h2 id=&#34;12-问题&#34;&gt;1.2 问题 &lt;a href=&#34;#12-%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们的研究问题是，在Candy Crush游戏中，使用深度神经网络（DNN）机器人是否可以比使用蒙特卡洛树搜索（MCTS）机器人更好地预测游戏关卡的难度。&lt;/p&gt;
&lt;h2 id=&#34;13-界定范围&#34;&gt;1.3 界定范围 &lt;a href=&#34;#13-%e7%95%8c%e5%ae%9a%e8%8c%83%e5%9b%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们将研究范围限制在King的游戏Candy Crush，以及使用由MCTS机器人生成的训练数据。&lt;/p&gt;
&lt;h1 id=&#34;第2章&#34;&gt;第2章 &lt;a href=&#34;#%e7%ac%ac2%e7%ab%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;相关理论&#34;&gt;相关理论 &lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e7%90%86%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在本章中，我们提供我们工作基础的理论基础。我们深入研究了神经网络的工作原理和训练方式，因为这是本论文最重要的部分，也是工作的大部分投入时间所在。&lt;/p&gt;
&lt;h2 id=&#34;21-相关工作&#34;&gt;2.1 相关工作 &lt;a href=&#34;#21-%e7%9b%b8%e5%85%b3%e5%b7%a5%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;主要的灵感来源于谷歌DeepMind的AlphaGo论文和Erik Poromaas的硕士论文。其他的灵感来源于图像识别，因为从游戏状态预测着法的问题可以看作是一个图像识别问题。更广泛的灵感来源于与机器学习或游戏人工智能有关的任何内容。
在《利用深度神经网络和树搜索掌握围棋》中，发明了一款使用监督学习、强化学习和蒙特卡罗树搜索的计算机围棋程序。这是第一个能够在全尺寸棋盘上击败专业围棋选手的计算机围棋程序[1]。我们的工作受到AlphaGo的监督学习部分的启发，但我们将其用于预测游戏难度，而不是创建最强大的机器人。
在Candy Crush中，Erik Poromaa使用MCTS预测Candy Crush中的游戏水平难度。他发现这种方法优于先前的最先进的手动测试方法[2]。我们将我们的结果与他创建的MCTS机器人进行了比较。
在《利用深度卷积神经网络进行ImageNet分类》中，一个大型深度卷积神经网络在数百万高分辨率图像上进行训练，显著提高了以前在ImageNet LSVRC-2010比赛中的最新技术水平[3]。尽管这里的目标是确定图像中可见的对象类型，但与我们的问题类似，因为游戏棋盘可以被视为一个具有比RGB更多通道的图像，并且我们试图识别的对象是144个可能移动中的一个，因此卷积神经网络也适合我们的问题。
在《利用深度卷积神经网络在围棋中进行着法评估》中，一个12层的深度卷积神经网络在人类职业围棋选手的数据集上进行训练，用于预测着法。它以55%的准确率预测专业着法，并且可以击败传统的搜索程序而无需进行任何搜索[4]。这篇论文启发了AlphaGo，并与我们所做的非常相似，因为他们创建了一个基于仅监督学习的DNN机器人进行围棋比赛，然而我们进一步采取了一步，使用机器人来预测游戏难度。
在《使用卷积神经网络在国际象棋中预测着法》中，训练了一个深度卷积神经网络来预测国际象棋中的着法。国际象棋的问题在于一步着法由棋子移动的位置定义，因此需要一个分类器来区分64*64或4096种不同的着法。为了减少着法数量，他们采用了一种新颖的方法，创建了两个独立网络，一个用于预测移动哪个棋子，另一个用于预测在哪里移动它，从而将每个网络的类空间减少到64。他们成功以38.3%的准确率预测哪个棋子应该移动[5]。他们的目标是预测着法与我们的目标相同，只是我们不需要在减少类空间方面下一番苦功，因为我们问题中的着法数量是可管理的，而在围棋中有361种着法。
在《使用深度强化学习在Atari中玩游戏》中，创建了一个基于卷积神经网络和强化学习的模型来玩七款Atari 2600游戏。它在六款游戏中优于先前的所有方法，并在其中三款游戏中表现优于人类专家[6]。应用类似的强化方法到我们的问题可能会很有趣，但我们决定选择监督学习，因为我们认为预测游戏难度的最佳方法是创建一个模仿人类玩家的机器人。由于在本论文写作时我们没有人类玩家数据，因此无法实现这一目标，但可以在未来进行尝试。&lt;/p&gt;
&lt;h2 id=&#34;22-蒙特卡洛树搜索&#34;&gt;2.2 蒙特卡洛树搜索 &lt;a href=&#34;#22-%e8%92%99%e7%89%b9%e5%8d%a1%e6%b4%9b%e6%a0%91%e6%90%9c%e7%b4%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在创建玩游戏的代理程序时，通常会使用不同的游戏树搜索算法。极小化算法是一种树搜索算法，在棋类游戏如国际象棋、跳棋和奥赛洛中已经达到了最先进的性能，那里有用于评估游戏状态的良好启发式[1]。在围棋等很难提出启发式的游戏中，直到AlphaGo出现之前，MCTS一直是最成功的游戏搜索算法[4]。
MCTS通过使用随机抽样来扩展搜索树，从状态中确定最佳行动。它可应用于任何有限长度和有限移动次数的游戏。每个行动都是搜索树中的一个节点，并记录获胜次数和访问次数，这些数据用于引导搜索树朝着更好的走法发展。它由四个迭代执行的步骤组成：选择、扩展、模拟和回传，如图2.1所示。多次执行这些步骤会收敛到最佳的玩法[7]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择&lt;/strong&gt;
选择从当前状态开始，也就是搜索树的根节点，然后选择子节点，直到达到叶子节点。选择子节点的方式是根据获胜次数和访问次数，但同时也允许探索，以便将树扩展为朝着最有希望的走法。
&lt;strong&gt;扩展&lt;/strong&gt;
当到达叶子节点时，如果游戏尚未结束，则会向搜索树添加一个新的子节点。
&lt;strong&gt;模拟&lt;/strong&gt;
通过随机选择行动对游戏进行模拟直到结束。
&lt;strong&gt;回传&lt;/strong&gt;
游戏结果通过所有访问过的节点回传到根节点，更新获胜次数和访问次数。&lt;/p&gt;
&lt;h2 id=&#34;23-机器学习&#34;&gt;2.3 机器学习 &lt;a href=&#34;#23-%e6%9c%ba%e5%99%a8%e5%ad%a6%e4%b9%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;机器学习涵盖了从经验中学习的算法。监督学习是机器学习中最常见的形式。监督学习算法从这类映射的训练集示例中学习函数F：R^N → R^M，然后它在未见数据上的预测效果变得更好，这意味着它在泛化。&lt;/p&gt;
&lt;h3 id=&#34;231-分类&#34;&gt;2.3.1 分类 &lt;a href=&#34;#231-%e5%88%86%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;分类意味着将有限类别集C中的类别c分配给输入特征。例如，我们可以有一个分类器，输入一个人的身高和体重，输出c ∈ {男性, 女性}。给定一组标记为女性或男性的人的体重和身高数据集，学习算法可以生成一个预测人们性别的分类器。分类器的目的是在未见数据上使用它，因此在训练期间的目标是训练一个泛化到未见数据的分类器。
&lt;strong&gt;数据表示&lt;/strong&gt;
分类器的输入是一个向量X ∈ R^n，其中n是特征数量。分类器的输出是一个向量Y ∈ R^c，其中c是类别数量，Y_i是第i类的分数。预测的类别是arg max_i Y_i。Y可以被归一化，使得P i Y_i = 1，将其成为给定类别的条件概率分布P(i|X) = Y_i，使用softmax函数表示如2.1方程所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是我们在本论文中对分类的看法。这是一种从输入向量生成所有可能类别的概率分布的方法。&lt;/p&gt;
&lt;h3 id=&#34;232-人工神经网络&#34;&gt;2.3.2 人工神经网络 &lt;a href=&#34;#232-%e4%ba%ba%e5%b7%a5%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;神经网络是一种监督学习算法。我们将讨论它如何用于分类任务。神经网络由相互连接的神经元层组成，具有权重。我们将讨论前馈神经网络，其中第i层的神经元仅连接到第i + 1层的神经元，如图2.2所示。神经网络中具有后向连接的神经元称为循环神经网络，在对时间敏感的语音识别中非常有用。人工神经元在某种程度上模仿大脑内的生物神经元。然而，我们将把它们视为数学单元，因为与生物学的联系并不会使人们更容易理解它们的工作方式，除非有生物学背景。&lt;/p&gt;
&lt;h4 id=&#34;从输入到输出&#34;&gt;从输入到输出 &lt;a href=&#34;#%e4%bb%8e%e8%be%93%e5%85%a5%e5%88%b0%e8%be%93%e5%87%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;用于分类的神经网络接收一个输入向量X ∈ R^n，并输出一个向量Y ∈ R^c，代表可能类别的概率分布，如第2.3.1节所述。神经网络与其他分类器的不同之处在于它的工作方式。接下来我们将讨论这一点。&lt;/p&gt;
&lt;h4 id=&#34;神经元的工作&#34;&gt;神经元的工作 &lt;a href=&#34;#%e7%a5%9e%e7%bb%8f%e5%85%83%e7%9a%84%e5%b7%a5%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;每个神经元对每个输入特征都有一个权重和一个偏差。它计算其输入的加权和，其中包括来自前一层的激活，如方程2.2所示，并应用激活函数。激活函数背后的思想是，神经元具有二进制输出，即它要么发射，要么不发射。每个神经元会检测来自前几层的输入中的模式，并在检测到模式时发射。它还在网络中引入非线性，这对于能够逼近非线性函数是必要的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;常见的激活函数是Sigmoid，如方程2.3所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一个常见的激活函数是TanH。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;反向传播使用损失函数的梯度来更新神经网络的权重，因此如果梯度变得非常小，更新将变小，学习速度变慢。Sigmoid和tanh都存在梯度消失的问题，因为它们将输入映射到一个小范围内。方程2.5中显示的修正线性单元是另一个激活函数，它在处理梯度消失方面问题较少，因为它仅将负值截断为零。它训练速度是几倍快于Sigmoid和TanH，因为它不会饱和，意味着输出没有上限，可以变得任意大。它目前是深度学习中最流行的激活函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当输入被截断为零时，修正线性单元存在问题，因为这会使梯度变为零，无法进行学习。方程2.6中显示的指数线性单元(ELU)被引入来解决这个问题，允许负值存在。然而，与ReLU相比，ELU计算成本更高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;成本函数&#34;&gt;成本函数 &lt;a href=&#34;#%e6%88%90%e6%9c%ac%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;为了改进神经网络，必须有一个客观的衡量标准来评估网络的表现好坏。这通过成本函数来实现。如果网络的输出接近期望输出，则成本较低，否则成本较高。一个常用的成本函数是均方误差，如方程2.7所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一个常用的成本函数是交叉熵，它具有显著的实际优势，因为在权重随机初始化时可以找到更好的局部最优解[10, 11]。使用交叉熵成本函数而不是均方误差，结合softmax激活函数会导致更准确的结果[12]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;网络通过计算成本函数并更新其权重来学习，以最小化成本函数。因此，学习过程本质上是一个优化问题。成本函数是权重的函数。为了最小化它，使用梯度下降。梯度下降计算成本函数相对于权重的梯度。然后，它沿着相反的方向更新权重，使成本变小，如2.9所示。权重之间的差异大小由学习率决定。在实践中，对大量数据使用梯度下降不可行，因此改用随机梯度下降，仅使用训练数据的一个小子集来计算成本函数的估计值，这样可以加快训练时间 [13]。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当神经网络进行训练时，它学习到应具有的权重。影响训练的参数，如网络架构，但在训练过程中不会学习的参数被称为超参数。神经网络有很多超参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习率&lt;/li&gt;
&lt;li&gt;隐藏层的数量&lt;/li&gt;
&lt;li&gt;隐藏节点的数量&lt;/li&gt;
&lt;li&gt;激活函数的选择&lt;/li&gt;
&lt;li&gt;错误测量的选择&lt;/li&gt;
&lt;li&gt;学习率衰减&lt;/li&gt;
&lt;li&gt;正则化&lt;/li&gt;
&lt;li&gt;初始权重&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些可以通过手动测试不同组合来决定。选择它们的更严谨的方法是使用网格搜索或随机搜索。在网格搜索中，为每个参数选择一个有限的值集合，然后尝试所有组合。产生最高准确性的组合被选为最佳参数组合。随机搜索是随机选择参数，已经显示比网格搜索更有效 [14]。基因算法通过结合先前成功的组合来培育新的组合，也可以被应用。一种基于强化学习的新颖方法，利用验证集上的验证准确性作为反馈生成架构，已被证明能够生成与CIFAR-10数据集上最佳人工设计的架构媲美的架构 [15]。&lt;/p&gt;
&lt;h3 id=&#34;233-卷积神经网络&#34;&gt;2.3.3 卷积神经网络 &lt;a href=&#34;#233-%e5%8d%b7%e7%a7%af%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;卷积神经网络（CNN）已经显著改善了物体识别，并且是目前此任务的最新技术 [16]。在CNN中，每个神经元连接在重叠的瓦片中，使网络在二维空间中具有局部性。这对可以被视为图像或网格的输入数据效果很好 [16]。
&lt;strong&gt;输入&lt;/strong&gt;
将输入数据视为三维向量，而不是一维向量。一个尺寸为9×9的rgb图像将具有尺寸为9×9×3，因为它有3个颜色通道。
&lt;strong&gt;块大小&lt;/strong&gt;
块大小决定一个神经元覆盖的面积有多大。3×3的块是最常见的大小，意味着第i+1层中的每个神经元都连接到第i层中一个3×3的神经元瓦片。
&lt;strong&gt;步幅&lt;/strong&gt;
步幅确定输入之间每个到滤波器的距离。
&lt;strong&gt;滤波器&lt;/strong&gt;
滤波器的数量决定每一层中可以检测到多少特征，因为滤波器共享权重。
&lt;strong&gt;池化&lt;/strong&gt;
通过总结其输入来减小输入的维度。例如，一个2×2的最大池化将会接收一个2×2的输入，输出一个1×1，输出值为输入中的最高值，并跨数据进行步进。&lt;/p&gt;
&lt;h2 id=&#34;24-candy-crush&#34;&gt;2.4 Candy Crush &lt;a href=&#34;#24-candy-crush&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Candy Crush是一款在2012年发布在Facebook上的流行的三消游戏，后来在多个平台上推出。由于在开发超过2000个关卡过程中不断添加新功能，该游戏变得非常复杂。因此，我们不会提供游戏的完整描述，而是将读者引向在线可用的Candy Crush维基百科。我们将描述对论文有趣的基础知识。&lt;/p&gt;
&lt;h3 id=&#34;241-基本游戏玩法&#34;&gt;2.4.1 基本游戏玩法 &lt;a href=&#34;#241-%e5%9f%ba%e6%9c%ac%e6%b8%b8%e6%88%8f%e7%8e%a9%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;基本的游戏玩法包括在一个9x9的游戏板上水平或垂直交换相邻的瓦片，使得三个或三个以上的相同颜色糖果形成水平或垂直排列。这就是为什么它被称为三消游戏。如果忽略方向，有144种独特的交换组合，其中72种垂直和72种水平。&lt;/p&gt;
&lt;p&gt;匹配的糖果将从游戏板上移除，如果匹配了三个以上的糖果，将会生成特殊糖果，如图2.5所示。特殊糖果比普通糖果更强大，因为它们在匹配时不仅会移除自身，还会移除其他糖果。制作特殊糖果因此是游戏策略中的重要部分。还有多种类型的阻碍物，如结霜，可能存在于一个瓦片上，使得在清除结霜之前，无法与下面的糖果匹配。&lt;/p&gt;
&lt;p&gt;解决游戏是NP难题。状态空间在不同关卡之间不同，但是很大，实验显示第13关的状态空间约为10182。&lt;/p&gt;
&lt;h3 id=&#34;242-游戏模式&#34;&gt;2.4.2 游戏模式 &lt;a href=&#34;#242-%e6%b8%b8%e6%88%8f%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;有五种不同类型的关卡，具有不同的目标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限时关卡：在时间耗尽之前达到特定分数&lt;/li&gt;
&lt;li&gt;分数关卡：在固定次数的移动内达到特定分数&lt;/li&gt;
&lt;li&gt;订单关卡：在固定次数的移动内清除所有订单，一个订单可能是清除90个红色糖果&lt;/li&gt;
&lt;li&gt;组合关卡：完成其他目标的组合&lt;/li&gt;
&lt;li&gt;配料关卡：在固定次数的移动内清除所有配料&lt;/li&gt;
&lt;li&gt;凝胶关卡：在固定次数的移动内清除所有凝胶
具有不同策略要求的多种游戏模式使得游戏对AI更具挑战性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第3章&#34;&gt;第3章 &lt;a href=&#34;#%e7%ac%ac3%e7%ab%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;方法&#34;&gt;方法 &lt;a href=&#34;#%e6%96%b9%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在本章中，我们详细描述了我们的方法。它分为两部分，即在简化版本的糖果上进行的实验和在糖果上进行的实验。&lt;/p&gt;
&lt;h2 id=&#34;31-简化版糖果&#34;&gt;3.1 简化版糖果 &lt;a href=&#34;#31-%e7%ae%80%e5%8c%96%e7%89%88%e7%b3%96%e6%9e%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当论文开始时，我们还没有来自糖果的训练数据，并且我们希望在简化问题上探索深度学习，以了解它对我们问题空间的强大性和适用性。因此，我们决定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建一个简化版的糖果&lt;/li&gt;
&lt;li&gt;创建一个确定性贪婪机器人&lt;/li&gt;
&lt;li&gt;从贪婪机器人玩糖果中生成数据集&lt;/li&gt;
&lt;li&gt;训练一个深度神经网络（DNN）&lt;/li&gt;
&lt;li&gt;评估分类性能
由于我们没有任何关于简化版糖果的人类难度数据，因此我们在这个实验中不尝试预测难度。我们只探讨分类任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;311-简化版糖果&#34;&gt;3.1.1 简化版糖果 &lt;a href=&#34;#311-%e7%ae%80%e5%8c%96%e7%89%88%e7%b3%96%e6%9e%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;简化版糖果是用C++实现的，可以带有或不带有GUI进行游玩。如图3.1所示。与真实游戏的9×9相比，它有一个略小的8×8游戏板。它有5种不同的糖果颜色而不是6种。它没有特殊糖果或阻碍物。它没有特定目标。游戏在60秒后自动停止，得分与清除的糖果数量成比例增加。新的糖果会从均匀分布中随机生成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/16.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;312-确定性贪婪机器人&#34;&gt;3.1.2 确定性贪婪机器人 &lt;a href=&#34;#312-%e7%a1%ae%e5%ae%9a%e6%80%a7%e8%b4%aa%e5%a9%aa%e6%9c%ba%e5%99%a8%e4%ba%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们创建了一个确定性贪婪机器人，它总是选择能清除最多糖果的移动。它总是更喜欢进行五连消而不是四连消，四连消而不是三连消。如果有多个移动能够清除相同数量的糖果，它更倾向于水平交换而不是垂直交换，并且更喜欢西北位置而不是东南位置。这使得机器人是确定性的，可以从任何游戏板上计算出它将选择的移动。这很重要，因为数据变得100%可预测，这意味着机器学习者可以获得100%的验证准确率。当从非确定性策略学习时，这是不可能的，您无法知道理论上的最大验证准确率是多少。&lt;/p&gt;
&lt;h3 id=&#34;313-生成数据集&#34;&gt;3.1.3 生成数据集 &lt;a href=&#34;#313-%e7%94%9f%e6%88%90%e6%95%b0%e6%8d%ae%e9%9b%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们从确定性贪婪机器人玩简化版糖果中生成了一个数据集。数据集仅有两个特征平面，一个用于颜色，一个用于有效移动。每种颜色被编码为 0 ≤ c ≤ 4。有效移动特征平面是二进制的，对游戏板上的每个位置进行编码，表示该位置是否可以成为有效移动的一部分，意味着该单元格中的糖果可以交换并成为三连消的一部分。
由于游戏板有 board_size 行，每行有 board_size - 1 个水平交换（如果忽略交换的方向），所以一共有 board_size * (board_size - 1) 个水平交换。由于水平交换和垂直交换一样多，总交换次数为 2 * board_size * (board_size - 1)。对于这个特定的数据集，board_size = 8，因此有 2 * 8 * 7 = 112 种不同的交换。因此，一个移动被编码为一个数字，范围在 0 ≤ n ≤ 111，如图3.4所示。
数据集以CSV文件的形式存储。每一行对应一个数据点。前 2 * 8 * 8 = 128 个数字是特征，包含每个游戏板位置的两个特征平面，最后一个数字是移动。&lt;/p&gt;
&lt;h3 id=&#34;314-神经网络架构&#34;&gt;3.1.4 神经网络架构 &lt;a href=&#34;#314-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e6%9e%b6%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;网络架构是通过手动实验决定的。我们本来希望在许多参数组合上执行网格搜索，但我们认为这样做太耗时且计算成本太高，在这项工作中并不切实可行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们选择使用卷积神经网络，因为我们的游戏板具有网格结构，并且在其他棋盘游戏（如围棋）上表现出色[1]。由于从MCTS机器人生成数据需要很长时间，所以在调整超参数时我们使用了比最终评估时更小的数据集。我们测试了不同数量的卷积层，发现超过三层不会提高验证准确性，反而会增加过拟合。池化操作通常用于减少输入维度，在图像识别中经常使用，例如图像大小为256x256。我们选择不使用池化操作，因为我们的9x9游戏板已经很小。&lt;/p&gt;
&lt;h3 id=&#34;315-神经网络评估&#34;&gt;3.1.5 神经网络评估 &lt;a href=&#34;#315-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e8%af%84%e4%bc%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;数据集被分成训练集和验证集。训练集用于在训练过程中更新网络的权重。验证集用于评估。在训练过程中使用的性能衡量标准是验证准确性，如方程3.1所示。我们还计算了验证前2准确性和验证前3准确性，即在前2和前3个移动中正确移动被找到的频率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/19.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;验证准确度并不是游戏策略的完美衡量标准，因为游戏状态中选择的动作是非确定性的，这意味着在某个游戏状态下，同一个玩家可能多次选择不同的动作。如果玩家在一个具有10个合法动作的状态下，以50%的概率选择其中一个动作，那么理论上的最大验证准确性将会是50%；但如果网络学习了正确的概率分布，它将完美地学习了游戏策略。理想情况是使用测量实际和预测概率分布之间距离的方法，而不是像方程3.2中所示的验证准确度，比如Kullback-Leibler散度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/20.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，由于状态空间非常大，很少有来自特定状态的多个训练样本，使得在特定状态下估计概率分布变得不可能。因此，出于务实原因选择了验证准确性。在没有其他基准的情况下，这被比较为随机选择每个游戏状态中移动的预期准确性，计算如方程3.3所示，其中Si是状态i中可用的移动数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/21.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;32-糖果&#34;&gt;3.2 糖果 &lt;a href=&#34;#32-%e7%b3%96%e6%9e%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对糖果进行的实验包括以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从一个MCTS机器人玩糖果中生成数据集。&lt;/li&gt;
&lt;li&gt;训练一个DNN。&lt;/li&gt;
&lt;li&gt;使用DNN和MCTS玩不同的糖果关卡，并评估性能，以累积成功率和平均成功率作为衡量标准。&lt;/li&gt;
&lt;li&gt;评估表现，以累积成功率和平均成功率为指标进行测量。&lt;/li&gt;
&lt;li&gt;创建回归模型，从以尝试次数为单位的机器人难度测量人类难度来预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;就像对简化版糖果一样，我们生成训练数据，然后训练神经网络，随后使用神经网络实际进行游戏，并根据成功率衡量机器人的表现，并创建一个模型来预测人类难度，其中机器人难度以每次成功尝试的次数来衡量。&lt;/p&gt;
&lt;h3 id=&#34;321-蒙特卡洛树搜索&#34;&gt;3.2.1 蒙特卡洛树搜索 &lt;a href=&#34;#321-%e8%92%99%e7%89%b9%e5%8d%a1%e6%b4%9b%e6%a0%91%e6%90%9c%e7%b4%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;使用的MCTS算法由King提供。它是基于C++编写的，建立在糖果源代码的基础之上。这个实现有一些新颖之处。与其只使用胜利或失败作为信号不同，我们使用基于部分目标的连续信号，比如清除的果冻数量和/或得分。我们将其视为一个黑盒子，可以在模拟游戏过程中配置为使用训练过的DNN，因此不需要更详细的描述，但在Erik Poromaas的硕士论文中有更多信息。&lt;/p&gt;
&lt;h3 id=&#34;322-生成数据集&#34;&gt;3.2.2 生成数据集 &lt;a href=&#34;#322-%e7%94%9f%e6%88%90%e6%95%b0%e6%8d%ae%e9%9b%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;由于我们希望使用神经网络来预测玩家的难度，最合理的做法是使用玩家的游戏数据。然而，该数据并不可用，我们无法在论文中获取到。我们有一个可以很好地玩游戏的MCTS机器人。我们让这个MCTS机器人在每次移动时使用1000次模拟游戏来玩一个多样化的关卡集，这些关卡从第1000关到第2000关，并在游戏过程中记录所有的（状态，动作）对，以CSV格式直接用于训练神经网络。我们收集了接近200万个数据点。其中50,000个数据点用于验证，其余用于训练。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据表示&lt;/strong&gt;
特征平面包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可用的水平移动次数&lt;/li&gt;
&lt;li&gt;可用的垂直移动次数&lt;/li&gt;
&lt;li&gt;缺失的瓷砖&lt;/li&gt;
&lt;li&gt;糖果颜色 - 随机&lt;/li&gt;
&lt;li&gt;糖果颜色 - 无&lt;/li&gt;
&lt;li&gt;糖果 - 蓝色&lt;/li&gt;
&lt;li&gt;糖果 - 绿色&lt;/li&gt;
&lt;li&gt;糖果 - 橙色&lt;/li&gt;
&lt;li&gt;糖果 - 紫色&lt;/li&gt;
&lt;li&gt;糖果 - 红色&lt;/li&gt;
&lt;li&gt;糖果 - 黄色&lt;/li&gt;
&lt;li&gt;糖果颜色数&lt;/li&gt;
&lt;li&gt;果冻&lt;/li&gt;
&lt;li&gt;障碍物&lt;/li&gt;
&lt;li&gt;锁定物&lt;/li&gt;
&lt;li&gt;普通类型的板块物品&lt;/li&gt;
&lt;li&gt;行类型的板块物品&lt;/li&gt;
&lt;li&gt;列类型的板块物品&lt;/li&gt;
&lt;li&gt;包装类型的板块物品&lt;/li&gt;
&lt;li&gt;热门类型的板块物品&lt;/li&gt;
&lt;li&gt;炸弹类型的板块物品&lt;/li&gt;
&lt;li&gt;瑞典鱼类型的板块物品&lt;/li&gt;
&lt;li&gt;食材类型的板块物品 - 樱桃&lt;/li&gt;
&lt;li&gt;食材类型的板块物品 - 榛果&lt;/li&gt;
&lt;li&gt;时间补充类型的板块物品&lt;/li&gt;
&lt;li&gt;辣椒糖果类型的板块物品&lt;/li&gt;
&lt;li&gt;甘草糖果类型的板块物品&lt;/li&gt;
&lt;li&gt;椰子轮类型的板块物品&lt;/li&gt;
&lt;li&gt;王牌类型的板块物品&lt;/li&gt;
&lt;li&gt;神秘糖果类型的板块物品&lt;/li&gt;
&lt;li&gt;变色糖果类型的板块物品&lt;/li&gt;
&lt;li&gt;青蛙类型的板块物品&lt;/li&gt;
&lt;li&gt;榛子类型的板块物品&lt;/li&gt;
&lt;li&gt;不明飞行物类型的板块物品 - UFO&lt;/li&gt;
&lt;li&gt;板块物品类型数&lt;/li&gt;
&lt;li&gt;剩余移动次数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/22.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;颜色被编码为单独的二进制特征平面，与简化的数据集不同，在简化的数据集中只有一个颜色特征平面，不同的颜色使用不同的数字。这样做更有意义，因为颜色只有分类意义。有效移动的特征平面被划分为水平移动和垂直移动两部分。这并不会造成任何差异，因为神经网络能够学习两种表示。移动的编码与第一个实验中的相同，只是更大的游戏板面使得0 ≤ n ≤ 143，而不是如图3.5中的0 ≤ n ≤ 111。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;
虽然在简化版的糖果游戏中移动的方向并不重要，但在糖果游戏中却很重要。当匹配两种特殊糖果时，对游戏板的影响会因方向的不同而不同。为了捕捉到这种情况，我们需要区分288种移动，而不是144种。这可能使得学习到需要特定的特殊糖果和方向组合才能过关的高级策略变得不可能。然而，我们注意到我们有50%的概率能够在最佳的方向进行交换，并且两个相邻的条纹糖果并不是一个常见的情况，所以我们决定丢弃方向，因为如果类别增加一倍，会使得训练DNN变得更加困难。
数据集还有其他一些缺点。最大的一个是没有关于关卡目标的特征平面。如果目标是清理果冻，数据中并未包含需要清理的果冻数量，如果目标是清理材料，那么也没有包含剩余需要清理的材料数量的特征平面。这可能会使网络在剩余移动次数较少的情况下，难以学会优先考虑目标，而不是创建花哨的特殊糖果。&lt;/p&gt;
&lt;h3 id=&#34;323-dnn架构&#34;&gt;3.2.3 DNN架构 &lt;a href=&#34;#323-dnn%e6%9e%b6%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们使用与简单糖果游戏相同的DNN。&lt;/p&gt;
&lt;h3 id=&#34;324-使用dnn&#34;&gt;3.2.4 使用DNN &lt;a href=&#34;#324-%e4%bd%bf%e7%94%a8dnn&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;因为我们认为使用不成熟的TensorFlow C++ API将其嵌入到MCTS C++源代码中过于繁琐，所以我们通过用Python编写的HTTP服务器使用DNN。让HTTP服务器在与机器人相同的物理机器上运行，使得网络开销微乎其微。
我们试验让DNN独自玩游戏以及在MCTS播放过程中玩游戏。根据DNN选择最有可能的移动。&lt;/p&gt;
&lt;h3 id=&#34;325-神经网络评估&#34;&gt;3.2.5 神经网络评估 &lt;a href=&#34;#325-%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e8%af%84%e4%bc%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;对于简单的糖果游戏，训练的评估方式相同。我们总共使用了4个机器人进行比较。机器人也与人类玩家进行比较。我们比较了机器人的累积成功率，以衡量他们的表现。我们还拟合了模型，以预测从机器人每个成功的尝试次数中预测人类每个成功的尝试次数，以衡量它们的预测力。MCTS每个级别执行100次尝试，DNN每个级别执行100和1000次尝试，因为它的速度更快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机机器人&lt;/strong&gt;
随机机器人从均匀分布中随机选择动作。这是默认的基线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNN机器人&lt;/strong&gt;
DNN机器人根据深度神经网络选择最可能的动作。它不进行任何搜索。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/23.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MCTS + 随机机器人&lt;/strong&gt;
MCTS + 随机机器人使用随机回放的MCTS。它作为MCTS + DNN机器人的基线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MCTS + DNN机器人&lt;/strong&gt;
MCTS + DNN机器人在回放过程中使用MCTS，其中根据DNN选择最可能的动作。&lt;/p&gt;
&lt;h3 id=&#34;326-预测模型&#34;&gt;3.2.6 预测模型 &lt;a href=&#34;#326-%e9%a2%84%e6%b5%8b%e6%a8%a1%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们让机器人玩361个级别，以计算机器人试错次数的难度。我们让每个机器人对每个级别尝试100次，除了DNN，我们允许其尝试1000次，因为它的速度更快。这些级别的玩家数据是可用的，所以我们也可以计算人类每次成功的尝试次数。机器人的难度并不等同于人类的难度，但它们是相关的。我们拟合了一个回归模型来预测机器人尝试成功次数到人类尝试成功次数。我们使用平均绝对误差作为预测精度的度量，这直观地表示预测的平均错误程度。&lt;/p&gt;
&lt;p&gt;我们将级别分为三组，绿色，黄色和红色，根据他们对每个级别的难度，因为我们看到人类每次成功的尝试次数和机器人每次成功的尝试次数的关系，对于更简单的级别和更困难的级别是不同的。我们为每个机器人的每个组拟合一个单独的预测模型。绿色级别的尝试成功率低于或等于预选的割值。黄色级别的成功尝试次数高于割值。红色级别有零成功，所以尝试次数是未定义的。我们使用人类每次成功尝试的平均值作为红色级别的预测值。&lt;/p&gt;
&lt;h2 id=&#34;33-软件&#34;&gt;3.3 软件 &lt;a href=&#34;#33-%e8%bd%af%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们使用深度学习库TensorFlow来实现DNN。Google创造了TensorFlow来替代在Google内部广泛使用的DistBelief [18]。TensorFlow是用C++编写的，API在Python中可用。它不像其他如Torch和Theano[19]等可用的深度学习库那么快，但有很多有用的工具。TensorBoard是一个可视化训练的Web界面。在创建TensorFlow图时，可以添加用于记录如验证精度、交叉熵和学习率等测量值的节点。TensorBoard可以在训练中动态创建的图中显示登记的测量值，如图3.7所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/24.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;34-硬件&#34;&gt;3.4 硬件 &lt;a href=&#34;#34-%e7%a1%ac%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们使用了来自亚马逊网络服务的一个g2.8xlarge GPU服务器用于训练神经网络。它具有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4个GPU&lt;/li&gt;
&lt;li&gt;32个vCPU&lt;/li&gt;
&lt;li&gt;60 GiB内存&lt;/li&gt;
&lt;li&gt;2x120 SSD存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;游戏在具有未知规格的虚拟机上运行。&lt;/p&gt;
&lt;h1 id=&#34;第4章&#34;&gt;第4章 &lt;a href=&#34;#%e7%ac%ac4%e7%ab%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;结果&#34;&gt;结果 &lt;a href=&#34;#%e7%bb%93%e6%9e%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&#34;41-训练神经网络&#34;&gt;4.1 训练神经网络 &lt;a href=&#34;#41-%e8%ae%ad%e7%bb%83%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这部分展示了在训练过程中DNN的表现。验证精度显示了DNN在未见过的数据上预期的表现。我们还包括了正确的动作在前2和前3中出现的频率。训练的最终结果和使用的数据集的详细信息显示在表4.1中。训练期间的验证精度的图示显示在图4.1和图4.2中。&lt;/p&gt;
&lt;p&gt;在简化的数据集上的验证精度很高，如表4.1所示，达到了92.2%。如果给出更多的数据，更多的训练时间和更大的模型，它可能会变得更好。可能接近100%。&lt;/p&gt;
&lt;p&gt;在MCTS数据上的验证精度要低得多，只有28.3%。这并不奇怪，因为它是由一个非确定性的算法生成的。28.3%依然比随机猜测的16.3%要高很多。考虑到我们不知道MCTS数据的可预测性如何，很难知道我们的网络在学习它方面的表现如何。可能是30%是理论上的最高验证精度，如果是这样，那么28.3%就是很好的结果，或者可能会更高，如果是这样，那么28.3%可能就不太好了。为了了解DNN在学习像MCTS那样玩游戏的情况如何，我们需要用DNN玩游戏，并比较它和MCTS的表现。我们将在下一节中做这个。&lt;/p&gt;
&lt;p&gt;训练精度在图表中跳动较大。这是因为它是在128个随机选择的数据点上计算的。对于两个数据集，训练精度似乎接近验证精度。这意味着神经网络没有过拟合，说明还有增加模型大小的空间。我们本来会做这个，但是时间不够。在论文工作期间，我们不断地收集更多的数据，直到最后一个数据集足够大，也就没有过拟合。&lt;/p&gt;
&lt;p&gt;看着验证，验证前-2和验证前-3的精度，我们注意到，在MCTS数据上训练的DNN从28.3%提高到44.4%，再提高到57.3%。这意味着即使它没有选择正确的动作，正确的动作往往也在前3之内。考虑到在糖果游戏中有许多情况，多种动作看起来同样好，如果很难在它们之间区分也就不足为奇了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/25.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图4.1：简化糖果游戏的验证精度。验证前2意味着正确的动作在预测的前2个中的频率，验证前3意味着正确的动作在预测的前3个中的频率。训练精度是在128个数据点的小批量上计算的。&lt;/p&gt;
&lt;p&gt;表4.1：简化糖果游戏和糖果游戏的神经网络训练结果。随机精度是从每个游戏状态的可用移动中随机选择时所期望的验证精度。训练精度是在训练数据的一个小型批次上计算的。验证前-2精度和验证前-3精度意味着正确的动作在预测动作的前-2和前-3中的频率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/26.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/27.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图4.2：糖果游戏的验证精度。验证前2意味着正确的动作在预测的前2个中的频率，验证前3意味着正确的动作在预测的前3个中的频率。训练精度是在128个数据点的小批量上计算的。&lt;/p&gt;
&lt;h2 id=&#34;42-机器人性能&#34;&gt;4.2 机器人性能 &lt;a href=&#34;#42-%e6%9c%ba%e5%99%a8%e4%ba%ba%e6%80%a7%e8%83%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们使用图4.3中显示的所有等级的累积成功率来比较机器人的强度，数值越高越好。
在不进行任何搜索的情况下，深度神经网络(DNN)的表现优于随机选择，如图4.3所示，在进行模拟过程中使用DNN可以提高蒙特卡洛树搜索(MCTS)的性能。这证明了DNN已经从数据中学到了游戏的有用知识，但肯定还有很多没有学到。值得注意的是，纯粹的DNN的表现与纯粹的MCTS相比差很多，而其他人已经成功地使DNN在围棋中的表现与MCTS一样强。围棋的结果是使用专家的动作实现的，而我们使用的数据是来自于比专家玩家更弱的MCTS机器人。训练数据的问题之一是它没有包含游戏的目标。出于这个原因，如果不进行任何搜索，表现好就将变得困难。使用搜索与不使用搜索之间的改进要大于使用DNN与不使用DNN之间的改进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/28.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;43-难度预测&#34;&gt;4.3 难度预测 &lt;a href=&#34;#43-%e9%9a%be%e5%ba%a6%e9%a2%84%e6%b5%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;表4.2显示了每个机器人在361个级别的平均绝对误差。这显示了模型从机器人的难度中预测人类难度的能力有多好。
最令人惊讶的结果是，尽管深度神经网络(DNN)比蒙特卡洛树搜索(MCTS)弱很多，但是当它被允许在每个级别尝试1000次而不是100次时，它在预测人类难度方面却和MCTS差不多，或者更好，可以在表4.2中看到。当DNN在每个级别只做100次尝试时，它是最差的预测器。由于DNN比MCTS快得多，所以它可以在比MCTS做100次尝试的时间更短的时间内做1000次尝试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-21-Predicting.Game.Level.Difficulty.Using.Deep.Neural.Networks/29.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;第5章-讨论与结论&#34;&gt;第5章 讨论与结论 &lt;a href=&#34;#%e7%ac%ac5%e7%ab%a0-%e8%ae%a8%e8%ae%ba%e4%b8%8e%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;51-实践的有效性&#34;&gt;5.1 实践的有效性 &lt;a href=&#34;#51-%e5%ae%9e%e8%b7%b5%e7%9a%84%e6%9c%89%e6%95%88%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;深度神经网络（DNN）如果被允许进行1000次尝试而不是100次，它能做出与蒙特卡洛树搜索（MCTS）相似的难度预测，这是一个在实践中有实用性的结果。这意味着在几分钟内，而不是几个小时，就可以得到与人类难度相似的估计。这可以改变关卡设计师的工作流程，给他们提供更快的反馈循环，使他们在发布前有可能做出更多的调整。&lt;/p&gt;
&lt;h2 id=&#34;52-方法在candy-crush以外的适用性&#34;&gt;5.2 方法在Candy Crush以外的适用性 &lt;a href=&#34;#52-%e6%96%b9%e6%b3%95%e5%9c%a8candy-crush%e4%bb%a5%e5%a4%96%e7%9a%84%e9%80%82%e7%94%a8%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们用来预测Candy Crush游戏难度的方法也应该适用于其他游戏。游戏需要有一个有限的动作空间，这样就可以将其解释为一个分类问题，而且由于我们只是看当前的游戏状态来选择一个动作，所以动作的选择必须只依赖于当前的游戏状态，而不是前一状态。在King公司，我们在两个其他的游戏中也应用了相同的方法，但是那些游戏与Candy Crush非常相似。这种方法对频繁发布新关卡的游戏最有用。&lt;/p&gt;
&lt;h2 id=&#34;53-深度神经网络和蒙特卡洛树搜索对比&#34;&gt;5.3 深度神经网络和蒙特卡洛树搜索对比 &lt;a href=&#34;#53-%e6%b7%b1%e5%ba%a6%e7%a5%9e%e7%bb%8f%e7%bd%91%e7%bb%9c%e5%92%8c%e8%92%99%e7%89%b9%e5%8d%a1%e6%b4%9b%e6%a0%91%e6%90%9c%e7%b4%a2%e5%af%b9%e6%af%94&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;DNN方法的主要优势是速度，可以在极短的时间内做出相似的难度预测。DNN的另一个好处是，它可以在人类的游戏数据上进行训练，使其能像人类一样游戏，可能导致更精确的预测。DNN的主要劣势是，它需要游戏数据和重新训练。对于每一个新的游戏，都必须创建一个游戏状态表示并收集数据。每当游戏添加新的游戏元素时，DNN就必须进行重新训练，并收集新的数据以保持精度。MCTS不需要任何关于游戏版面的知识，因此相同的算法可以应用于新的游戏，无需修改。&lt;/p&gt;
&lt;h2 id=&#34;54-人工智能的伦理学&#34;&gt;5.4 人工智能的伦理学 &lt;a href=&#34;#54-%e4%ba%ba%e5%b7%a5%e6%99%ba%e8%83%bd%e7%9a%84%e4%bc%a6%e7%90%86%e5%ad%a6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;人工智能（AI）存在两个主要关注点。一是超级智能的威胁，二是自动化的经济影响。
&lt;strong&gt;超级智能&lt;/strong&gt;
人工智能可根据其强大的程度分为三种类别。目前所有的AI都处于人工狭义智能（ANI）的类别，也就是说它是特定任务。深蓝（DeepBlue)比任何人都擅长下棋，但下棋是它能做的全部。第二个类别是人工普遍智能（AGI），包括大约与人类一样能力的AI，也就是说它能做人类可以做的普通事情。第三类是人工超智能（ASI），包括超过人类的AI。一旦AGI被发明出来，它可能能够递归地改进其软件以使其更有能力，最终达到ASI [20]。如果ASI变得恶性，它可能会将人类消灭。在这篇论文中，我们探讨了ANI的另一种应用，它在当前状态下并不对人类的生存构成威胁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经济影响&lt;/strong&gt;
能以更低的价格取代人类劳动的AI会导致失业，至少在冗余的工人找到替代工作的时候是暂时的 [21]。一些工人可能会发现很难转换到新的职业，因为他们可能没有或者不能获得需要的技能。这篇论文可能会使游戏的人工测试者变得多余和失业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境影响&lt;/strong&gt;
所述方法需要在云服务器上使用计算能力和存储，但让一个计算机程序在几秒钟内玩一个级别应该比让一个人在几分钟内玩它有更小的环境影响，因此我们认为，用自动化解决方案成功地替换人工玩家对环境是有好处的。&lt;/p&gt;
&lt;h2 id=&#34;55-未来的工作&#34;&gt;5.5 未来的工作 &lt;a href=&#34;#55-%e6%9c%aa%e6%9d%a5%e7%9a%84%e5%b7%a5%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;改进架构&lt;/strong&gt;
由于我们受到时间的严重限制，我们并没有对可能的神经网络的空间进行过多的探索。有几乎无尽的事物可以试验。如果有时间的话，用更多的数据训练更深层的DNN可能会显示出更好的结果。我们并没有在我们的架构中出现过拟合，所以训练一个更深层次的DNN将是下一步要尝试的事情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;改进数据&lt;/strong&gt;
我们使用的数据排除了重要信息，如关卡的目标。它也没有包含移动的方向。使用更优质的数据可能会显示出更好的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;真实用户数据&lt;/strong&gt;
我们最初打算在这篇论文中使用真实用户的数据。我们花了很多时间收集《糖果粉碎苏打传奇》的数据，这需要向代码库添加代码并发布。然而，由于回放游戏的问题超出了我们的控制范围，这一任务不得不中止。继续进行这个实验，对专家玩家进行训练，并观察这对性能有何影响，将是一个有趣的话题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强化学习&lt;/strong&gt;
在这篇论文中，我们只尝试让神经网络学习别人如何玩，本例中是一个MCTS Bot。被最小化的性能指标是神经网络能多好地预测别人如何玩。将目标改为尽量打好可能是个有趣的尝试。使用强化学习，可以在对数据集进行训练后修改DNN的权重，以便最大化其性能。玩一关，看看它的表现如何，更新权重，让它下次玩得更好。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习的定性探索&lt;/strong&gt;
我们只对性能进行了定量度量。神经网络学习了什么样的动作和策略？我们并不清楚，我们只知道它达到了一定的验证精度，而且它在游戏中有一定的成功率。探究它学习了哪些动作，没有学习哪些动作，可能会给出一些有趣的见解。&lt;/p&gt;
&lt;h2 id=&#34;56-结论&#34;&gt;5.6 结论 &lt;a href=&#34;#56-%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们研究了使用基于深度神经网络(DNN)的机器人玩《糖果粉碎传奇》游戏以预测游戏水平难度，并将其与基于蒙特卡洛树搜索(MCTS)的机器人进行了对比。我们在MCTS机器人生成的数据上训练了DNN。DNN机器人比MCTS机器人弱得多，但它可以用来在更短的时间内做出与MCTS机器人相当的人类难度预测。DNN也可以通过在决策过程中使用，而不是随机决策，来使MCTS机器人更强大，但由此做出的人类难度预测并没有更准确。最重要的三个结论是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCTS比DNN强大得多&lt;/li&gt;
&lt;li&gt;如果在游戏过程中使用DNN，可以使MCTS更强大&lt;/li&gt;
&lt;li&gt;DNN可以在大大缩短的时间内做出与人类难度相当的预测&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献 &lt;a href=&#34;#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;[1] David Silver, Aja Huang, Christopher J. Maddison, Arthur Guez, Laurent Sifre, George van den Driessche, Julian Schrittwieser, Ioannis Antonoglou, Veda Panneershelvam, Marc Lanctot, Sander Dieleman, Dominik Grewe, John Nham, Nal Kalchbrenner, Ilya Sutskever, Timothy Lillicrap, Madeleine Leach, Koray Kavukcuoglu, Thore Graepel 和 Demis Hassabis. 利用深度神经网络和树搜索掌握围棋。《自然》杂志, 529:484–503, 2016。网址http://www.nature.com/nature/journal/v529/n7587/full/nature16961.html。
[2] Erik Poromaa. 《粉碎糖果传奇》的胜利。硕士论文, 皇家工学院, 2016。
[3] Alex Krizhevsky, Ilya Sutskever, 和 Geoffrey E Hinton. 利用深度卷积神经网络进行Imagenet分类。在神经信息处理系统进展中, 页码1097–1105, 2012。
[4] Chris J. Maddison, Aja Huang, Ilya Sutskever, 和 David Silver. 利用深度卷积神经网络在围棋中进行着法评估。CoRR, abs/1412.6564, 2014。网址http://arxiv.org/abs/1412.6564。
[5] Barak Oshri 和 Nishith Khandwala. 使用卷积神经网络预测国际象棋中的着法。
[6] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wierstra, 和 Martin Riedmiller. 使用深度强化学习玩Atari游戏。arXiv预印本arXiv:1312.5602, 2013。
[7] Levente Kocsis 和 Csaba Szepesvári. 基于赌徒蒙特卡罗规划的带头臂策略。在机器学习欧洲会议上, 页码282–293。Springer, 2006。
[8] Yann LeCun, Yoshua Bengio, 和 Geoffrey Hinton. 深度学习。《自然》, 521(7553):436–444, 2015。
[9] Djork-Arné Clevert, Thomas Unterthiner, 和 Sepp Hochreiter. 通过指数线性单元（ELUs）快速准确地学习深度网络。CoRR, abs/1511.07289, 2015。网址http://arxiv.org/abs/1511.07289。
[10] Pavel Golik, Patrick Doetsch, 和 Hermann Ney. 交叉熵与平方误差训练：理论和实验比较。在Interspeech中, 页码1756–1760, 2013。
[11] Douglas M Kline 和 Victor L Berardi. 重新审视用于训练神经网络分类器的平方误差和交叉熵函数。神经计算与应用, 14(4):310–318, 2005。
[12] Rob A Dunne 和Norm A Campbell. 关于softmax激活和交叉熵惩罚函数配对以及softmax激活函数的推导。在第8届澳大利亚神经网络会议论文集中, 墨尔本, 181, 卷185, 1997。
[13] Michael A. Nielsen.《神经网络与深度学习》。Determination Press, 2015。
[14] James Bergstra 和Yoshua Bengio. 超参数优化的随机搜索。《机器学习研究杂志》, 13(Feb):281–305, 2012。
[15] Barret Zoph 和Quoc V. Le. 利用强化学习进行神经网络架构搜索。CoRR, abs/1611.01578, 2016。网址http://arxiv.org/abs/1611.01578。
[16] Christian Szegedy, Wei Liu, Yangqing Jia, Pierre Sermanet, Scott Reed, Dragomir Anguelov, Dumitru Erhan, Vincent Vanhoucke, 和 Andrew Rabinovich. 使用卷积进一步深入。在IEEE计算机视觉与模式识别大会论文集中, 页码1–9, 2015。
[17] Toby Walsh. 糖果传奇是NP难题。CoRR, abs/1403.1911, 2014。网址http://arxiv.org/abs/1403.1911。
[18] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, 等. TensorFlow: 一个大规模机器学习系统。在第12届USENIX操作系统设计与实现研讨会（OSDI）论文集中。美国乔治亚州萨凡纳, 2016。
[19] Soheil Bahrampour, Naveen Ramakrishnan, Lukas Schott, 和Mohak Shah. 深度学习软件框架的比较研究。arXiv预印本arXiv:1511.06435, 2015。
[20] Nick Bostrom. 超级智能出现前需要多长时间？1998。
[21] Nils J Nilsson. 人工智能、就业和收入。《人工智能杂志》，5(2):5, 1984。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity中文版-Unity&#39;s Package Manager(三)(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/19/2023-07-19-unity-Documents-4/</link>
      <pubDate>Wed, 19 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/19/2023-07-19-unity-Documents-4/</guid>
      <description>&lt;p&gt;翻译Unity中文版的初衷是因为官方提供的中文版存在缺陷，而且翻译的不全。现在基于Unity2023.2版本对官方文档进行翻译。&lt;/p&gt;
&lt;h1 id=&#34;unitys-package-manager三&#34;&gt;Unity’s Package Manager(三) &lt;a href=&#34;#unitys-package-manager%e4%b8%89&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;package-manager-window包管理器窗口&#34;&gt;Package Manager window(包管理器窗口) &lt;a href=&#34;#package-manager-window%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;从Unity编辑器的&lt;strong&gt;窗口&lt;/strong&gt;菜单访问包管理器窗口。&lt;/p&gt;
&lt;p&gt;你可以使用包管理器窗口来查看哪些包和功能集可以安装或已在你的项目中安装。你也可以使用此窗口来检查哪些包版本可以使用，以及为每个项目安装、删除、禁用或更新包和功能集。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;包管理器窗口显示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; 实验性包指示器，如果你的项目有实验性的包，会向你发出警告。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; &lt;strong&gt;安装&lt;/strong&gt;按钮，您可以通过输入git的URL、本地路径或包的名称点击它直接在项目中安装包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; 导航面板，你可以使用它来选择上下文，以改变在列表面板**(H)**中显示的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D)&lt;/strong&gt; 排序菜单，你可以使用它按照名称或日期对包和功能集列表进行排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(E)&lt;/strong&gt; 过滤菜单，你可以使用它来缩小在列表面板**(H)&lt;strong&gt;中显示的包的范围。 **过滤**菜单和&lt;/strong&gt;清除过滤&lt;strong&gt;按钮对&lt;/strong&gt;内置&lt;strong&gt;列表不可用。它们也对&lt;/strong&gt;项目中&lt;strong&gt;的上下文不可用 (除非你有基于订阅的包)，因为导航面板中的那个上下文有一个&lt;/strong&gt;更新**的嵌套项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-asset-filters.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(F)&lt;/strong&gt; 搜索框，您可以通过名称查找包和功能集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(G)&lt;/strong&gt; &lt;strong&gt;高级&lt;/strong&gt;菜单，您可以使用它来访问Package Manager的&lt;strong&gt;项目设置&lt;/strong&gt;以及更多。详情请参考高级设置部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(H)&lt;/strong&gt; 列表面板，展示你在导航面板中选定的类型的包，受你设定的任何过滤器和搜索参数的限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(I)&lt;/strong&gt; 详情面板，显示在列表面板中选定的包或功能集特定的信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(J)&lt;/strong&gt; 包详细信息标签，显示关于选定包或功能集的更多信息。这些标签是基于选定项变化的。关于这些标签的信息，请参考详情面板。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(K)&lt;/strong&gt; 在项目级别执行以下任何操作的按钮：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装或移除功能集&lt;/li&gt;
&lt;li&gt;安装，更新或者移除包&lt;/li&gt;
&lt;li&gt;下载并导入，更新或者移除&lt;strong&gt;Asset Store&lt;/strong&gt;包&lt;/li&gt;
&lt;li&gt;禁用或启用内置包&lt;/li&gt;
&lt;li&gt;安装或移除服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(L)&lt;/strong&gt; 状态栏，当Package Manager加载包和功能集时显示信息。这些信息包括错误和警告信息，可用的Asset Store包的数量，以及加载更多Asset Store包的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(M)&lt;/strong&gt; &lt;strong&gt;刷新列表&lt;/strong&gt;按钮让您可以刷新显示的包列表。在&lt;strong&gt;我的资源&lt;/strong&gt;上下文中，&lt;strong&gt;刷新列表&lt;/strong&gt;是一个菜单，其中有一个&lt;strong&gt;检查更新&lt;/strong&gt;选项。您可以使用&lt;strong&gt;检查更新&lt;/strong&gt;来检查您电脑上所有包的更新，而不仅仅是在&lt;strong&gt;我的资源&lt;/strong&gt;上下文中可见的那些包的更新。&lt;/p&gt;
&lt;h2 id=&#34;advanced-settings高级设置&#34;&gt;Advanced settings(高级设置) &lt;a href=&#34;#advanced-settings%e9%ab%98%e7%ba%a7%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高级设置菜单允许你执行以下操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Menu item&lt;/strong&gt;(菜单项)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Action results&lt;/strong&gt;(操作结果)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Project Settings&lt;/strong&gt;(&lt;strong&gt;项目设置&lt;/strong&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择此项可以打开Package Manager的项目设置，在这里你可以: - 浏览Unity Registry时列出预发布版的包。- 在你的项目中添加，编辑和移除作用域注册。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Preferences(首选项)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择此项来查看和设置Unity编辑器及相关窗口和工具的首选项。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Manual resolve(手动解决)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择此项可以强制Package Manager解决项目的包问题。如果需要，它会重新安装修改过的或缺失的包，并移除多余的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;status-bar状态栏&#34;&gt;Status bar(状态栏) &lt;a href=&#34;#status-bar%e7%8a%b6%e6%80%81%e6%a0%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Package Manager在其窗口底部的状态栏中显示消息。&lt;/p&gt;
&lt;p&gt;典型的，Package Manager可能会显示四种状态消息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在新项目中首次打开Package Manager窗口时，会短暂出现&lt;strong&gt;刷新列表&lt;/strong&gt;的消息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-loading.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当你点击&lt;strong&gt;刷新列表&lt;/strong&gt;时，也会出现这条消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你在导航面板中选择&lt;strong&gt;我的资产&lt;/strong&gt;上下文时，加载条会出现在日期上方。它会显示Asset Store包的数量和一个&lt;strong&gt;加载&lt;/strong&gt;链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-assets-loadbar.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大部分时间，状态栏都会显示Package Manager窗口最近一次刷新其信息的日期和时间。但是，如果Package Manager检测到一个问题，例如网络问题，它会提示你登陆：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-errors.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你的网络连接正常，但你没有登录到你的Unity账户，Package Manager不会显示任何Asset Store的包。当你在导航面板中选择&lt;strong&gt;我的资产&lt;/strong&gt;时，Package Manager会提示你登录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-unityid.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在列表面板中，点击&lt;strong&gt;登陆&lt;/strong&gt;通过Unity Hub登陆到你的Unity账户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如需获取如何解决这些错误以及更多问题的信息，参考Package Manager的故障排除。&lt;/p&gt;
&lt;h1 id=&#34;access-the-package-manager-window打开package-manager窗口&#34;&gt;Access the Package Manager window(打开Package Manager窗口) &lt;a href=&#34;#access-the-package-manager-window%e6%89%93%e5%bc%80package-manager%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;打开Package Manager窗口，导航至Unity的主菜单，然后前往&lt;strong&gt;窗口&lt;/strong&gt; &amp;gt; &lt;strong&gt;Package Manager&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-access.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;navigation-panel导航面板&#34;&gt;Navigation panel(导航面板) &lt;a href=&#34;#navigation-panel%e5%af%bc%e8%88%aa%e9%9d%a2%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;使用Package Manager的导航面板选择你想要查看的程序包子集。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-nav.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;导航面板**（A）&lt;strong&gt;，列表面板&lt;/strong&gt;（B）&lt;strong&gt;和详细信息面板&lt;/strong&gt;（C）**&lt;/p&gt;
&lt;p&gt;导航面板**（A）&lt;strong&gt;选择一个上下文，以在列表面板&lt;/strong&gt;（B）**中列出这类包。&lt;/p&gt;
&lt;p&gt;当你从列表面板选择一个包时，其详情会在详细信息视图**（C）**中显示。&lt;/p&gt;
&lt;p&gt;有关导航面板中的上下文信息，请参照包列表上下文。&lt;/p&gt;
&lt;h1 id=&#34;list-panel列表面板&#34;&gt;List panel(列表面板) &lt;a href=&#34;#list-panel%e5%88%97%e8%a1%a8%e9%9d%a2%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Package Manager窗口展示了满足你设定条件的功能集，包，或者&lt;strong&gt;Asset Store&lt;/strong&gt;包。&lt;/p&gt;
&lt;p&gt;你通过在导航面板中选择一个上下文以及可选地设置额外的筛选和搜索条件来设定这些条件。&lt;/p&gt;
&lt;p&gt;有关搜索工作方式的重要信息，请参考搜索框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; 当你选择&lt;strong&gt;Unity Registry&lt;/strong&gt;或&lt;strong&gt;In Project&lt;/strong&gt;上下文时，功能集会出现在列表面板的顶部。功能集用功能集图标表示。切换展开图标以展开或收缩功能集列表。当你从列表中选择一个功能集时，其详细信息会显示在右侧。这些详细信息包括简短的描述，所包含包的列表，以及该功能集的&lt;strong&gt;QuickStart&lt;/strong&gt;指南的链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; Asset Store包会出现在你从&lt;strong&gt;My Assets&lt;/strong&gt;列表导入到项目中的所有包的&lt;strong&gt;In Project&lt;/strong&gt;列表中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; 注册表组织了已安装到你的项目中或可供安装的包的列表。该列表为来自Unity的注册表和你在项目中安装的其他范围注册表的包分别设立了不同的组。选择左边的展开器以展开或折叠每个注册表的包列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D)&lt;/strong&gt; 当包被锁定，作为依赖性安装，弃用等情况时，图标会在这一列显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(E)&lt;/strong&gt; 包版本显示已安装的包的版本。如果包尚未安装或导入，显示的版本即为推荐版本。版本号旁边经常出现特殊图标，表示其状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconRel.png&#34; alt=&#34;&#34;&gt; Released 已发布&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://docs.unity3d.com/2023.2/Documentation/uploads/Main/iconRC.png&#34; alt=&#34;&#34;&gt; Release Candidate 发布候选&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconPre.png&#34; alt=&#34;&#34;&gt; Pre-release 预发布&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconExp.png&#34; alt=&#34;&#34;&gt; Experimental 实验性&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconCustom.png&#34; alt=&#34;&#34;&gt; Custom (embedded) 定制（内嵌)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于Asset Store包，显示的版本是你已经下载的版本，或者是在Asset Store中可供下载的版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(F)&lt;/strong&gt; 这些图标显示了包或Asset Store包的状态：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Icon:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconCheck.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;勾选标记表示包或功能集已经被安装，启用或导入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconUpdate.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;更新图标表示包有可用的更新。要更新你的包，请根据包的类型遵循适当的说明： - 对于Unity包，参考切换到另一个包版本。- 对于Asset Store包，参考更新你的Asset Store包。- 你不能更新功能集版本，因为它们固定于编辑器版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconImport.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;导入图标表示有一个Asset Store包可供导入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconDownload.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;下载图标表示有一个Asset Store包可供下载。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconWarning.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;警告图标表示包存在问题，例如弃用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/iconError.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;错误图标表示在安装或加载过程中出了些问题。有关解决错误的信息，参考故障排查。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;(G)&lt;/strong&gt; &amp;ldquo;&lt;strong&gt;我的资源&lt;/strong&gt;&amp;ldquo;上下文显示一个计数器，显示可用但未在列表中显示的Asset Store包的数量。要加载更多Asset Store包，点击&lt;strong&gt;加载&lt;/strong&gt;链接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你选择了“我的资源”上下文，但是包管理器窗口没有列出任何包，请参考包管理器窗口中的错误消息以获取解释和解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(H)&lt;/strong&gt; 状态栏显示关于包加载状态和网络警告的消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(I)&lt;/strong&gt; 点击&lt;strong&gt;重新加载&lt;/strong&gt;按钮，强制包管理器重新加载你的包和功能集。&lt;/p&gt;
&lt;p&gt;默认情况下，包管理器窗口显示选定上下文中所有可用的包和功能集的列表，但你可以过滤列表，以显示满足你标准的包和功能集。&lt;/p&gt;
&lt;p&gt;你也可以在列表中包含预发布的包，并通过名称（ID）或显示名称搜索特定的包或功能集。&lt;/p&gt;
&lt;h1 id=&#34;details-panel详情面板&#34;&gt;Details panel(详情面板) &lt;a href=&#34;#details-panel%e8%af%a6%e6%83%85%e9%9d%a2%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器窗口的右侧面板显示了所选包的详细信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-details.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些详情包括以下信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; 显示名称。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; 包版本，包发布到仓库或Asset Store的日期，以及任何资源或资产标签。如果适用，可能会显示其他信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本之前可能还会出现一个信息提示。你可以点击提示获取更多关于包的信息。例如，如果你请求的包版本与已安装的版本不匹配，这个提示就可能出现。&lt;/li&gt;
&lt;li&gt;对于Unity包，当已安装的&lt;strong&gt;功能集&lt;/strong&gt;需要所选的包时，版本号之前会出现一个锁定图标。锁定包可以防止你无意中更改包版本，以使功能集继续有效地工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; 主机包的仓库和包作者（仅限Unity包），或者包发布商（Asset Store）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D)&lt;/strong&gt; 包名称（仅限Unity包）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(E)&lt;/strong&gt; 链接到附加资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于Unity包：链接打开包文档页，包更新日志（如果有）和许可信息。&lt;/li&gt;
&lt;li&gt;对于Asset Store包：链接打开Asset Store上Asset Store包的官方页面，以及链接到发布商的支持页面和他们的网站（如果有）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(F)&lt;/strong&gt; 包详细信息选项卡，根据包类型不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于Unity包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：包的简短描述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;版本历史&lt;/strong&gt;：包管理器始终列出已安装或推荐的包版本，并提供安装、更新或删除的操作按钮。如果有其他支持的版本可用，并且与你的Unity编辑器版本兼容，包管理器也会列出这些版本。展开每个条目以检查发布日期，该版本的更新日志，以及指向完整更新日志的链接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖性: 包的依赖信息。此部分两个方向列出依赖项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正在使用&lt;/strong&gt;：此包是否依赖于另一个包，如果是，哪个版本。已安装的包在版本号后显示依赖项的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;被使用&lt;/strong&gt;：是否有另一个包依赖于此包，如果是，哪个版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;样本&lt;/strong&gt;：只有当包作者提供了样本时，此选项卡才会显示。选项卡旁边显示一个描述和&lt;strong&gt;导入&lt;/strong&gt;按钮。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于Asset Store包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;概览 : 关于包的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你分配给此Asset Store包的任何自定义标签。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持的Unity版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所需的磁盘空间。&lt;/li&gt;
&lt;li&gt;你获取Asset Store包的日期。&lt;/li&gt;
&lt;li&gt;包的简短描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;发布&lt;/strong&gt;：发布信息，包括原始包的发布日期和当前包的发布日期。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;导入的资源&lt;/strong&gt;：列出了你从Asset Store包导入到你的项目中的项。只有下载了包并将其导入到你的项目后，此选项卡才会出现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图片&lt;/strong&gt;：市场推广图片、音频和视频在Asset Store上的缩略图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(G)&lt;/strong&gt; 解锁、安装、更新、删除或禁用Unity包的按钮。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(H)&lt;/strong&gt; 下载、导入或删除Asset Store包的控件，以及下载和导入包更新的控件。有时是按钮，有时是菜单，最常见的操作显示在最前面。当你的项目和缓存与Asset Store包的最新版本保持同步时，&lt;strong&gt;包管理器&lt;/strong&gt;窗口会显示&lt;strong&gt;在项目中&lt;/strong&gt;（和一个勾选标记）。具体来说，这意味着该包的至少一个项目是最新的。然而，即使显示&lt;strong&gt;在项目中&lt;/strong&gt;，你仍然可以从菜单中选择其他操作。&lt;/p&gt;
&lt;h2 id=&#34;labels标签&#34;&gt;Labels标签 &lt;a href=&#34;#labels%e6%a0%87%e7%ad%be&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一些包和 Asset Store 包在包名称或版本号旁边显示标签。这些标签提供关于包的源或状态的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源标签类型表示包的来源（例如，它是来自本地文件夹，还是你从包注册表下载的）。&lt;/li&gt;
&lt;li&gt;状态标签类型表示包的开发周期阶段。例如，它是一个实验包，还是在特定Unity版本的发布轨道上。&lt;/li&gt;
&lt;li&gt;Asset Store 标签表明该包起源于Asset Store。这些标签也可能表示一种特殊状态（例如，已弃用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些源标签暗示状态标签，反之亦然。例如，如果你将一个包嵌入到你的项目中，则Unity自动假定它是一个正在开发的自定义包，所以在详情面板中只显示&lt;strong&gt;自定义&lt;/strong&gt;标签。&lt;/p&gt;
&lt;p&gt;包管理器窗口显示以下值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Meaning&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Released(发布)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity官方已经发布并全面支持这个包。质量保证团队已经测试过这个版本的包，并保证它与特定版本的编辑器以及为该编辑器版本发布的所有其他包兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Release Candidate(发布候选)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个版本的包将在下一个Tech Stream的当前发布周期内完全发布。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pre-Release(预发布)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个版本的包处于开发的早期阶段，但Unity保证在长期支持（LTS）发布周期结束时将其发布。它可能还没有完整的文档，或者没有完全通过开发团队或Unity的质量保证团队的验证。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Experimental()实验版&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这些包是新包，或者包含实验性的修改。Unity不支持Experimental包，因为它们处于开发的早期阶段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Deprecated(已弃用)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这些包在该Unity编辑器版本中不再开发，或者一个特定版本的包有严重问题。Unity不支持已弃用的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Custom(自定义)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;state, source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个包嵌入在你的项目中。大多数自定义包开发者开始时会在他们的项目中嵌入一个新包，这就是为什么显示&lt;strong&gt;自定义&lt;/strong&gt;标签。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;local(本地)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包管理器从你本地磁盘上的一个文件夹或tarball文件，而非你的Unity项目文件夹，安装了这个包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;git&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包管理器直接从Git仓库在你的项目中安装了这个包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;asset store&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;asset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这是一个你从Asset Store购买或下载的Asset Store包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;deprecated(已弃用)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;asset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;除非你之前已经下载或购买过这个包，否则这个包在Asset Store上不再可用。换句话说，新的客户无法再发现它。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;features-details-panel特性详情面板&#34;&gt;Features (details panel)(特性（详情面板）) &lt;a href=&#34;#features-details-panel%e7%89%b9%e6%80%a7%e8%af%a6%e6%83%85%e9%9d%a2%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在包管理器窗口中，当你从列表面板中选择一个特性集后，右侧的详情面板会显示选中的特性集的详细信息。详情面板会以一种微型包管理器窗口的形式展现特性集的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/fs-details.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(A)&lt;/strong&gt; 当你从列表面板选择一个特性集时，其信息将在详情面板中显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(B)&lt;/strong&gt; 特性集的显示名称。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(C)&lt;/strong&gt; 特性集的名称。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(D)&lt;/strong&gt; 一个&lt;strong&gt;安装&lt;/strong&gt;或&lt;strong&gt;移除&lt;/strong&gt;特性集的按钮。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(E)&lt;/strong&gt; 链接到这个特性集的&lt;strong&gt;快速入门&lt;/strong&gt;指南，包含了如何一起使用这个包集的详细信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(F)&lt;/strong&gt; 特性集详情选项卡：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：对特性集的简介。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含的包 这个选项卡显示以下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包含的包的列表。&lt;/li&gt;
&lt;li&gt;选中的包的详细信息。显示的信息包括包的显示名称，特性集推荐或已安装的版本，以及其描述。&lt;/li&gt;
&lt;li&gt;一个将选中的包加载到包管理器窗口的快捷方式。选择这个快捷方式会替换列表面板和详情面板中的特性集。当你直接从包中访问详情时，包管理器窗口提供的信息比你从特性集内部访问时更多。例如，包详情视图显示依赖信息和包含的任何示例。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-version-overrides包版本覆盖&#34;&gt;Package version overrides(包版本覆盖) &lt;a href=&#34;#package-version-overrides%e5%8c%85%e7%89%88%e6%9c%ac%e8%a6%86%e7%9b%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;特性集是一组针对特定版本的Unity良好协同工作的包的集合，这意味着包管理器会安装你的特性集所需的特定包版本。然而，包管理器实际上可能会安装一个不同的版本（覆盖请求的版本）的原因有几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;另一个包或特性集需要相同包的不同版本，包管理器通过覆盖来解决包版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你请求了一个不同的包版本，它与特性集所需的版本没有冲突。在这种情况下，一个重置按钮会显示，你可以点击它，返回到特性集所需（推荐）的版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：当包版本中的主要或次要数字改变时，&lt;strong&gt;重置&lt;/strong&gt;按钮才会显示。当包版本中的补丁号改变时，&lt;strong&gt;重置&lt;/strong&gt;按钮不会显示。关于语义版本方案的更多信息，请参考版本控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果包管理器安装的版本并非你请求的版本，信息提示会解释更改的原因。&lt;/p&gt;
&lt;h1 id=&#34;finding-packages-and-feature-sets查找包和特性集&#34;&gt;Finding packages and feature sets(查找包和特性集) &lt;a href=&#34;#finding-packages-and-feature-sets%e6%9f%a5%e6%89%be%e5%8c%85%e5%92%8c%e7%89%b9%e6%80%a7%e9%9b%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器窗口提供了几种方法帮助你找到特定的包或&lt;strong&gt;特性集&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-find.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;(A)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Packages list context(包列表上下文)&lt;/td&gt;
&lt;td&gt;从导航面板选择一个“上下文”，以确定显示哪个包列表。上下文可能是包的来源，如注册服务器，资源商店，或Unity编辑器本身（内置包）。然而，&lt;strong&gt;项目中&lt;/strong&gt; 上下文只显示那些已经安装在当前项目中的包和特性集，无论它们的来源是什么。例如，你可以选择 &lt;strong&gt;我的资源&lt;/strong&gt; 上下文，只在列表中显示你可用的资源商店包，或者选择 &lt;strong&gt;项目中&lt;/strong&gt; 上下文，显示资源商店包，Unity包，以及已经安装在你的项目中的特性集。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;(B)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Sort(排序)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;以名称，发布日期（&lt;strong&gt;Unity注册表&lt;/strong&gt;，&lt;strong&gt;我的注册表&lt;/strong&gt;，&lt;strong&gt;项目中&lt;/strong&gt;），购买日期（仅限资源商店包），或最近更新日期（仅限&lt;strong&gt;我的资产&lt;/strong&gt;）的升序或降序排列列表。例如，如果你想找到一个最近更新的资源商店包，但你记不住它的名称，可以选择 &lt;strong&gt;我的资产&lt;/strong&gt;，然后按 &lt;strong&gt;最近更新&lt;/strong&gt; 排序，浏览列表找到它。排序影响每个可折叠区域下的项，但保持区域的位置不变。如果你从Z到A排序，包管理器将在 &lt;strong&gt;特性&lt;/strong&gt; 部分内将所有的特性集重新排序为Z到A，以及每个区域下的所有包，但不会在列表中混淆内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;(C)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Filters(过滤)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;选择选项来缩小列出的包。在 &lt;strong&gt;我的资产&lt;/strong&gt; 中列出的包有增强的过滤选项：&lt;strong&gt;状态&lt;/strong&gt; （已下载，已导入，有可用更新，未标记，隐藏，已弃用）;&lt;strong&gt;类别&lt;/strong&gt; （3D，附加组件，2D，音频等）;&lt;strong&gt;标签&lt;/strong&gt; （你在资源商店中定义的自定义标签）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;(D)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Search(搜索)&lt;/td&gt;
&lt;td&gt;使用搜索框按名称查找Unity包或 &lt;strong&gt;资源商店&lt;/strong&gt; 包。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;使用这些控制可以缩小在列表面板中显示的包和特性集，以及它们的显示顺序。这使得更容易找到你正在查找的内容，或者在你不确切知道你想要什么的时候帮助你浏览。&lt;/p&gt;
&lt;p&gt;当你一起使用多个这些控制时，你可以缩小在列表中出现的匹配集。&lt;/p&gt;
&lt;p&gt;当你从注册表（非资产商店）找到一个包后，你可以选择它，然后可能在详情面板中找到一个特定的版本。对于特性集，总是只有一个版本可用，所以你可以安装它或移除它。&lt;/p&gt;
&lt;h2 id=&#34;finding-a-specific-version寻找特定版本&#34;&gt;Finding a specific version(寻找特定版本) &lt;a href=&#34;#finding-a-specific-version%e5%af%bb%e6%89%be%e7%89%b9%e5%ae%9a%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要找到特定的包版本：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Unity中，通过打开&lt;strong&gt;窗口&lt;/strong&gt;菜单并选择&lt;strong&gt;包管理器&lt;/strong&gt;来打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你正在寻找一个预发布的包，按照以下步骤进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在高级菜单下选择&lt;strong&gt;项目设置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-settings.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;strong&gt;高级设置&lt;/strong&gt;组中，选择&lt;strong&gt;启用预发布包&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关闭项目设置窗口。任何预发布包现在都会带有指示器显示在列表中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以浏览包列表，或者用以下方法之一找到特定的包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过名称或关键字搜索包。&lt;strong&gt;注意：&lt;strong&gt;你在导航面板中选择的上下文限制了搜索范围。例如，如果你正在搜索一个资源商店的包，确保在开始搜索之前选择了&lt;/strong&gt;我的资源&lt;/strong&gt;上下文。当你切换上下文时，包管理器窗口会清空搜索框。但如果你返回到之前的上下文，包管理器窗口会恢复你的搜索词。&lt;/li&gt;
&lt;li&gt;对列表进行排序（例如，按&lt;strong&gt;最近更新&lt;/strong&gt;，以找到最近更新的包）。&lt;/li&gt;
&lt;li&gt;对列表应用过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择一个包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于来自Unity注册表的包，在详细信息面板中选择&lt;strong&gt;版本历史&lt;/strong&gt;选项卡。如果有多个版本可用，展开条目以显示每个版本的特定信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-update.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当&lt;strong&gt;版本历史&lt;/strong&gt;选项卡显示时，你可以在展开特定版本时执行各种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以查看该版本的更新日志，并点击&lt;strong&gt;更新日志&lt;/strong&gt;以查看跨版本的所有更改列表。&lt;/li&gt;
&lt;li&gt;如果你还没有在你的项目中安装这个包，你可以安装这个版本。&lt;/li&gt;
&lt;li&gt;如果你的项目中已经安装了这个包的另一个版本，你可以将包更新到这个版本。&lt;/li&gt;
&lt;li&gt;如果你在项目中安装了这个包，但不再需要它，你可以从项目中移除这个包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;packages-list-context包列表上下文&#34;&gt;Packages list context(包列表上下文) &lt;a href=&#34;#packages-list-context%e5%8c%85%e5%88%97%e8%a1%a8%e4%b8%8a%e4%b8%8b%e6%96%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;要改变在包管理器窗口的列表面板中显示哪些包，从导航面板中选择你想要的上下文。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-unityregistry.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以从以下选项中选择：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;In Project(项目中)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示安装在项目中的所有特性集和包，包括本地、git和嵌入的包，以及从任何注册表安装的包。列表还包括你从&lt;strong&gt;我的资源&lt;/strong&gt;上下文导入的任何资源商店的包。&lt;strong&gt;项目中&lt;/strong&gt;有一个嵌套条目，&lt;strong&gt;更新&lt;/strong&gt;，列出了你的项目中可以更新的所有包，包括资源商店的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Unity Registry(Unity注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示Unity包注册表上的所有&lt;strong&gt;特性集&lt;/strong&gt;和包，无论它们是否已经在你的项目中安装。这不包括从任何其他位置或从任何作用域注册表安装的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Assets(我的资源)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示你用当前登录的Unity ID购买的所有资源商店的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Built-in(内置)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;只显示内置的Unity包，这些包代表Unity的核心功能。你可以用这些包来开启和关闭Unity模块。 &lt;strong&gt;提示&lt;/strong&gt;：你可以在Unity脚本API中了解更多关于每个内置包（模块）实现的内容。每个模块程序集页面都列出了内置包实现的哪些API。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Services(服务)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示集成服务，帮助你吸引、保留和变现用户。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Registries(我的注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示这个项目中安装的任何作用域注册表中可用的包。这个上下文只有在你在这个项目中安装了一个作用域注册表时才会出现。如果你安装了一个作用域注册表但它没有在&lt;strong&gt;我的注册表&lt;/strong&gt;上下文中列出，或者&lt;strong&gt;我的注册表&lt;/strong&gt;上下文根本无法使用，那可能是因为你添加的包注册表服务器没有实现&lt;code&gt;/-/v1/search&lt;/code&gt;或&lt;code&gt;/-/all&lt;/code&gt;端点，这意味着它不兼容Unity的包管理器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当你在导航面板中选择一个上下文时，列表面板会显示符合你选择的特性集和包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你在搜索框中输入了任何文本或设定了任何过滤器，列表面板只会显示符合上下文、搜索条件和活动过滤器的特性集和包。&lt;/p&gt;
&lt;h1 id=&#34;sorting-the-list排序列表&#34;&gt;Sorting the list(排序列表) &lt;a href=&#34;#sorting-the-list%e6%8e%92%e5%ba%8f%e5%88%97%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以根据&lt;strong&gt;特性集&lt;/strong&gt;或包的名字进行升序或降序排序。根据列表上下文，你也可能有一个或多个日期可以排序。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Menu options&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;In Project(项目中)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-inproj.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称 - 创建者将这个特性集或包发布到Unity注册表、资源商店或作用域注册表的日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Unity Registry(Unity注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-unity.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称 - 创建者将这个特性集或包发布到Unity注册表的日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Assets(我的资源)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-assets.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称 - 你从资源商店获得这个包的日期 - 这个资源商店包的最后更新日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Built-in(内置)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-core.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称是唯一的排序选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Services(服务)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-services.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称 - 最后一次发布此服务包的日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Registries(我的注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-sort-myreg.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- 名称 - 创建者将此包发布到作用域注册表的日期&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;filtering-the-list过滤列表&#34;&gt;Filtering the list(过滤列表) &lt;a href=&#34;#filtering-the-list%e8%bf%87%e6%bb%a4%e5%88%97%e8%a1%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;要缩小在列表面板中出现的包的范围，从&lt;strong&gt;包管理器&lt;/strong&gt;窗口选择&lt;strong&gt;过滤器&lt;/strong&gt;菜单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-filter2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;strong&gt;当你在导航面板中选择&lt;/strong&gt;项目中&lt;/strong&gt;时，过滤控制被禁用，因为&lt;strong&gt;项目中&lt;/strong&gt;有一个嵌套视图来列出有更新的包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-filter2b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;以&lt;strong&gt;我的资源&lt;/strong&gt;列表为例，你可以使用以下类型的过滤选项来缩小显示的&lt;strong&gt;资产商店&lt;/strong&gt;包列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;状态&lt;/strong&gt;组让你选择一个&lt;strong&gt;状态&lt;/strong&gt;，列出具有该状态的包。例如，如果你选择&lt;strong&gt;未标记&lt;/strong&gt;，那么只有那些你从未分配标签的资产商店包将出现在列表中。&lt;/li&gt;
&lt;li&gt;选择一个或多个&lt;strong&gt;类别&lt;/strong&gt;，列出与你的选择匹配的资产商店包。&lt;/li&gt;
&lt;li&gt;选择一个或多个你在资产商店为你的包创建的自定义&lt;strong&gt;标签&lt;/strong&gt;。如果你选择了多于一个的标签，那么只有那些匹配任何一个标签的包会保留在列表中。关于如何创建和管理标签，请参考使用标签组织我的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你需要重新开始，点击&lt;strong&gt;过滤器&lt;/strong&gt;菜单旁的&lt;strong&gt;清除过滤器&lt;/strong&gt;，将所有过滤选项重置为默认值。&lt;/p&gt;
&lt;h1 id=&#34;search-box搜索框&#34;&gt;Search box(搜索框) &lt;a href=&#34;#search-box%e6%90%9c%e7%b4%a2%e6%a1%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以在包管理器窗口的列表面板顶部的搜索框，用来查找任何与你输入的文本匹配的包或&lt;strong&gt;功能集&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;随着你输入搜索文字，包管理器窗口更新列表，显示你在导航面板中选中的上下文每个匹配的包或功能集。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你可以搜索Unity包和功能集或者&lt;strong&gt;资产商店&lt;/strong&gt;包。你选择的列表上下文定义了包管理器搜索的位置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;List context&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Where the Package Manager searches&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;In Project(项目中)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包缓存和你当前项目下的&lt;code&gt;Packages&lt;/code&gt;文件夹。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Unity Registry(Unity注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity注册表上的包和功能集列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Assets(我的资源)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;和你的Unity帐户可用的资产商店包列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Built-in(内置)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity注册表上的内置包列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Services(服务)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;你可以安装的集成服务列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;My Registries(我的注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为你的项目定义的任何有限定范围的注册表。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt;：包管理器窗口会根据每个上下文记住你的搜索词。例如，如果你在&lt;strong&gt;项目中&lt;/strong&gt;设置了一个搜索词，包管理器窗口会过滤该列表。如果你选择了任何其他上下文，包管理器窗口会重置搜索并列出该上下文的所有包。但是，如果你返回到&lt;strong&gt;项目中&lt;/strong&gt;，包管理器窗口会恢复你的搜索词并再次过滤&lt;strong&gt;项目中&lt;/strong&gt;的列表。&lt;/p&gt;
&lt;p&gt;为了进一步说明这种每个上下文的搜索范围，如果你在不同的上下文中输入相同的搜索词，你将得到不同的结果。例如，如果你选择&lt;strong&gt;Unity注册表&lt;/strong&gt;上下文，然后在搜索框中输入&lt;code&gt;web&lt;/code&gt;，结果会与你选择&lt;strong&gt;内置&lt;/strong&gt;上下文并搜索同一词语时不同：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-search.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以通过以下方式搜索包或功能集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其显示名称（如详细信息面板顶部所示）。&lt;/li&gt;
&lt;li&gt;其名称（ID）（仅限Unity包和功能集），这是以&lt;strong&gt;com.unity&lt;/strong&gt; 开头的注册包名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你的搜索文本可以匹配名称的开头、中间或结尾。包管理器窗口会动态更新列表。&lt;/p&gt;
&lt;h1 id=&#34;install-a-feature-set-from-the-unity-registry从unity注册表安装功能集&#34;&gt;Install a feature set from the Unity registry(从Unity注册表安装功能集) &lt;a href=&#34;#install-a-feature-set-from-the-unity-registry%e4%bb%8eunity%e6%b3%a8%e5%86%8c%e8%a1%a8%e5%ae%89%e8%a3%85%e5%8a%9f%e8%83%bd%e9%9b%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;安装&lt;strong&gt;功能集&lt;/strong&gt; 与从Unity注册表安装包相似，只不过你在&lt;strong&gt;功能&lt;/strong&gt;扩展器下面而不是&lt;strong&gt;包&lt;/strong&gt;扩展器下面查找功能集。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口，从导航面板中选择&lt;strong&gt;Unity注册表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-unityregistry-1713439592232-69.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想要安装的功能集。功能集信息会在详情面板中显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选：在详情面板中点击&lt;strong&gt;快速启动&lt;/strong&gt;链接，了解更多关于这个功能集以及你如何共同使用其包的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在详情面板中，选择&lt;strong&gt;安装&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/fs-install.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注释:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你需要移除功能集，点击详情面板中的&lt;strong&gt;删除&lt;/strong&gt;按钮。&lt;/li&gt;
&lt;li&gt;你可以使用多选功能一键安装多个功能集。欲了解更多信息，请参考在多个包或功能集上执行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;install-a-package-from-a-registry从注册表安装包&#34;&gt;Install a package from a registry(从注册表安装包) &lt;a href=&#34;#install-a-package-from-a-registry%e4%bb%8e%e6%b3%a8%e5%86%8c%e8%a1%a8%e5%ae%89%e8%a3%85%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：当你使用包管理器安装包时，包管理器会评估其他包及其依赖关系，以确定你选择的版本是否与其他版本有冲突。如果检测到任何冲突或限制，它将安装解决这些问题的版本。欲了解更多信息，请参考依赖关系与解析。&lt;/p&gt;
&lt;p&gt;从Unity注册表或你的项目中定义的任何作用域注册表安装包的过程是相同的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口，从导航面板中选择&lt;strong&gt;Unity注册表&lt;/strong&gt;。如果你设置了作用域注册表，并且想从作用域注册表安装包，请选择&lt;strong&gt;我的注册表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你没有为这个项目定义任何作用域注册表，那么导航面板中将不会显示&lt;strong&gt;我的注册表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-unityregistry-1713439596313-74.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想要安装的包。包信息将在详情面板中显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果包管理器没有在包列表中列出你想要安装的包，那可能是一个不可被发现的包，例如实验性质的或预发布的包。包管理器不会显示实验性质的包，除非它们已经被安装，但是在你启用预发布包项目设置后，预发布的包会在包管理器中显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择要安装的版本。如果你想要了解更多关于可用版本的信息，可以参考查找特定版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;安装&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-install.png&#34; alt=&#34;Install button in the corner of the details panel&#34;&gt;&lt;/p&gt;
&lt;p&gt;当进度条完成时，新的包就已经准备好可以使用了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你可以使用多选功能一键安装多个包。欲了解更多信息，请参考在多个包或功能集上执行操作。&lt;/p&gt;
&lt;h1 id=&#34;install-a-package-from-a-local-folder从本地文件夹安装包&#34;&gt;Install a package from a local folder(从本地文件夹安装包) &lt;a href=&#34;#install-a-package-from-a-local-folder%e4%bb%8e%e6%9c%ac%e5%9c%b0%e6%96%87%e4%bb%b6%e5%a4%b9%e5%ae%89%e8%a3%85%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器可以从你电脑的任何位置加载包，即使你把它保存在你的Unity项目文件夹外面（例如，如果你有一个名为&lt;strong&gt;com.unity.my-local-package&lt;/strong&gt;的包，并且你把它保存在&lt;code&gt;桌面&lt;/code&gt;上，但你的Unity项目存放在&lt;code&gt;文档&lt;/code&gt;文件夹中）。&lt;/p&gt;
&lt;p&gt;你也可以使用你项目文件夹内的一个文件夹，只要它不是预留的项目子文件夹之一。&lt;/p&gt;
&lt;p&gt;要从本地磁盘安装包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开包管理器窗口，如果它还未打开的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击工具栏中的&lt;strong&gt;安装&lt;/strong&gt;按钮。安装包的选项将会出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-local.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从安装菜单中选择&lt;strong&gt;从磁盘安装包&lt;/strong&gt;，将会弹出一个文件浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导航到你的&lt;strong&gt;本地包&lt;/strong&gt;的文件夹根目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在文件浏览器中双击 &lt;code&gt;package.json&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文件浏览器关闭，且该包现在会在包列表中出现，并带有标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-local-ver.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;请记住，如果你已经更新至注册表版本，但你在本地项目上做过更改，那么注册表版本将会覆盖你的本地更改。&lt;/p&gt;
&lt;h2 id=&#34;local-packages-inside-your-project项目内的本地包&#34;&gt;Local packages inside your project(项目内的本地包) &lt;a href=&#34;#local-packages-inside-your-project%e9%a1%b9%e7%9b%ae%e5%86%85%e7%9a%84%e6%9c%ac%e5%9c%b0%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你可以将本地包放置在项目内的任何地方，除了以下文件夹：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Project folder:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reason:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Assets&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果你在这个文件夹内放置一个包，Asset Database会将这个文件夹下的任何资源导入两次：一次作为资源，一次作为包内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Library&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不要修改这个文件夹的内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ProjectSettings&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个文件夹只用于存放设置资产。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Packages&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果你在这个文件夹下放置一个包，不论&lt;strong&gt;项目清单&lt;/strong&gt;中的引用如何，包管理器会自动把它解释为&lt;strong&gt;嵌入包&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;install-a-package-from-a-local-tarball-file从本地tarball文件安装包&#34;&gt;Install a package from a local tarball file(从本地tarball文件安装包) &lt;a href=&#34;#install-a-package-from-a-local-tarball-file%e4%bb%8e%e6%9c%ac%e5%9c%b0tarball%e6%96%87%e4%bb%b6%e5%ae%89%e8%a3%85%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器可以从本地存储的tarball文件加载包。这适用于高级场景，其中你可以将包发布工作流分解成多部分，你的用户可以使用其中部分的中间产品。&lt;/p&gt;
&lt;p&gt;例如，如果你在你的自定义包仓库上设置了持续集成（CI），那么你可以从包文件夹创建一个Gzip tarball文件。你可以通过使用npm pack CLI或者Unity包管理器的Pack API来创建一个&lt;code&gt;Gzip&lt;/code&gt; tarball文件。如果你创建了一个&lt;code&gt;Gzip&lt;/code&gt; tarball文件，在你将其发布到自定义注册表之前进行测试。&lt;/p&gt;
&lt;p&gt;从本地tarball文件安装包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开包管理器窗口，如果它还未开启的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击工具栏中的&lt;strong&gt;安装&lt;/strong&gt;按钮。安装包的选项就会出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-tarball.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在安装菜单中选择 &lt;strong&gt;从tarball安装包&lt;/strong&gt; 以打开文件浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到你保存tarball的文件夹。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：只有具有&lt;code&gt;.tgz&lt;/code&gt;扩展名的tarballs，包管理器的文件选择对话框才能识别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在文件选择对话框中双击tarball文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文件选择对话框将会关闭，现在包会带有标签出现在列表面板中。&lt;/p&gt;
&lt;h1 id=&#34;install-a-package-from-a-git-url从git-url安装包&#34;&gt;Install a package from a Git URL(从Git URL安装包) &lt;a href=&#34;#install-a-package-from-a-git-url%e4%bb%8egit-url%e5%ae%89%e8%a3%85%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器可以从远程服务器上的Git仓库加载包。&lt;/p&gt;
&lt;h2 id=&#34;prerequisites先决条件&#34;&gt;Prerequisites(先决条件) &lt;a href=&#34;#prerequisites%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在你的电脑上安装Git客户端（最低版本为2.14.0）。&lt;/li&gt;
&lt;li&gt;在Windows上，将Git可执行路径添加到&lt;code&gt;PATH&lt;/code&gt;系统环境变量。&lt;/li&gt;
&lt;li&gt;如果目标仓库使用Git LFS跟踪文件，需要在你的电脑上安装Git LFS客户端。&lt;/li&gt;
&lt;li&gt;阅读关于在项目中使用Git依赖项的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;procedure流程&#34;&gt;Procedure(流程) &lt;a href=&#34;#procedure%e6%b5%81%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如需从Git URL安装包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开包管理器窗口，如果它还未开启的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在包管理器的工具栏中打开&lt;strong&gt;安装&lt;/strong&gt;菜单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装包的选项就会出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-giturl.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在安装菜单中选择 &lt;strong&gt;从git URL安装包&lt;/strong&gt;。文本框和&lt;strong&gt;安装&lt;/strong&gt;按钮将会出现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在文本框中输入一个有效的Git URL。关于如何构造有效的Git URL的信息，请参考以下内容：&lt;/p&gt;
&lt;p&gt;Git URLs和扩展语法&lt;/p&gt;
&lt;p&gt;. 有效的Git URL示例包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://github.example.com/myuser/myrepo.git&lt;/code&gt; （如果你的包在仓库的根目录中）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://github.example.com/myuser/myrepo.git?path=/subfolder&lt;/code&gt; （如果你的包在仓库内的子文件夹中）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;安装&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果Unity能够成功安装包，该包现在将会带有标签出现在包列表中。如果Unity无法安装包，Unity控制台将显示错误消息，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有找到‘Git’可执行程序&lt;/li&gt;
&lt;li&gt;Git-lfs：未找到命令&lt;/li&gt;
&lt;li&gt;未找到仓库&lt;/li&gt;
&lt;li&gt;无法读取用户名：终端提示被禁用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击错误消息链接在解决问题页面获取一些帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果你想检查更新并从仓库更新你的Git依赖项到最新版本，点击&lt;strong&gt;更新&lt;/strong&gt;。你也可以使用从git URL安装包菜单项来更新你的Git依赖项。关于Git依赖项的信息，请参阅已锁定的Git依赖项。&lt;/p&gt;
&lt;h1 id=&#34;install-a-package-from-a-registry-by-name通过名字从注册表中安装包&#34;&gt;Install a package from a registry by name(通过名字从注册表中安装包) &lt;a href=&#34;#install-a-package-from-a-registry-by-name%e9%80%9a%e8%bf%87%e5%90%8d%e5%ad%97%e4%bb%8e%e6%b3%a8%e5%86%8c%e8%a1%a8%e4%b8%ad%e5%ae%89%e8%a3%85%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你知道你想安装的包的确切名称，你可以使用 &lt;strong&gt;按名称安装包&lt;/strong&gt; 选项进行安装。这是从注册表中安装包的一种快速方式。&lt;/p&gt;
&lt;p&gt;指定版本是可选的。如果你不知道要安装哪个版本，或者想安装最新的兼容版本，只需输入包的名称。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：最新的兼容版本可能不是最新发布的包。如果有一个已发布的包版本和一个更新的预发行或实验版本，包管理器会选择已发布的包版本，除非你在可选的 &lt;strong&gt;版本&lt;/strong&gt; 字段中明确输入一个值。&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin开始之前&#34;&gt;Before you begin(开始之前) &lt;a href=&#34;#before-you-begin%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;确保你知道包的名称。包的名字是一个唯一的标识符，而不是用户界面和文档上使用的显示名称。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-name-v-dname.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于Unity注册表中的包，名称的唯一标识符使用反向域名表示法，格式为 &lt;code&gt;com.unity.example&lt;/code&gt;。对于在范围内注册表中的包，名称可能不会遵循同样的模式。&lt;/p&gt;
&lt;p&gt;对于Unity注册表和你已添加的任何范围内注册表，如果你在包管理器中可以看到包，选择它并在&lt;strong&gt;检查器&lt;/strong&gt;窗口中查看其详细信息。&lt;strong&gt;名字&lt;/strong&gt;值就是包的名称。&lt;/p&gt;
&lt;p&gt;确定包名的其他方法因托管它的注册表的不同而不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于Unity注册表中的包:
&lt;ul&gt;
&lt;li&gt;使用已发布包和预发布包中的列表，通过其显示名称（如 &lt;code&gt;2D Animation&lt;/code&gt;）识别包。超链接值就是那个包的名称；在这个例子中，是&lt;code&gt;com.unity.2d.animation&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;包的文档可能有明确提供&lt;code&gt;名字&lt;/code&gt;值的安装说明。&lt;/li&gt;
&lt;li&gt;常常会在包文档URL的地址中嵌套包名。以&lt;strong&gt;AR&lt;/strong&gt;基础包为例，其包文档的URL是&lt;code&gt;https://docs.unity3d.com/Packages/com.unity.xr.arfoundation@5.0/manual/index.html&lt;/code&gt;；&lt;code&gt;com.unity.xr.arfoundation&lt;/code&gt;这一部分就是该包的名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于范围注册表中的包，如果你无法使用包管理器和检查器窗口确定其名称，联系包的创建者，请求包名。包的创建者在包的清单文件（&lt;code&gt;package.json&lt;/code&gt;）中将此值记录为必填属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;procedure流程-1&#34;&gt;Procedure(流程) &lt;a href=&#34;#procedure%e6%b5%81%e7%a8%8b-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;按名称安装注册表包，请按照以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开包管理器窗口，如果它还未打开的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击工具栏中的 &lt;strong&gt;安装&lt;/strong&gt; 按钮。安装包的选项会出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-quick.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在安装菜单中选择 &lt;strong&gt;按名称安装包&lt;/strong&gt;。两个文本框和一个 &lt;strong&gt;安装&lt;/strong&gt; 按钮就会出现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&amp;quot;开始前&amp;quot;部分确定的基础上，输入包的 &lt;strong&gt;名称&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-quick-add.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你输入了一个无效的包名或版本，包管理器会警告你找不到那个名称或版本。确认包的名称和版本是否正确，然后再试一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（可选）如果你知道要安装的版本，可以在 &lt;strong&gt;版本（可选）&lt;/strong&gt; 框中输入完整的包版本，例如 &lt;code&gt;1.3.0-pre.2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;strong&gt;安装&lt;/strong&gt;。如果Unity能够成功安装包，该包现在就像任何其他从注册表安装的包一样出现在包列表中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：此方法适用于当前托管在Unity包注册表或任何你已为当前项目设置的范围包注册表上的任何包和版本。&lt;/p&gt;
&lt;h1 id=&#34;removing-an-installed-package-from-a-project从项目中移除已安装的包&#34;&gt;Removing an installed package from a project(从项目中移除已安装的包) &lt;a href=&#34;#removing-an-installed-package-from-a-project%e4%bb%8e%e9%a1%b9%e7%9b%ae%e4%b8%ad%e7%a7%bb%e9%99%a4%e5%b7%b2%e5%ae%89%e8%a3%85%e7%9a%84%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你从项目中&amp;quot;移除&amp;quot;一个Unity注册表包或范围注册表包时，包管理器实际上是在移除你的project manifest中的项目&lt;strong&gt;直接依赖项&lt;/strong&gt;。移除直接依赖项的结果根据你要移除的包的依赖项而变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果没有其他的包或&lt;strong&gt;功能集&lt;/strong&gt;对此包有依赖，它实现的任何编辑器或运行时功能在你的项目中将不再可用。关于直接和&lt;strong&gt;间接依赖项&lt;/strong&gt;的更多信息，请参考依赖和解析。&lt;/li&gt;
&lt;li&gt;如果另一个已安装的包或一个已安装的功能集依赖于你试图移除的包，此操作只移除你的项目清单中的依赖项。包本身及其所有功能仍然在你的项目中安装，并在列表面板中显示依赖项图标。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin开始之前-1&#34;&gt;Before you begin(开始之前) &lt;a href=&#34;#before-you-begin%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在你开始之前，确保你了解这些重要的注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只在你&lt;em&gt;安装&lt;/em&gt; 包到当前项目中时使用此程序来移除包，比如（但不限于）安装功能集，从注册表安装，和安装自定义包。不要试图使用此程序来：
&lt;ul&gt;
&lt;li&gt;移除你&lt;em&gt;下载&lt;/em&gt; &lt;em&gt;和&lt;/em&gt; &lt;em&gt;导入&lt;/em&gt; 到你的项目中的 &lt;strong&gt;Asset Store&lt;/strong&gt;包。关于移除你下载和导入的Asset Store包的信息，请参阅从项目中移除导入的资源。&lt;/li&gt;
&lt;li&gt;移除你&lt;em&gt;导入&lt;/em&gt; 到你的项目的本地 &lt;strong&gt;资源包&lt;/strong&gt;。关于移除你导入的本地资源包的信息，请参考移除本地资源包。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果你使用此程序来移除你从注册表中安装的包，操作会从当前项目中移除包。它不会移除可能存在于其他项目中的同一包。它也不会从全局缓存中移除包；关于包管理器，不支持这个操作，手动操控全局缓存是不被鼓励的。&lt;/li&gt;
&lt;li&gt;如果你用这个程序来移除一个嵌入到你的项目中的包，包管理器会从你的电脑中删除整个包文件夹。然而，从任何其他来源（包括本地包）安装的包只移除清单中对包的引用，但是保持包本身及其内容完整。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;procedure流程-2&#34;&gt;Procedure(流程) &lt;a href=&#34;#procedure%e6%b5%81%e7%a8%8b-2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要移除已安装的包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口，并从导航面板中选择 &lt;strong&gt;在项目中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-inproject.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想要移除的包。详细信息面板现在显示该包的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;strong&gt;移除&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果没有显示此按钮，你可能查看的是 &lt;strong&gt;我的资产&lt;/strong&gt; 列表。请参阅开始前。&lt;/p&gt;
&lt;p&gt;如果此按钮已禁用，你不能移除该包。更多信息，请参考锁定和不可移除的包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-remove.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你想恢复已移除的包，按照安装包的说明进行操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你可以使用多选功能一次性移除多个包。更多信息，请参考在多个包或功能集上执行操作。&lt;/p&gt;
&lt;h2 id=&#34;locked-and-non-removable-packages锁定和无法移除的包&#34;&gt;Locked and non-removable packages(锁定和无法移除的包) &lt;a href=&#34;#locked-and-non-removable-packages%e9%94%81%e5%ae%9a%e5%92%8c%e6%97%a0%e6%b3%95%e7%a7%bb%e9%99%a4%e7%9a%84%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你只能移除那些未被其他的包或功能集要求的包。包管理器通过禁用所有被要求包的&lt;strong&gt;移除&lt;/strong&gt;按钮来强制执行此规定。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Required by&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A feature set(功能集)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果功能集需要此包，那么在列表面板和详细信息面板中都会显示一个锁定图标。详细信息面板还会在该面板的锁定图标下方显示需要此包的功能集的名称。然而，即使你点击了&lt;strong&gt;解锁&lt;/strong&gt;按钮，只有在你移除所有需要它的功能集之后，你才能从项目中移除这个包。解锁包使你可以为你的项目请求一个不同的版本，但它仍然不允许你移除它。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Another package(另一个包)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果一个或多个包需要选中的包，&lt;strong&gt;移除&lt;/strong&gt;按钮就会被禁用。你可以从详细信息面板中的&lt;strong&gt;依赖项&lt;/strong&gt;选项卡中找到有依赖关系的包的名称。如果你不需要其他包，你可以移除它们，包管理器会自动同时移除这个包。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你可以使用多选功能一次性解锁多个包。更多信息，请参阅在多个包或功能集上执行操作。&lt;/p&gt;
&lt;h1 id=&#34;disabling-a-built-in-package禁用内置包&#34;&gt;Disabling a built-in package(禁用内置包) &lt;a href=&#34;#disabling-a-built-in-package%e7%a6%81%e7%94%a8%e5%86%85%e7%bd%ae%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你不需要某些模块，想节省资源，你可以禁用&lt;strong&gt;内建包&lt;/strong&gt;。然而，当你禁用内建包时，相应的Unity功能将不再可用。&lt;/p&gt;
&lt;p&gt;禁用内建包将导致以下结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你使用了一个被禁用的包实现的脚本API，你会得到编译错误。&lt;/li&gt;
&lt;li&gt;被禁用的内建包实现的组件也会被禁用，这意味着你不能把它们添加到任何游戏对象上。如果你有一个&lt;strong&gt;游戏对象&lt;/strong&gt;已经有了这些组件中的一个，Unity会在播放模式中忽略它们。你可以在&lt;strong&gt;检查器&lt;/strong&gt;窗口中查看它们，但它们会显示为灰色，表示它们不可用。&lt;/li&gt;
&lt;li&gt;在构建游戏时，Unity会剔除所有禁用的组件。对于支持引擎代码剔除的构建目标（像Web，iOS，和Android），Unity不会添加任何来自被禁用的内建包的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要禁用内置包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口，从导航面板中选择 &lt;strong&gt;内置包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-builtin.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择你想要禁用的内置包。它的信息会显示在详细信息面板中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;strong&gt;禁用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-disable.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你想要重新启用一个被禁用的内置包，点击 &lt;strong&gt;启用&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：你可以使用多选功能一次点击禁用多个内置包。更多信息，请参阅在多个包或功能集上执行操作。&lt;/p&gt;
&lt;h1 id=&#34;switching-to-another-package-version切换至另一个包版本&#34;&gt;Switching to another package version(切换至另一个包版本) &lt;a href=&#34;#switching-to-another-package-version%e5%88%87%e6%8d%a2%e8%87%b3%e5%8f%a6%e4%b8%80%e4%b8%aa%e5%8c%85%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;使用此页面的信息来更新你从Unity注册表、范围注册表或本地源安装的包。&lt;/p&gt;
&lt;p&gt;如果你想要安装包的特定版本，参考按名称安装包，并按照其可选步骤指定版本。&lt;/p&gt;
&lt;p&gt;如果你想要更新从Git URL安装的包，你可以使用以下任意一种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口中定位到包，选择它，然后点击 &lt;strong&gt;更新&lt;/strong&gt; 按钮。&lt;/li&gt;
&lt;li&gt;使用新的修订版将包重新安装为Git依赖项。关于如何用 &lt;strong&gt;Git依赖项&lt;/strong&gt; 指定修订版的更多信息，参照定向至特定修订版。&lt;/li&gt;
&lt;li&gt;从Unity注册表重新安装包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要更新包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口，并从导航面板选择 &lt;strong&gt;在项目中&lt;/strong&gt;， &lt;strong&gt;Unity注册表&lt;/strong&gt;，或 &lt;strong&gt;我的注册表&lt;/strong&gt;。你也可以选择 &lt;strong&gt;更新&lt;/strong&gt; 条目，它列出了你的项目中所有有可用更新的包。箭头图标出现在有可用更新的包旁边。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想要更新的已安装的包。包信息显示在详细信息面板中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁定图标表示这个包和版本被锁定到已安装的 &lt;strong&gt;功能集&lt;/strong&gt;。要解锁包并选择另一个版本，点击 &lt;strong&gt;解锁&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：包暂时被解开。如果你在导航面板中选择了不同的上下文，或者关闭了 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口或Unity编辑器，包会恢复为锁定状态。然而，如果在包解锁时你更改了版本（例如，通过按名称从注册表安装包的方法），包保持解锁状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在包列表中选择一个包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-update-list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在详细信息面板中，选择 &lt;strong&gt;版本历史&lt;/strong&gt; 标签。如果有多个版本可用，展开条目查看特定于每个版本的信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-update-1713439625941-103.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;strong&gt;更新至#.#&lt;/strong&gt; 按钮，或者点击在 &lt;strong&gt;版本历史&lt;/strong&gt; 标签中列出的版本旁边的 &lt;strong&gt;更新&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;进度条完成时，任何新功能立即可用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你切换到包的旧版本，可能需要在包内容上运行API更新器。&lt;/li&gt;
&lt;li&gt;你可以使用多选功能一次点击切换多个包的版本。更多信息，请参考在多个包或功能集上执行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;importing-an-asset-store-package导入资源商店包&#34;&gt;Importing an Asset Store package(导入资源商店包) &lt;a href=&#34;#importing-an-asset-store-package%e5%af%bc%e5%85%a5%e8%b5%84%e6%ba%90%e5%95%86%e5%ba%97%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以使用 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口将 &lt;strong&gt;资源商店&lt;/strong&gt; 包导入到你的项目中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 遵循此任务导入尚未在你的项目中的资源商店包。关于更新已经在你的项目中的资源商店包的信息，参阅更新资源商店包。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开 &lt;strong&gt;包管理器&lt;/strong&gt; 窗口，从导航面板中选择 &lt;strong&gt;我的资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-myassets.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;列表面板显示你使用当前登录的Unity ID从资源商店获取的任何包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;strong&gt;我的资源&lt;/strong&gt; 列表中出现了很多资源商店的包，你可以通过名称搜索特定的资源商店包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想要导入的资源商店包。资源商店包的信息会显示在详细信息面板中。&lt;/p&gt;
&lt;p&gt;如果你之前没有在这台电脑或设备上下载过资源商店包， &lt;strong&gt;下载&lt;/strong&gt; 按钮会出现。否则，&lt;strong&gt;导入#.#到项目&lt;/strong&gt; 按钮会出现，你可以跳到步骤5立即导入资源商店包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果在详细信息面板中出现 &lt;strong&gt;下载&lt;/strong&gt; 按钮，点击它以下载资源商店包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-import.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果下载按钮显示为 &lt;strong&gt;下载更新&lt;/strong&gt;，星号 (*) 表示在你的包缓存中有一个同版本号的旧版包。发布者随后发布了不改变版本号的包的更新版本。点击那个下载按钮获取包的最新版本。&lt;/p&gt;
&lt;p&gt;当资源商店包下载到你的电脑时，会出现一个进度条，&lt;strong&gt;暂停&lt;/strong&gt; 和 &lt;strong&gt;取消&lt;/strong&gt; 按钮会替换你点击的 &lt;strong&gt;下载&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-download.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些按钮让你可以控制下载进度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击 &lt;strong&gt;暂停&lt;/strong&gt; 按钮以暂停下载。你可以点击 &lt;strong&gt;播放&lt;/strong&gt; 按钮以继续。&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;取消&lt;/strong&gt; 按钮以完全停止下载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下载完成后，包管理器将 &lt;strong&gt;下载&lt;/strong&gt; 替换为一个包含 &lt;strong&gt;导入到项目&lt;/strong&gt; 和 &lt;strong&gt;重新下载&lt;/strong&gt; 操作的菜单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 &lt;strong&gt;导入到项目&lt;/strong&gt; 以导入所选资源商店包。&lt;/p&gt;
&lt;p&gt;如果资源商店包是一个完整的项目，会出现一个确认对话框。参考从资源商店导入完整项目。&lt;/p&gt;
&lt;p&gt;对于所有其他资源商店包，&lt;strong&gt;导入Unity包&lt;/strong&gt; 窗口会显示出来，所有项目都已选中且准备好导入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-import-assets.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除你不想导入的任何项目，然后点击 &lt;strong&gt;导入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;包管理器会把导入的资源商店包的内容放入 &lt;code&gt;Assets&lt;/code&gt; 文件夹，以便你可以从 &lt;strong&gt;项目&lt;/strong&gt; 窗口中访问它们。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当导入操作完成后，导入的包仍然在 &lt;strong&gt;我的资源&lt;/strong&gt; 列表中，但你也可以在 &lt;strong&gt;项目中&lt;/strong&gt; 列表中查看它。每当包有更新可用时，你可以在同样的列表中查看它，以及 &lt;strong&gt;更新&lt;/strong&gt; 列表中，它就在 &lt;strong&gt;项目中&lt;/strong&gt; 下面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：你可以通过使用多选功能一键下载多个包。有关更多信息，请参考执行多个包的操作。&lt;/p&gt;
&lt;h2 id=&#34;viewing-imported-assets查看导入的资源&#34;&gt;Viewing imported assets(查看导入的资源) &lt;a href=&#34;#viewing-imported-assets%e6%9f%a5%e7%9c%8b%e5%af%bc%e5%85%a5%e7%9a%84%e8%b5%84%e6%ba%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你导入资源商店包，或从资源商店包中的一部分资源后，你可以查看已导入资源的列表。&lt;/p&gt;
&lt;p&gt;查看已导入的资源有以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在导航面板中选择 &lt;strong&gt;我的资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在列表面板中选择包。&lt;/li&gt;
&lt;li&gt;在详细信息面板中选择 &lt;strong&gt;已导入资源&lt;/strong&gt; 标签。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;importing-a-complete-project-from-the-asset-store从资源商店导入完整的项目&#34;&gt;Importing a complete project from the Asset Store(从资源商店导入完整的项目) &lt;a href=&#34;#importing-a-complete-project-from-the-asset-store%e4%bb%8e%e8%b5%84%e6%ba%90%e5%95%86%e5%ba%97%e5%af%bc%e5%85%a5%e5%ae%8c%e6%95%b4%e7%9a%84%e9%a1%b9%e7%9b%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;完整的项目具有资源和&lt;strong&gt;项目设置&lt;/strong&gt;。导入完整项目的过程与其他资源商店包相似，除了多了关于项目设置的步骤。&lt;/p&gt;
&lt;p&gt;完整项目中的项目设置可能与你的项目设置冲突，所以当你从资源商店导入一个完整的项目时，包管理器会打开一个对话框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-import-project.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你确定要将包的资源添加到你的项目中，选择&lt;strong&gt;导入&lt;/strong&gt;。一个&lt;strong&gt;导入Unity包&lt;/strong&gt;窗口会出现，像下面的图片显示的那样。清除你不想导入的任何资产内容，然后点击&lt;strong&gt;下一步&lt;/strong&gt;。窗口的第二步列出了包的项目设置。如果你的项目中有任何这些项目设置，包管理器会用&lt;strong&gt;覆盖&lt;/strong&gt;标志来标识它们。除非你清除选择，否则这些设置将被包中的项目设置覆盖。清除你不想导入的任何项目设置，然后点击&lt;strong&gt;导入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你想在一个安全的环境中探索包的资源和项目设置，选择&lt;strong&gt;切换项目&lt;/strong&gt;。选择&lt;strong&gt;切换项目&lt;/strong&gt;将创建一个新的、临时的项目，只有该包的资源和项目设置。探索临时项目后，你可以不保存它然后关闭。如果你想在主项目中继续使用该包，则返回到主项目并再次导入包。在出现的警告对话框上选择&lt;strong&gt;导入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-import-assets2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;updating-an-asset-store-package更新资源商店的包&#34;&gt;Updating an Asset Store package(更新资源商店的包) &lt;a href=&#34;#updating-an-asset-store-package%e6%9b%b4%e6%96%b0%e8%b5%84%e6%ba%90%e5%95%86%e5%ba%97%e7%9a%84%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以通过使用&lt;strong&gt;包管理器&lt;/strong&gt;窗口来更新&lt;strong&gt;资源商店&lt;/strong&gt;的包。&lt;/p&gt;
&lt;p&gt;**注意：**按照此任务来更新已经在你的项目中的资源商店包。如果你想了解关于导入还没有在你的项目中的资源商店包的信息，请参考导入资源商店包。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口，并从导航面板选择&lt;strong&gt;我的资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-myassets-1713439638777-118.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;任何有可用更新的资源商店包旁边都会出现一个向上指的箭头指示器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选：要以最近更新的资源商店包为主的列表，按照&lt;strong&gt;最近更新&lt;/strong&gt;排列。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-update2-sort.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从包列表中选择你想更新的资源商店包。资源商店包的信息会在详细面板中显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选：选择&lt;strong&gt;发布&lt;/strong&gt;标签以查看包最新版本的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-update-rel.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;下载更新&lt;/strong&gt;按钮。&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果下载按钮显示为&lt;strong&gt;下载更新&lt;/strong&gt;，星号(*)意味着你的包缓存中有一个相同版本号的旧版本包。发布者随后发布了新版本的包，但没有改变其版本号。点击下载按钮可以获取包的最新版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你下载的包的版本与你的Unity编辑器版本不兼容，详细面板中会出现一条消息，附带有一个&lt;strong&gt;更新&lt;/strong&gt;按钮，让你下载包的兼容版本。&lt;/p&gt;
&lt;p&gt;不兼容版本的&lt;strong&gt;更新&lt;/strong&gt;按钮&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要使用前一步中下载的包来更新你的项目，选择&lt;strong&gt;导入更新至项目&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;remove-imported-assets-from-a-project从项目中移除已导入的资产&#34;&gt;Remove imported assets from a project(从项目中移除已导入的资产) &lt;a href=&#34;#remove-imported-assets-from-a-project%e4%bb%8e%e9%a1%b9%e7%9b%ae%e4%b8%ad%e7%a7%bb%e9%99%a4%e5%b7%b2%e5%af%bc%e5%85%a5%e7%9a%84%e8%b5%84%e4%ba%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你导入&lt;strong&gt;资产商店&lt;/strong&gt;中的资产时，Unity包管理器会将它们放在你的项目的&lt;code&gt;Assets&lt;/code&gt;目录中。&lt;/p&gt;
&lt;p&gt;如果你知道某些资产没有被使用，你可以从项目中移除这些资产。你可能会考虑这样做是为了减少项目目录的混乱或释放你的本地硬盘空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：确保你的项目不再使用任何你要移除的资产。&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin开始之前-2&#34;&gt;Before you begin(开始之前) &lt;a href=&#34;#before-you-begin%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d-2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在开始之前，请确保你明白以下重要注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;只有当你按照“导入资产商店包”的步骤导入了这些资产到当前项目时，才按照此流程去移除资产。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要试图使用此流程来移除你从注册表中&lt;em&gt;安装&lt;/em&gt;的包。关于从项目中移除你从注册表中安装的包的信息，请参考“从项目中移除已安装的包”。&lt;/li&gt;
&lt;li&gt;不要试图使用此流程来移除你从本地资产包中&lt;em&gt;导入&lt;/em&gt;后的资产。关于删除你从本地资产包中导入的资产的信息，请参考“删除本地资产包”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此流程将资产从当前项目中移除。它不会移除可能存在于其他项目中的同样的资产。它也不会从资产商店缓存中移除包。为了完全从你的电脑中移除资产商店包和其资产，你必须从多个位置移除它们：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用下列流程将每个使用这些资产的项目中的资产移除。&lt;/li&gt;
&lt;li&gt;从你的资产商店缓存中删除此包。请参考“从资产商店缓存中删除一个包”。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;procedure流程-3&#34;&gt;Procedure(流程) &lt;a href=&#34;#procedure%e6%b5%81%e7%a8%8b-3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要从你的项目中移除已导入的资产：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开你的项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口，并从导航面板中选择&lt;strong&gt;我的资源&lt;/strong&gt;或&lt;strong&gt;项目中的资源&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择你想要从你的项目中移除的资源商店包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开详细面板右上角的菜单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-details-menu.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;从项目中移除资产&lt;/strong&gt;来打开&lt;strong&gt;移除&lt;/strong&gt;对话框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-remove-assets.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择要移除的资产。你可以用&lt;strong&gt;全部&lt;/strong&gt;来移除所有资产，或者你可以使用复选框来选择一部分资产。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;移除&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖于已删除资产的&lt;strong&gt;场景&lt;/strong&gt;在&lt;strong&gt;控制台&lt;/strong&gt;窗口中不会报告为错误。如果你怀疑移除操作造成问题，请重新导入包。参考导入资源商店包。&lt;/li&gt;
&lt;li&gt;从你的项目中移除的资产仍会保留在我的资产列表中。要从&lt;strong&gt;我的资产&lt;/strong&gt;中移除这些资产，请参考从资源商店缓存中删除包。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你删除了一部分资产，你可以通过在详细面板中选择&lt;strong&gt;已导入的资产&lt;/strong&gt;标签来查看剩余资产的列表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-ui-imported-assets.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;delete-a-package-from-the-asset-store-cache从资产商店缓存中删除包&#34;&gt;Delete a package from the Asset Store cache(从资产商店缓存中删除包) &lt;a href=&#34;#delete-a-package-from-the-asset-store-cache%e4%bb%8e%e8%b5%84%e4%ba%a7%e5%95%86%e5%ba%97%e7%bc%93%e5%ad%98%e4%b8%ad%e5%88%a0%e9%99%a4%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你下载一个&lt;code&gt;.unitypackage&lt;/code&gt;文件时，Unity包管理器会将其存储在&lt;strong&gt;资产商店&lt;/strong&gt;缓存中。每次你导入一个下载的包或自定义包时，Unity包管理器都会将其存储在你项目的&lt;code&gt;Assets&lt;/code&gt;目录中。&lt;/p&gt;
&lt;p&gt;你可能想要从资产商店缓存中删除包以释放你本地硬盘的空间。如果硬盘空间是你从资产商店缓存中删除包的主要原因，可以考虑改变资产商店缓存的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt;：从资产商店缓存中删除包并不会从使用该包的任何项目中移除同一包。如果你也想从一个项目中移除同一的包，参考从项目中移除已导入的资产。&lt;/p&gt;
&lt;p&gt;要从资产商店缓存中删除包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;strong&gt;包管理器&lt;/strong&gt;窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在导航面板中选择&lt;strong&gt;我的资产&lt;/strong&gt;上下文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在列表面板中选择你想要删除的包。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意两个重要的值，你在后续步骤中需要它们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;发行商的名字，位于&lt;strong&gt;包管理器&lt;/strong&gt;窗口详细面板下的显示名字下方。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;显示名字&lt;/strong&gt;值，位于&lt;em&gt;&lt;strong&gt;检视器&lt;/strong&gt;&lt;/em&gt;中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-details-and-inspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转到资产商店缓存目录的根目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于Unity编辑器2022.1或更高版本：&lt;/p&gt;
&lt;p&gt;a) 打开Unity编辑器的首选项窗口。&lt;/p&gt;
&lt;p&gt;b) 选择&lt;strong&gt;包管理器&lt;/strong&gt;类别。&lt;/p&gt;
&lt;p&gt;c)  点击&lt;strong&gt;My Assets&lt;/strong&gt; &amp;gt; &lt;strong&gt;Cache Location&lt;/strong&gt;图标.&lt;/p&gt;
&lt;p&gt;d) 选择&lt;strong&gt;在Explorer中显示&lt;/strong&gt;（Windows）或&lt;strong&gt;在Finder中显示&lt;/strong&gt;（macOS）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于Unity编辑器2021.3或更早版本：&lt;/p&gt;
&lt;p&gt;a) 参考下载的资产文件的位置，确定你的操作系统的缓存位置。&lt;/p&gt;
&lt;p&gt;b) 使用你的操作系统的文件管理器应用程序转到该目录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择与发行商名称相对应的子目录，这是你在前面的步骤中记录的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-as-cache.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发行商的目录有一个或多个子目录。发行商决定这些子目录的名称：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果有一个子目录，进入它。&lt;/li&gt;
&lt;li&gt;如果有多个子目录，浏览子目录，直到你找到包含要删除的包的子目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;code&gt;&amp;lt;name&amp;gt;.unitypackage&lt;/code&gt;文件，其中&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;对应于你在前面的步骤中确定的&lt;strong&gt;检视器&lt;/strong&gt;窗口的&lt;strong&gt;显示名字&lt;/strong&gt;值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个包现在已经从资产商店缓存中移除，但任何已导入的资产仍在使用它们的项目中保留。&lt;/p&gt;
&lt;h2 id=&#34;adding-the-deleted-package-back-to-your-asset-store-cache将删除的包重新添加到你的资产商店缓存中&#34;&gt;Adding the deleted package back to your Asset Store cache(将删除的包重新添加到你的资产商店缓存中) &lt;a href=&#34;#adding-the-deleted-package-back-to-your-asset-store-cache%e5%b0%86%e5%88%a0%e9%99%a4%e7%9a%84%e5%8c%85%e9%87%8d%e6%96%b0%e6%b7%bb%e5%8a%a0%e5%88%b0%e4%bd%a0%e7%9a%84%e8%b5%84%e4%ba%a7%e5%95%86%e5%ba%97%e7%bc%93%e5%ad%98%e4%b8%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你删除的包是一个资产商店的包，并且你想要将此包重新添加到资产商店的缓存中，参见导入资产商店包。&lt;/p&gt;
&lt;h1 id=&#34;perform-an-action-on-multiple-packages对多个包执行操作&#34;&gt;Perform an action on multiple packages(对多个包执行操作) &lt;a href=&#34;#perform-an-action-on-multiple-packages%e5%af%b9%e5%a4%9a%e4%b8%aa%e5%8c%85%e6%89%a7%e8%a1%8c%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;你可以在包管理器的列表面板中选择多个包或&lt;strong&gt;特性集&lt;/strong&gt;，并一次性对所有选定的项目执行操作。&lt;/p&gt;
&lt;p&gt;例如，你可以使用此功能一次性更新多个包至其最新版本。&lt;/p&gt;
&lt;p&gt;以下表格列出了你可以用来选择多个项目的快捷方式。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Selection type&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Keyboard shortcut&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择列表中的所有项目&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Command + a (macOS) 或 Ctrl + a (Windows和Linux).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用键盘和鼠标选择一个范围&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择范围内的第一项，按住Shift键，然后选择范围内的最后一项.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用箭头键选择一个范围&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择范围内的第一项，按住Shift键，然后使用向上箭头键或向下箭头键扩大范围.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择不是一起分组的多个项目&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择一项，按住Command(macOS)或Ctrl（Windows或Linux），然后选择其他项目.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如需对多个包或特性集执行操作，请按照以下步骤操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开Package Manager窗口，从导航面板中选择一个上下文.&lt;/li&gt;
&lt;li&gt;可选：使用过滤控件来缩小列表.&lt;/li&gt;
&lt;li&gt;可选：使用排序控件对列表进行排序.&lt;/li&gt;
&lt;li&gt;使用上面表格中的其中一种快捷方式从列表中选择多个包或特性集.&lt;/li&gt;
&lt;li&gt;可选：在详细信息面板中打开展开器，查看有关所选项的更多信息，例如包的版本号.&lt;/li&gt;
&lt;li&gt;点击详细信息面板中的操作按钮，在所选项目上执行该操作.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/package-manager-multi-select.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：如果你在 &lt;strong&gt;我的资产&lt;/strong&gt; 列表中选择了多个包，以下操作将无法执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;导入到项目&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将更新导入到项目&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新下载&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下载更新&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;finding-package-documentation寻找包文档&#34;&gt;Finding package documentation(寻找包文档) &lt;a href=&#34;#finding-package-documentation%e5%af%bb%e6%89%be%e5%8c%85%e6%96%87%e6%a1%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Unity手册为特定版本的Unity提供文档。对于包文档，每个包都有自己的版本，因此每个包都为该包的特定版本提供文档。因此，包文档不是主要的Unity手册文档的一部分。相反，每个包的文档都在Unity的文档服务器上的自己的网站上。&lt;/p&gt;
&lt;p&gt;要访问特定包的文档，你有两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取最新版本的文档。&lt;/li&gt;
&lt;li&gt;获取特定包版本的文档（从包管理器窗口）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当包页面打开时，页面顶部有四个链接**(A)&lt;strong&gt;，以及一个下拉菜单&lt;/strong&gt;(B)**，你可以在其中选择不同的版本：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-docs.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用页面顶部的链接查看包的核心使用（&lt;strong&gt;手册&lt;/strong&gt;），包的&lt;strong&gt;脚本API&lt;/strong&gt;文档，包的&lt;strong&gt;变更日志&lt;/strong&gt;，以及包的&lt;strong&gt;许可&lt;/strong&gt;信息。&lt;/p&gt;
&lt;h2 id=&#34;getting-documentation-for-the-latest-version获取最新版本的文档&#34;&gt;Getting documentation for the latest version(获取最新版本的文档) &lt;a href=&#34;#getting-documentation-for-the-latest-version%e8%8e%b7%e5%8f%96%e6%9c%80%e6%96%b0%e7%89%88%e6%9c%ac%e7%9a%84%e6%96%87%e6%a1%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;每个版本的Unity手册文档都提供了已发布和预发布包的列表，内置包的列表，以及按关键字列出的包的列表。每个列表都有链接到与该版本的Unity匹配的包文档。&lt;strong&gt;注意&lt;/strong&gt;：只有与文档匹配的Unity版本兼容的包才会出现在这些列表中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-4/upm-docs-list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以展开侧边栏导航**(A)&lt;strong&gt;中的条目以获取每个包的特定信息。包括兼容版本列表，包的简短说明，和任何相关的关键字。或者，你可以点击列表页&lt;/strong&gt;(B)**上的链接，直接打开与文档版本匹配的最兼容的包文档版本。&lt;/p&gt;
&lt;p&gt;如果你在此列表中找不到你想要的包，可能有几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它与这个版本的Unity不兼容。&lt;/li&gt;
&lt;li&gt;它是一个实验性的或私有的包。有些包由Unity以外的人开发，或者它们在特殊许可证下，不能对所有人开放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于在另一个Unity版本中发布的包，你可能可以通过包管理器窗口访问文档。对于私有包，请尝试直接联系开发者请求访问。&lt;/p&gt;
&lt;h2 id=&#34;getting-documentation-for-a-specific-package-version获取特定包版本的文档&#34;&gt;Getting documentation for a specific package version(获取特定包版本的文档) &lt;a href=&#34;#getting-documentation-for-a-specific-package-version%e8%8e%b7%e5%8f%96%e7%89%b9%e5%ae%9a%e5%8c%85%e7%89%88%e6%9c%ac%e7%9a%84%e6%96%87%e6%a1%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你可以通过查看其文档，变更日志或许可信息，了解更多来自注册表（非资产商店）的包的信息。&lt;/p&gt;
&lt;p&gt;要访问任何这些页面，你可以点击包管理器窗口内的&lt;strong&gt;文档&lt;/strong&gt;，&lt;strong&gt;变更日志&lt;/strong&gt;，或&lt;strong&gt;许可&lt;/strong&gt;链接。&lt;/p&gt;
&lt;p&gt;要访问特定包版本的文档：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Unity中打开包管理器窗口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遵循在寻找包中的指南，定位你想要的特定包和版本号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;strong&gt;文档&lt;/strong&gt;链接，打开所选版本包的文档。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果已安装包，你可以右键点击&lt;strong&gt;文档&lt;/strong&gt;，&lt;strong&gt;变更日志&lt;/strong&gt;或&lt;strong&gt;许可&lt;/strong&gt;链接，并选择&lt;strong&gt;本地打开&lt;/strong&gt;。包管理器会在适当的文件夹打开你的文件浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可以按照这个流程查找来自注册表（非资产商店）的任何版本的包。请注意，对于每个包版本的发布，文档并不一定是不同的，因为有些版本更新（补丁）只涉及到错误修复或微小的更改。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity中文版-Unity&#39;s Package Manager(二)(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/19/2023-07-19-unity-Documents-3/</link>
      <pubDate>Wed, 19 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/19/2023-07-19-unity-Documents-3/</guid>
      <description>&lt;p&gt;翻译Unity中文版的初衷是因为官方提供的中文版存在缺陷，而且翻译的不全。现在基于Unity2023.2版本对官方文档进行翻译。&lt;/p&gt;
&lt;h1 id=&#34;unitys-package-manager二&#34;&gt;Unity’s Package Manager(二) &lt;a href=&#34;#unitys-package-manager%e4%ba%8c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;configuration配置&#34;&gt;Configuration(配置) &lt;a href=&#34;#configuration%e9%85%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本节将向您展示如何针对PackageManager进行以下配置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络配置：绕过防火墙并设置代理服务器&lt;/li&gt;
&lt;li&gt;有范围的注册表身份验证：为需要此项的任何范围内的程序包注册表服务器创建并提供身份验证令牌&lt;/li&gt;
&lt;li&gt;定制全局缓存：更改全局缓存文件夹的位置以及注册表数据缓存的最大大小&lt;/li&gt;
&lt;li&gt;定制资产商店缓存位置：更改&lt;strong&gt;Asset Store&lt;/strong&gt;程序包缓存文件夹的位置&lt;/li&gt;
&lt;li&gt;使用HTTPS Git URLs的私有仓库：使用Git凭证助手访问通过HTTPS进行的私有仓库&lt;/li&gt;
&lt;li&gt;使用SSH Git URLs的有密码保护的SSH密钥：使用认证代理访问通过SSH进行的私有仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，您可以在配置文件下找到PackageManager配置文件的位置。&lt;/p&gt;
&lt;h2 id=&#34;configuration-files配置文件&#34;&gt;Configuration files(配置文件) &lt;a href=&#34;#configuration-files%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PackageManager支持两种配置文件：全局配置文件和用户配置文件。这两种文件都使用TOML格式，并且它们出现在不同的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局&lt;/strong&gt;配置文件适用于机器上的所有用户。例如，当为整个机器设置代理服务器时，您可以定义额外的SSL证书机构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;配置文件适用于单个用户。例如，您可以设置用于使用有范围的注册表访问的自定义包注册服务器的认证令牌。这些令牌验证了特定的用户账户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;global-configuration-file-location全局配置文件位置&#34;&gt;Global configuration file location(全局配置文件位置) &lt;a href=&#34;#global-configuration-file-location%e5%85%a8%e5%b1%80%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%bd%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PackageManager使用名为&lt;code&gt;upmconfig.toml&lt;/code&gt;的全局配置文件。安装Unity Hub或Editor时，此文件不会被创建，但如果你需要自定义你的配置，你可以在以下位置创建它：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Environment:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;%ALLUSERSPROFILE%\Unity\config\upmconfig.toml&lt;/code&gt; (for example, &lt;code&gt;C:\ProgramData\Unity\config\upmconfig.toml&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;macOS and Linux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/etc/upmconfig.toml&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;你可以定义一个自定义位置来覆盖你的配置文件的默认位置。要做到这一点，创建一个&lt;code&gt;UPM_GLOBAL_CONFIG_FILE&lt;/code&gt;环境变量，并将其值设置为你的配置文件的绝对路径，包括文件名。&lt;/p&gt;
&lt;h3 id=&#34;user-configuration-file-location用户配置文件位置&#34;&gt;User configuration file location(用户配置文件位置) &lt;a href=&#34;#user-configuration-file-location%e7%94%a8%e6%88%b7%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e4%bd%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PackageManager使用名为&lt;code&gt;.upmconfig.toml&lt;/code&gt;的用户配置文件。当你安装Unity Hub或Editor时，该文件并不被创建，但如果你需要自定义你的配置，你可以在下列位置创建它：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Environment:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Location:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows (user account)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;%USERPROFILE%\.upmconfig.toml&lt;/code&gt; (for example, &lt;code&gt;C:\Users\myusername\.upmconfig.toml&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows (system user account)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;%ALLUSERSPROFILE%\Unity\config\ServiceAccounts\.upmconfig.toml&lt;/code&gt; (for example, &lt;code&gt;C:\Users\Public\Unity\config\ServiceAccounts\.upmconfig.toml&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;macOS and Linux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;~/.upmconfig.toml&lt;/code&gt; (for example, &lt;code&gt;/Users/myusername/.upmconfig.toml&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;你可以定义一个自定义位置来覆盖你的配置文件的默认位置。要做到这一点，创建一个&lt;code&gt;UPM_USER_CONFIG_FILE&lt;/code&gt;环境变量，并将其值设置为你的配置文件的绝对路径，包括文件名。&lt;/p&gt;
&lt;h1 id=&#34;solving-network-issues解决网络问题&#34;&gt;Solving network issues(解决网络问题) &lt;a href=&#34;#solving-network-issues%e8%a7%a3%e5%86%b3%e7%bd%91%e7%bb%9c%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;使用以下步骤来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置你的防火墙设置，使Unity可以访问PackageManager注册服务器。&lt;/li&gt;
&lt;li&gt;配置代理服务器，可以通过设置环境变量或添加自定义证书颁发机构(CA)证书来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;configuring-your-firewall配置你的防火墙&#34;&gt;Configuring your firewall(配置你的防火墙) &lt;a href=&#34;#configuring-your-firewall%e9%85%8d%e7%bd%ae%e4%bd%a0%e7%9a%84%e9%98%b2%e7%81%ab%e5%a2%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;为确保Unity的PackageManager可以访问其使用的域名，你必须将这些域名添加到防火墙的安全列表。&lt;/p&gt;
&lt;p&gt;关于这些域名的完整列表，以及Unity编辑器所需的所有域名，请参考Unity应用程序可以访问的终端点。你可以使用列表添加整个域名，或使用表格选择性地添加子域名。&lt;/p&gt;
&lt;p&gt;请参考你的操作系统的帮助，了解如何将域名添加到防火墙的安全列表。&lt;/p&gt;
&lt;h2 id=&#34;configuring-your-proxy-server配置你的代理服务器&#34;&gt;Configuring your proxy server(配置你的代理服务器) &lt;a href=&#34;#configuring-your-proxy-server%e9%85%8d%e7%bd%ae%e4%bd%a0%e7%9a%84%e4%bb%a3%e7%90%86%e6%9c%8d%e5%8a%a1%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;当使用代理服务器时，配置&lt;code&gt;HTTP_PROXY&lt;/code&gt;和&lt;code&gt;HTTPS_PROXY&lt;/code&gt;环境变量，供Unity的PackageManager在对Unity包注册表执行请求时使用。更多信息，请参考使用环境变量来识别你的代理服务器。&lt;/p&gt;
&lt;p&gt;你可以根据你的操作系统，全局设置这些变量（系统变量或用户变量）。或者，你也可以创建一个命令文件来设置这些环境变量并启动Hub。&lt;/p&gt;
&lt;p&gt;对于你在一个使用PackageManager不识别的证书的代理服务器后面的环境，你可以配置一个自定义证书颁发机构。&lt;/p&gt;
&lt;h3 id=&#34;custom-certificate-authority自定义证书颁发机构&#34;&gt;Custom certificate authority(自定义证书颁发机构) &lt;a href=&#34;#custom-certificate-authority%e8%87%aa%e5%ae%9a%e4%b9%89%e8%af%81%e4%b9%a6%e9%a2%81%e5%8f%91%e6%9c%ba%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在一些组织中，用户只能通过代理服务器访问互联网。一些代理会解开HTTPS内容，然后用他们自己的SSL证书重新打包。Unity包管理器的底层HTTPS层有时会拒绝这些证书，因为它不认可发出这些证书的证书颁发机构。当这种情况发生时，PackageManager会将连接视为可能的中间人攻击(MITM)。这意味着，除非你配置额外的SSL证书颁发机构来允许这些证书，否则你无法使用Unity中的许多功能，包括PackageManager。&lt;/p&gt;
&lt;p&gt;要配置额外的SSL证书颁发机构：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定位&lt;code&gt;upmconfig.toml&lt;/code&gt;全局配置文件。如果文件不存在，创建一个空的文本文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建一个包含一个或多个自定义证书颁发机构的证书的文本文件。文件必须由一个或多个受信任的证书组成，证书格式为Privacy-Enhanced Mail (PEM)。例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-pem&#34; data-lang=&#34;pem&#34;&gt;-----BEGIN CERTIFICATE-----
MIIC+zCCAeOgAwIBAgIJAO0U6hVJnbvjMA0GCSqGSIb3DQEBBQUAMBQxEjAQBgNV
BAMMCWxvY2FsaG9zdDAeFw0xOTAzMTIwMTIxMzRaFw0yOTAzMDkwMTIxMzRaMBQx
(additional lines omitted for conciseness)
LFwHSUdqk0lJK4b0mCwyTHNvYO1IDziE5EKwfuaKVgOa62iCHVahgIVa+een4EfS
hCCr3M3cq11Mi+mnRi1scxxrOno4OEEChWg2szZLlxBrkVJllrrq620XJ6RLB/8=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
(additional lines omitted for conciseness)
H2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe
+o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果可能的话，将此文件保存到与全局配置文件相同的文件夹中，虽然Unity支持在文件系统的任何位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在全局配置文件中，添加&lt;strong&gt;caFile&lt;/strong&gt;键，并将其值设置为你的PEM文件的绝对文件路径。&lt;strong&gt;重要提示&lt;/strong&gt;：在TOML文件中设置Windows路径时，使用正斜杠(&lt;code&gt;/&lt;/code&gt;)或双反斜杠(&lt;code&gt;\\&lt;/code&gt;)。不要使用单反斜杠(&lt;code&gt;\&lt;/code&gt;)，因为它们是标记转义序列的特殊字符，可能会导致TOML解析错误。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;caFile&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\\ProgramData\\Unity\\config\\cert.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;macOS and Linux example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;caFile&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/etc/cert.pem&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;scoped-registry-authentication限定范围的注册表身份验证&#34;&gt;Scoped registry authentication(限定范围的注册表身份验证) &lt;a href=&#34;#scoped-registry-authentication%e9%99%90%e5%ae%9a%e8%8c%83%e5%9b%b4%e7%9a%84%e6%b3%a8%e5%86%8c%e8%a1%a8%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一些组织在需要身份验证才能访问的私有包注册表上托管他们自己的包。如果你是这些组织的员工或客户，你必须配置一个带有npm身份验证的限定范围的注册表。为了建立这个，获取一个npm身份验证令牌，然后将该令牌添加到你的用户配置文件中。&lt;/p&gt;
&lt;h2 id=&#34;1-fetch-the-npm-authentication-token获取npm身份验证令牌&#34;&gt;1) Fetch the npm authentication token(获取npm身份验证令牌) &lt;a href=&#34;#1-fetch-the-npm-authentication-token%e8%8e%b7%e5%8f%96npm%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81%e4%bb%a4%e7%89%8c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;创建和访问npm身份验证令牌的过程因每个注册表提供商而异。例如，JFrog的Artifactory仓库管理器生成身份验证令牌的程序与npm不同。这是一个典型程序的例子，但你需要遵循特定包注册表供应商为你的限定范围的注册表推荐的过程。&lt;/p&gt;
&lt;p&gt;要从npm获取身份验证令牌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在你的计算机上本地安装npm。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从终端，输入以下命令来登录注册表：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ npm login --registry &amp;lt;registry url&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定位并打开生成的.npmrc文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定位&lt;code&gt;_authToken&lt;/code&gt;或&lt;code&gt;_auth&lt;/code&gt;条目，并复制其值（参阅下面的例子）。&lt;/p&gt;
&lt;p&gt;根据注册表，令牌字符串可以是全局唯一标识符（GUID）、令牌，或者是专有格式的字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;examples-of-npmrc-filesnpmrc文件的示例&#34;&gt;Examples of .npmrc files(.npmrc文件的示例) &lt;a href=&#34;#examples-of-npmrc-filesnpmrc%e6%96%87%e4%bb%b6%e7%9a%84%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这是一个包含&lt;code&gt;_authToken&lt;/code&gt;属性的&lt;code&gt;.npmrc&lt;/code&gt;文件的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registry&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;://&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mylocation&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mylocation&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_authToken&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AUTH&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TOKEN&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个包含&lt;code&gt;_auth&lt;/code&gt;属性的&lt;code&gt;.npmrc&lt;/code&gt;文件的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registry&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;://&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;example&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1234&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mylocation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_auth&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AUTH&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TOKEN&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt;=&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;EMAIL&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;always-auth&lt;/span&gt;=&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-configure-authentication-information配置身份验证信息&#34;&gt;2) Configure authentication information(配置身份验证信息) &lt;a href=&#34;#2-configure-authentication-information%e9%85%8d%e7%bd%ae%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81%e4%bf%a1%e6%81%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;npmAuth&lt;/code&gt;配置模式在&lt;code&gt;.upmconfig.toml&lt;/code&gt;用户配置文件中存储每个需要身份验证的限定范围的注册表的令牌信息。当你把这个信息保存到配置文件后，包管理器会在向文件中的每个注册表发起的每个请求上提供你的身份验证信息。&lt;/p&gt;
&lt;p&gt;遵循这些指示将你的身份验证信息添加到用户配置文件中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位&lt;code&gt;.upmconfig.toml&lt;/code&gt;用户配置文件。如果文件不存在，创建一个空的文本文件。&lt;/li&gt;
&lt;li&gt;根据你是否使用Bearer（基于令牌）或Basic（Base64加密）的身份验证机制，使用模式格式化你的身份验证信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;npmAuth&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;REGISTRY URL&amp;gt;&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TOKEN-PROPERTY&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;TOKEN-VALUE&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;EMAIL&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysAuth&lt;/span&gt; = &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BOOLEAN&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下表中的信息解释了如何指定配置文件的值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Entry&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;[npmAuth.&amp;quot;&amp;lt;REGISTRY-URL&amp;gt;&amp;quot;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需要。注册表的URL。例如，&lt;code&gt;[npmAuth.&amp;quot;https://example.com:8081/mylocation&amp;quot;]&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;&amp;lt;TOKEN-PROPERTY&amp;gt; = &amp;quot;&amp;lt;TOKEN-VALUE&amp;gt;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;需要。从npm注册表生成的身份验证令牌。这可以是GUID、令牌，或者是专有格式的字符串。例如，可以是&lt;code&gt;token = &amp;quot;&amp;lt;AUTH TOKEN&amp;gt;&amp;quot;&lt;/code&gt;（Bearer）或&lt;code&gt;_auth = &amp;quot;&amp;lt;BASE64 TOKEN&amp;gt;&amp;quot;&lt;/code&gt;（Basic）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。与注册表上用户邮箱地址匹配的用户邮箱地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;alwaysAuth&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。如果包元数据和压缩包不在同一服务器上，设置为&lt;code&gt;true&lt;/code&gt;。通常，你可以从你生成的.npmrc文件中复制这个值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;example-using-bearer-authentication使用bearer身份验证的例子&#34;&gt;Example using bearer authentication(使用Bearer身份验证的例子) &lt;a href=&#34;#example-using-bearer-authentication%e4%bd%bf%e7%94%a8bearer%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81%e7%9a%84%e4%be%8b%e5%ad%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;npmAuth&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:8081/myrepository/mylocation&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NpmToken.2348c7ea-6f86-3dbe-86b6-f257e86569a8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysAuth&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;npmAuth&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:4873&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eaJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyZWFsX2dyb3VwcyI6WyJwYXNjYWxsIl0sIm5hbWUiOiJwYXNjYWxsIiwiZ3JvdXBzIjpbIn&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;npmAuth&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://api.bintray.example/npm/mycompany/myregistry&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aGFzY2FsbDo4ZWIwNTM5NzBjNTI3OTIwYjQ4MDVkYzY2YWEzNmQxOTkyNDYzZjky&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysAuth&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configure-basic-authentication-information配置基本身份验证信息&#34;&gt;Configure basic authentication information(配置基本身份验证信息) &lt;a href=&#34;#configure-basic-authentication-information%e9%85%8d%e7%bd%ae%e5%9f%ba%e6%9c%ac%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81%e4%bf%a1%e6%81%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这些步骤以Azure DevOps为例，但是对于任何使用个人访问令牌（PAT）的平台，流程都是类似的。&lt;/p&gt;
&lt;p&gt;开始前，如果还未安装Node.js，请进行安装。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;获取你的Azure DevOps个人访问令牌（PAT），准备在后续步骤中使用。如果你需要重新生成PAT，请登录Azure DevOps &lt;a href=&#34;https://dev.azure.com/&#34;&gt;https://dev.azure.com&lt;/a&gt; 并前往 &lt;strong&gt;用户设置&lt;/strong&gt; &amp;gt; &lt;strong&gt;个人访问令牌&lt;/strong&gt;。关于如何使用PAT的信息，可以参考Microsoft的文章，使用个人访问令牌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从命令行，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;require(&amp;#39;readline&amp;#39;).createInterface({input:process.stdin,output:process.stdout,historySize:0}).question(&amp;#39;Enter PAT&amp;gt; &amp;#39;,p =&amp;gt; {b64=Buffer.from(p.trim()).toString(&amp;#39;base64&amp;#39;);console.log(b64);process.exit();})&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;Enter PAT&lt;/code&gt;提示时，输入&lt;code&gt;email:PAT&lt;/code&gt;，将其替换为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;email&lt;/code&gt;替换为与你的Azure DevOps帐户关联的电子邮件和&lt;code&gt;.upmconfig.toml&lt;/code&gt;文件中指定的电子邮件&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;PAT&lt;/code&gt;替换为你在早期步骤中获得的PAT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令将返回一个Base64加密的字符串。复制该字符串并将其赋值为&lt;code&gt;.upmconfig.toml&lt;/code&gt;文件中的&lt;code&gt;_auth&lt;/code&gt;键的值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;example-using-basic-authentication&#34;&gt;Example using basic authentication &lt;a href=&#34;#example-using-basic-authentication&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;npmAuth&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://localhost:8081/myrepository/mylocation&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;_auth&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c19kaW5pcm9AaG90bWFpbC4jb206d3FzdzVhemU9Q==&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;username@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;alwaysAuth&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;customize-the-global-cache自定义全局缓存&#34;&gt;Customize the global cache(自定义全局缓存) &lt;a href=&#34;#customize-the-global-cache%e8%87%aa%e5%ae%9a%e4%b9%89%e5%85%a8%e5%b1%80%e7%bc%93%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器维护一个用于注册表数据和未压缩包的全局缓存。&lt;/p&gt;
&lt;p&gt;全局缓存与包管理器为 &lt;strong&gt;资源商店&lt;/strong&gt; 包维护的缓存是分开的。关于资源商店缓存的信息，请参考自定义资源商店缓存位置。&lt;/p&gt;
&lt;p&gt;默认情况下，包管理器的全局缓存根目录有以下子目录，每个子缓存有不同的用途：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;db&lt;/code&gt;子目录存储注册表数据（包元数据和tarballs）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;packages&lt;/code&gt;子目录存储未压缩的包tarballs的内容。&lt;/li&gt;
&lt;li&gt;如果你已启用Git LFS，&lt;code&gt;git-lfs&lt;/code&gt;子目录会存储下载的Git大文件存储（LFS）文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包管理器将全局缓存存储在默认位置，你可以覆盖它。关于全局缓存根目录的默认位置的信息，请参考全局缓存。&lt;/p&gt;
&lt;p&gt;你可能出于以下几个原因想要覆盖全局缓存位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你想在你的内部驱动器上节省空间。&lt;/li&gt;
&lt;li&gt;你想在共享驱动器上存储缓存，以便其他人可以访问它。&lt;/li&gt;
&lt;li&gt;你想在非系统目录的文件夹中存储缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从2023.2.0f1开始，&lt;code&gt;db&lt;/code&gt;子目录的最大大小默认为10千兆字节（GB），你可以覆盖它。你可能出于以下几个原因想要覆盖&lt;code&gt;db&lt;/code&gt;子目录的最大大小：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你的可用磁盘空间很小，你可以降低限制以节省空间。&lt;/li&gt;
&lt;li&gt;如果你有大量可用的磁盘空间，你可以增加限制。这允许包管理器在缓存中存储更多数据，这样它可以从缓存中获取包，而不是再次下载它们。缓存的包安装更快，减少了网络使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下表格列出了你可以用来覆盖默认属性的不同方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Method&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Global cache location&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;&lt;code&gt;db&lt;/code&gt; subdirectory max size&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Additional notes(额外说明)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Preferences window(偏好设置窗口)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;No&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这种方法因其易用性和持久性被推荐。当你使用这种方法更改包缓存位置时，Unity会为当前和未来的Unity编辑器会话存储偏好设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;User configuration file(用户配置文件)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户配置文件中的包缓存属性覆盖会持续到当前Unity编辑器会话之后。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Environment variables(环境变量)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Yes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认情况下，此方法为当前的命令提示符（或终端）会话设置配置，但你可以在你的操作系统设置中使其永久化。高级用户可能在特定用例下更喜欢基于会话的变量。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：使用&lt;strong&gt;偏好设置&lt;/strong&gt;窗口设置全局缓存位置也会在用户配置文件中设置&lt;code&gt;cacheRoot&lt;/code&gt;属性。如果你想手动设置用户配置文件，请参考使用用户配置文件。&lt;/p&gt;
&lt;h2 id=&#34;important-notes-before-you-begin开始前的重要声明&#34;&gt;Important notes before you begin(开始前的重要声明) &lt;a href=&#34;#important-notes-before-you-begin%e5%bc%80%e5%a7%8b%e5%89%8d%e7%9a%84%e9%87%8d%e8%a6%81%e5%a3%b0%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无论你选择哪种方法，更改缓存位置都会告诉包管理器从此时开始使用该位置。包管理器在原始位置存储的现有包会保留在那个文件夹结构中。&lt;/li&gt;
&lt;li&gt;如果你设置了&lt;code&gt;db&lt;/code&gt;子目录的最大大小，且新大小小于该子目录的当前大小，包管理器会从缓存中逐出内容，直到达到新的限制。包管理器会按照最近最少使用的内容进行驱逐（基于安装到项目中的日期）。&lt;/li&gt;
&lt;li&gt;当你使用用户配置文件时，你的更改应用于当前的用户帐户。尽管存在全局配置文件，但你不能在全局配置文件中设置缓存覆盖。&lt;/li&gt;
&lt;li&gt;有一些因素会影响如何设置多个值与使用不同方法一起工作：
&lt;ul&gt;
&lt;li&gt;如果你使用了环境变量方法来更改缓存位置，那么你不能使用&lt;strong&gt;偏好设置&lt;/strong&gt;窗口来更改位置。&lt;/li&gt;
&lt;li&gt;设置环境变量优先于在用户配置文件或&lt;strong&gt;偏好设置&lt;/strong&gt;窗口中应用相同的设置。&lt;/li&gt;
&lt;li&gt;如果你为注册表数据缓存(&lt;code&gt;UPM_NPM_CACHE_PATH&lt;/code&gt;)、未压缩的包缓存(&lt;code&gt;UPM_CACHE_PATH&lt;/code&gt;)或Git LFS缓存(&lt;code&gt;UPM_GIT_LFS_CACHE_PATH&lt;/code&gt;)设置了环境变量，包管理器将使用环境变量设置的位置，而不管全局缓存根位置在哪里。&lt;/li&gt;
&lt;li&gt;如果你启用了Git LFS缓存(&lt;code&gt;UPM_ENABLE_GIT_LFS_CACHE&lt;/code&gt;)但没有明确设置其路径(&lt;code&gt;UPM_GIT_LFS_CACHE_PATH&lt;/code&gt;)，包管理器会使用全局缓存根下的&lt;code&gt;git-lfs&lt;/code&gt;目录作为其位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-the-preferences-window偏好设置窗口&#34;&gt;Using the Preferences window(偏好设置窗口) &lt;a href=&#34;#using-the-preferences-window%e5%81%8f%e5%a5%bd%e8%ae%be%e7%bd%ae%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;若要使用&lt;strong&gt;偏好设置&lt;/strong&gt;窗口来覆盖全局缓存的默认位置，请按照以下步骤操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用以下方法之一打开&lt;strong&gt;偏好设置&lt;/strong&gt;窗口：
&lt;ul&gt;
&lt;li&gt;使用Unity编辑器的菜单，如偏好设置中所述。&lt;/li&gt;
&lt;li&gt;打开包管理器窗口，打开&lt;strong&gt;高级&lt;/strong&gt; &lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/iconSettings.png&#34; alt=&#34;img&#34;&gt; 菜单，并选择&lt;strong&gt;偏好设置&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;包管理器&lt;/strong&gt;分类。&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;包&lt;/strong&gt;下，打开&lt;strong&gt;缓存位置&lt;/strong&gt;旁边的菜单 &lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/package-manager-folder.png&#34; alt=&#34;img&#34;&gt;.&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;更改位置&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为全局缓存选择一个新位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/preferences-package-manager.png&#34; alt=&#34;The Preferences window with the Package Manager category selected&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择了包管理器类别的偏好设定窗口&lt;/p&gt;
&lt;h2 id=&#34;using-the-user-configuration-file使用用户配置文件&#34;&gt;Using the user configuration file(使用用户配置文件) &lt;a href=&#34;#using-the-user-configuration-file%e4%bd%bf%e7%94%a8%e7%94%a8%e6%88%b7%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;你可以手动编辑用户配置文件，以覆盖全局缓存根的位置，或&lt;code&gt;db&lt;/code&gt;子目录的最大大小，或两者都覆盖。&lt;/p&gt;
&lt;p&gt;按照以下步骤编辑用户配置文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位&lt;code&gt;.upmconfig.toml&lt;/code&gt;用户配置文件。要找到文件位置，请参阅配置文件。如果文件不存在，则创建一个空文本文件。&lt;/li&gt;
&lt;li&gt;要覆盖全局缓存根的位置，添加&lt;code&gt;cacheRoot&lt;/code&gt;键，并将其值设置为自定义位置的绝对路径。&lt;strong&gt;重要提示&lt;/strong&gt;：在TOML文件中设置Windows路径时，使用正斜杠(&lt;code&gt;/&lt;/code&gt;)或双反斜杠(&lt;code&gt;\\&lt;/code&gt;)。不要使用单个反斜杠(&lt;code&gt;\&lt;/code&gt;)，因为它们是标记转义序列的特殊字符，可能导致TOML解析错误。&lt;/li&gt;
&lt;li&gt;要覆盖&lt;code&gt;db&lt;/code&gt;子目录的最大大小，添加&lt;code&gt;maxCacheSize&lt;/code&gt;键，并将其值设置为表示字节数的正整数。例如，要将大小设置为5GB，请赋值&lt;code&gt;5000000000&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在设置任一属性后，你无需重新启动Unity编辑器或Hub，更改即可生效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cacheRoot&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E:\\Unity\\cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCacheSize&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;5000000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;macOS and Linux example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cacheRoot&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/dev/external/shared/Unity/cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCacheSize&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;5000000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-environment-variables使用环境变量&#34;&gt;Using environment variables(使用环境变量) &lt;a href=&#34;#using-environment-variables%e4%bd%bf%e7%94%a8%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在涉及自动化或持续集成的场景中，在用户配置文件或&lt;strong&gt;偏好设置&lt;/strong&gt;窗口中配置设置可能不太实际，而且更容易出错。在这种情况下，你可能会考虑使用环境变量来配置全局缓存及其附属缓存的设置。下列环境变量可供使用：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Environment variable&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_CACHE_ROOT&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定全局缓存的位置（包含注册表数据和未压缩包缓存的根文件夹）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_NPM_CACHE_PATH&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定您希望包管理器用作其注册表数据缓存的位置的绝对路径。默认情况下，这是全局缓存根目录下的&lt;code&gt;db&lt;/code&gt;子目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_CACHE_PATH&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定您希望包管理器存储包 tarball 的未压缩内容的位置的绝对路径。默认情况下，这是全局缓存根目录下的&lt;code&gt;packages&lt;/code&gt;子目录。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_ENABLE_GIT_LFS_CACHE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定任何非空（&amp;quot;&amp;quot;）的值以启用 Git LFS 缓存。默认情况下，包管理器使用全局缓存根目录下的&lt;code&gt;git-lfs&lt;/code&gt;子目录，除非您使用&lt;code&gt;UPM_GIT_LFS_CACHE_PATH&lt;/code&gt;环境变量指定了不同的路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_GIT_LFS_CACHE_PATH&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指定您希望包管理器存储 Git LFS 缓存的位置的绝对路径。通过设置此路径，您自动启用 Git LFS 缓存。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;UPM_MAX_CACHE_SIZE&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;以字节为单位，以正整数指定注册表数据缓存（&lt;code&gt;db&lt;/code&gt;子目录）的最大大小。例如，要将大小设置为5GB，分配一个值为&lt;code&gt;5000000000&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;重要提示&lt;/strong&gt;：当你使用此方法时，请遵循以下指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在设置环境变量之前，如果Unity编辑器和Unity Hub已经在运行，请关闭它们。&lt;/li&gt;
&lt;li&gt;在设置环境变量的同一个命令提示符或终端会话中启动Unity编辑器或Unity Hub。&lt;/li&gt;
&lt;li&gt;如果你在前述表格中设置了任何环境变量，每次启动Unity时都必须设置它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关设置环境变量的信息，请参阅你的操作系统的文档。要了解环境变量的介绍，请参考 &lt;a href=&#34;https://en.wikipedia.org/wiki/Environment_variable&#34;&gt;https://en.wikipedia.org/wiki/Environment_variable&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;customize-the-asset-store-cache-location自定义资源商店缓存位置&#34;&gt;Customize the Asset Store cache location(自定义资源商店缓存位置) &lt;a href=&#34;#customize-the-asset-store-cache-location%e8%87%aa%e5%ae%9a%e4%b9%89%e8%b5%84%e6%ba%90%e5%95%86%e5%ba%97%e7%bc%93%e5%ad%98%e4%bd%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包管理器为你从&lt;strong&gt;资源商店&lt;/strong&gt;获取的包维护一个缓存。包管理器将此缓存存储在一个默认位置，你可以覆盖这个位置。&lt;/p&gt;
&lt;p&gt;你可能有多种原因想要覆盖资源商店缓存的位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你想节省内部驱动器的空间。&lt;/li&gt;
&lt;li&gt;你想将缓存存储在一个共享驱动器上，其他人可以访问。&lt;/li&gt;
&lt;li&gt;你想将缓存存储在不在系统目录中的文件夹。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，包管理器对其资源商店包缓存使用以下文件夹结构：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;asset-store-cache-root&amp;gt;
  └── Asset Store-5.x
      └── &amp;lt;subfolders for Asset Store vendors&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;关于资源商店包缓存根的默认位置的信息，请参考已下载资产文件的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：包管理器为注册表包和资源商店包维护独立的缓存。关于覆盖全局缓存的默认位置的信息，请参考自定义全局缓存。&lt;/p&gt;
&lt;p&gt;要覆盖包管理器对资源商店包的缓存的默认位置，你可以使用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐使用首选项窗口方法，因为它既简单又持久。当你使用该方法更改包缓存位置时，Unity会为当前会话和未来的会话存储偏好设置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ASSETSTORE_CACHE_PATH&lt;/code&gt;环境变量方法不是永久性的，但高级用户在特定的使用情况下可能会发现它更可取。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;important-notes-before-you-begin开始前的重要提示&#34;&gt;Important notes before you begin(开始前的重要提示) &lt;a href=&#34;#important-notes-before-you-begin%e5%bc%80%e5%a7%8b%e5%89%8d%e7%9a%84%e9%87%8d%e8%a6%81%e6%8f%90%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无论你选择哪种方法，改变缓存位置都会告诉包管理器往后使用那个位置。包管理器在原始位置存储的现有包仍会保留在那个文件夹结构中。&lt;/li&gt;
&lt;li&gt;如果你使用环境变量方法更改了缓存位置，那么你就不能使用首选项窗口来更改位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-the-preferences-window使用首选项窗口&#34;&gt;Using the Preferences window(使用首选项窗口) &lt;a href=&#34;#using-the-preferences-window%e4%bd%bf%e7%94%a8%e9%a6%96%e9%80%89%e9%a1%b9%e7%aa%97%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要使用首选项窗口覆盖资源商店包缓存的默认位置，请按照以下步骤操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用以下方法之一打开首选项窗口：
&lt;ul&gt;
&lt;li&gt;使用Unity编辑器的菜单，如首选项中所述。&lt;/li&gt;
&lt;li&gt;打开包管理器窗口，点击设置图标 &lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/iconSettings-1712903391407-7.png&#34; alt=&#34;img&#34;&gt;，然后选择 &lt;strong&gt;首选项&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;包管理器&lt;/strong&gt; 类别。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;我的资源&lt;/strong&gt; 下，打开 &lt;strong&gt;缓存位置&lt;/strong&gt; 旁边的菜单 &lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/package-manager-folder-1712903396270-10.png&#34; alt=&#34;img&#34;&gt;.&lt;/li&gt;
&lt;li&gt;选择 &lt;strong&gt;更改位置&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;为资源商店包缓存选择一个新的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/preferences-package-manager-1712903398996-13.png&#34; alt=&#34;The Preferences window with the Package Manager category selected&#34;&gt;&lt;/p&gt;
&lt;p&gt;选择首选项窗口的包管理器类别&lt;/p&gt;
&lt;h2 id=&#34;using-the-environment-variable使用环境变量&#34;&gt;Using the environment variable(使用环境变量) &lt;a href=&#34;#using-the-environment-variable%e4%bd%bf%e7%94%a8%e7%8e%af%e5%a2%83%e5%8f%98%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在涉及自动化或持续集成的场景中，通过配置文件或首选项窗口配置设置的方式显得不够实用，而且更容易出错。在这样的场景下，你可能会考虑设置&lt;code&gt;ASSETSTORE_CACHE_PATH&lt;/code&gt;环境变量，以覆盖资源商店包缓存的默认位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：在使用此方法时，请遵循以下指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在设置环境变量之前，如果Unity编辑器和Unity Hub已经在运行，则关闭它们。&lt;/li&gt;
&lt;li&gt;从设置环境变量的同一命令提示符或终端会话中启动Unity编辑器或Unity Hub。&lt;/li&gt;
&lt;li&gt;每次启动Unity时，你都必须设置&lt;code&gt;ASSETSTORE_CACHE_PATH&lt;/code&gt;环境变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于设置环境变量的信息，请参照你的操作系统的文档。关于环境变量的入门介绍，请参考https://en.wikipedia.org/wiki/Environment_variable&lt;/p&gt;
&lt;h1 id=&#34;using-private-repositories-with-https-git-urls使用https-git-url访问私有仓库&#34;&gt;Using private repositories with HTTPS Git URLs(使用HTTPS Git URL访问私有仓库) &lt;a href=&#34;#using-private-repositories-with-https-git-urls%e4%bd%bf%e7%94%a8https-git-url%e8%ae%bf%e9%97%ae%e7%a7%81%e6%9c%89%e4%bb%93%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你在终端中使用Git通过HTTPS访问私有仓库时，Git会提示你输入用户名和密码。然后，Git将这些凭证提交给服务器，如果服务器接受这些凭证并允许访问仓库，Git就会继续执行命令。&lt;/p&gt;
&lt;p&gt;当Unity包管理器使用Git URL获取包时，没有终端供用户输入凭证。因此，当服务器向Git请求凭证时，Git不会发出提示，而是向Unity包管理器报告错误。为了解决这个问题，你必须为Git配置一个Git凭证助手，而且该助手必须已经为该仓库加载了所需的凭证。如果凭证有效，Git可以成功执行Unity包管理器发出的命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：使用SSH协议的Git URL，包括SCP样式的语法时，Git凭证助手无效。&lt;/p&gt;
&lt;h2 id=&#34;git-credential-managergit凭证管理器&#34;&gt;Git Credential ManagerGit(凭证管理器) &lt;a href=&#34;#git-credential-managergit%e5%87%ad%e8%af%81%e7%ae%a1%e7%90%86%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;尽管Git支持多个凭证助手来存储凭证，但Git凭证管理器（GCM）仍是推荐的凭证助手。GCM灵活，易于安装，并得到了积极的支持。它基于.NET构建，这意味着它可以在支持.NET的Windows、macOS和Linux发行版上运行。&lt;/p&gt;
&lt;p&gt;默认情况下，GCM使用Windows凭证管理器（在Windows上）和macOS钥匙串（在macOS上）作为配置的凭证存储。GCM没有为Linux配置默认的存储库。关于GCM支持的不同凭证存储配置的更多信息，请参考GCM凭证存储文档。&lt;/p&gt;
&lt;h2 id=&#34;prerequisites先决条件&#34;&gt;Prerequisites(先决条件) &lt;a href=&#34;#prerequisites%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在你可以使用HTTPS URL从私有Git仓库获取包之前，确保你已经安装了GCM。&lt;/p&gt;
&lt;p&gt;Git for Windows安装程序包含一个步骤，可以自动安装和配置GCM。如果你在以下情况下，你也可以单独安装GCM：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Windows上用其他方法安装Git。&lt;/li&gt;
&lt;li&gt;使用macOS或Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于安装GCM的更多信息，请参考GCM安装指南。&lt;/p&gt;
&lt;h2 id=&#34;procedure操作步骤&#34;&gt;Procedure(操作步骤) &lt;a href=&#34;#procedure%e6%93%8d%e4%bd%9c%e6%ad%a5%e9%aa%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;遵循以下步骤来访问使用HTTPS Git URL的私有仓库中的包：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在终端中运行以下命令，配置Git使用GCM：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global credential.helper manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过终端一次性访问仓库。例如，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git ls-remote --heads https://&amp;lt;url-to-repository&amp;gt; HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当Git提示你时，输入你的凭证。如果你的用户账户可以访问远程Git服务器，且服务器接受你的凭证，那么Git凭证助手将会安全地存储你的凭证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用Unity包管理器。当需要时，它将使用你存储的凭证，从你有权限访问的基于HTTPS的仓库获取包。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;using-passphrase-protected-ssh-keys-with-ssh-git-urls使用口令保护的ssh密钥与ssh-git-url配合使用&#34;&gt;Using passphrase-protected SSH keys with SSH Git URLs(使用口令保护的SSH密钥与SSH Git URL配合使用) &lt;a href=&#34;#using-passphrase-protected-ssh-keys-with-ssh-git-urls%e4%bd%bf%e7%94%a8%e5%8f%a3%e4%bb%a4%e4%bf%9d%e6%8a%a4%e7%9a%84ssh%e5%af%86%e9%92%a5%e4%b8%8essh-git-url%e9%85%8d%e5%90%88%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你使用Git通过SSH访问私有仓库时，Git用SSH客户端和服务器建立了一个安全连接。在建立连接时，Git在SSH握手阶段使用了你配置的SSH密钥。在此阶段，SSH客户端需要能够读取你的密钥。然而，如果你用口令对你的密钥进行了加密，SSH客户端就无法直接使用这个密钥。在这种情况下，终端会提示你输入口令。在你输入正确的口令后，SSH连接就完成了，Git命令会使用这个连接进行运行。&lt;/p&gt;
&lt;p&gt;当Unity包管理器使用Git URL获取包时，没有界面供你输入SSH客户端请求的凭证。因此，如果你用口令保护了你的SSH密钥文件，SSH客户端就无法建立连接，Git就会报告错误。为了解决这个问题，必须有一个SSH认证代理正在运行，并已加载SSH密钥，这样SSH客户端就可以在不需要口令的情况下使用它。&lt;/p&gt;
&lt;p&gt;具体方法根据你的操作系统和你使用的SSH客户端而异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你使用Windows 10或更高版本及其内置的OpenSSH客户端，请参考在Windows（OpenSSH）上自动加载SSH密钥。&lt;/li&gt;
&lt;li&gt;如果你使用Windows和PuTTY及其认证代理（Pageant），请参考在Windows（PuTTY）上自动加载SSH密钥。&lt;/li&gt;
&lt;li&gt;如果你使用macOS，请参考在macOS上自动加载SSH密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;loading-ssh-keys-automatically-on-windows-openssh在windows上自动加载ssh密钥openssh&#34;&gt;Loading SSH keys automatically on Windows (OpenSSH)在Windows上自动加载SSH密钥（OpenSSH) &lt;a href=&#34;#loading-ssh-keys-automatically-on-windows-openssh%e5%9c%a8windows%e4%b8%8a%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bdssh%e5%af%86%e9%92%a5openssh&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你使用Windows及其内置的OpenSSH客户端，按照以下的步骤配置OpenSSH客户端，这样你就可以在不提示口令的情况下使用你的SSH密钥。&lt;/p&gt;
&lt;h2 id=&#34;prerequisites前提条件&#34;&gt;Prerequisites(前提条件) &lt;a href=&#34;#prerequisites%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Windows 10或更晚的版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin在你开始之前&#34;&gt;Before you begin(在你开始之前) &lt;a href=&#34;#before-you-begin%e5%9c%a8%e4%bd%a0%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;检查是否有任何已存在的SSH密钥。请参考GitHub Docs文章，检查现有的SSH密钥。&lt;/p&gt;
&lt;p&gt;如果你还没有SSH密钥：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照GitHub Docs文章，生成新的SSH密钥来创建一个。&lt;/li&gt;
&lt;li&gt;按照GitHub Docs文章，将新的SSH密钥添加到你的GitHub账户，添加新的SSH密钥到你的GitHub账户。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;procedure步骤&#34;&gt;Procedure(步骤) &lt;a href=&#34;#procedure%e6%ad%a5%e9%aa%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查&lt;code&gt;C:\Users\&amp;lt;YourUserName&amp;gt;\.ssh\config&lt;/code&gt;是否存在。&lt;strong&gt;注意&lt;/strong&gt;：在一些应用程序中，如Git Bash，&lt;code&gt;.ssh&lt;/code&gt;是一个隐藏的子目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;C:\Users\&amp;lt;YourUserName&amp;gt;\.ssh\config&lt;/code&gt;不存在，则创建它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向&lt;code&gt;C:\Users\&amp;lt;YourUserName&amp;gt;\.ssh\config&lt;/code&gt;中添加以下内容，来在认证代理中设置要加载的密钥，并指定目标服务器的使用。确保你在标记为&lt;code&gt;Host *&lt;/code&gt;的任何全局设置之前添加这个条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SERVER_NAME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentitiesOnly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FILE_PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;是使用&lt;code&gt;IdentityFile&lt;/code&gt;指定文件的服务器。一个示例值是&lt;code&gt;github.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FILE_PATH&lt;/code&gt;是你创建的SSH文件的完全限定路径。一个示例值是&lt;code&gt;C:\Users\&amp;lt;YourUserName&amp;gt;\.ssh\&amp;lt;FILE&amp;gt;&lt;/code&gt;，其中&lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt;可能是&lt;code&gt;id_rsa&lt;/code&gt;，&lt;code&gt;id_ecdsa&lt;/code&gt;，&lt;code&gt;id_ed25519&lt;/code&gt;，或一个自定义名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;github&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentitiesOnly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Users&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;user1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id_ed25519&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开Windows PowerShell，确保你选择&lt;strong&gt;以管理员身份运行&lt;/strong&gt;来打开它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过运行以下命令，配置SSH认证代理服务，以便它每次你重启电脑时启动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-Service ssh-agent | Set-Service -StartupType Automatic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行以下命令以启动服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Start-Service ssh-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行以下命令以检查服务是否运行，并确认&lt;code&gt;Status&lt;/code&gt;的值为&lt;code&gt;Running&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Get-Service ssh-agent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将你的密钥文件加载到&lt;code&gt;ssh-agent&lt;/code&gt;中，将&lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt;替换为你的密钥实际的文件名，然后在提示时输入你的密码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add $env:USERPROFILE\.ssh\&amp;lt;FILE&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add $env:USERPROFILE\.ssh\id_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确保Git使用Windows OpenSSH客户端，而不是Git附带的SSH客户端，可以使用以下任一方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于系统范围的配置，创建一个名为&lt;code&gt;GIT_SSH_COMMAND&lt;/code&gt;的环境变量，其值为&lt;code&gt;C:/Windows/System32/OpenSSH/ssh.exe&lt;/code&gt;。&lt;strong&gt;重要提示&lt;/strong&gt;：确保你在路径中使用正斜杠。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要设置特定范围的配置，可以在终端中运行以下&lt;code&gt;git config&lt;/code&gt;命令。可以参考git config文档了解详细信息。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config --global core.sshCommand C:/Windows/System32/OpenSSH/ssh.exe
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重要&lt;/strong&gt;: 确保你在路径中使用正斜杠。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在，你可以使用Unity包管理器通过使用带有密码保护的SSH密钥从该Git仓库中获取包了。&lt;/p&gt;
&lt;h1 id=&#34;loading-ssh-keys-automatically-on-windows-putty在windows上自动加载ssh密钥putty&#34;&gt;Loading SSH keys automatically on Windows (PuTTY)在Windows上自动加载SSH密钥（PuTTY） &lt;a href=&#34;#loading-ssh-keys-automatically-on-windows-putty%e5%9c%a8windows%e4%b8%8a%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bdssh%e5%af%86%e9%92%a5putty&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你使用PuTTY及其身份验证代理（Pageant）而非Windows内置的OpenSSH客户端，请按照以下步骤操作。例如，如果你使用SourceTree作为你的Git客户端，它会自带PuTTY（和Pageant）供你使用。&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin开始之前&#34;&gt;Before you begin(开始之前) &lt;a href=&#34;#before-you-begin%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;确保你已安装了包含Pageant的PuTTY套件。如果没有安装，可以在https://www.putty.org/ 下载。&lt;/p&gt;
&lt;p&gt;检查你是否有任何现有的SSH密钥。参考GitHub文档文章，检查现有的SSH密钥。&lt;/p&gt;
&lt;p&gt;如果你没有SSH密钥：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;strong&gt;PuTTYgen&lt;/strong&gt;应用生成一个私钥/公钥对，将其保存为私钥。参考PuTTY用户手册中的使用PuTTYgen，PuTTY密钥生成器。&lt;/li&gt;
&lt;li&gt;按照GitHub文档文章，将新的SSH密钥添加到你的GitHub账户。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;procedure操作步骤-1&#34;&gt;Procedure(操作步骤) &lt;a href=&#34;#procedure%e6%93%8d%e4%bd%9c%e6%ad%a5%e9%aa%a4-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;按照以下步骤在Windows上自动加载密钥和口令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从PuTTY文件夹启动Pageant：&lt;strong&gt;开始菜单&lt;/strong&gt; &amp;gt; &lt;strong&gt;所有程序&lt;/strong&gt; &amp;gt; &lt;strong&gt;PuTTY&lt;/strong&gt; &amp;gt; &lt;strong&gt;Pageant&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在系统托盘中找到Pageant图标. &lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-19-unity-document-3/upm-pageant.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;li&gt;在系统托盘中右键点击Pageant图标并选择&lt;strong&gt;查看密钥&lt;/strong&gt;。&lt;strong&gt;Pageant密钥列表&lt;/strong&gt;窗口会打开。&lt;/li&gt;
&lt;li&gt;点击&lt;strong&gt;添加密钥&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;文件资源管理器&lt;/strong&gt;窗口来选择你要加载的SSH密钥文件。确保选择的文件是&lt;code&gt;.ppk&lt;/code&gt;扩展名，然后点击&lt;strong&gt;打开&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果该密钥受到口令保护，输入你的口令。&lt;/li&gt;
&lt;li&gt;确保你选择的密钥现在已经在&lt;strong&gt;Pageant密钥列表&lt;/strong&gt;窗口中列出。现在可在任何你的PuTTY会话中连接到任何服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你可能已将Git配置为使用PuTTY的&lt;code&gt;plink.exe&lt;/code&gt;程序。检查当使用SSH密钥时Git是否使用Pageant：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查是否存在&lt;code&gt;GIT_SSH_COMMAND&lt;/code&gt;环境变量。如果没有，创建它。&lt;/li&gt;
&lt;li&gt;将其值设置为PuTTY的&lt;code&gt;plink.exe&lt;/code&gt;文件的完全限定路径。默认位置为&lt;code&gt;&amp;quot;C:\Program Files\PuTTY\plink.exe&amp;quot;&lt;/code&gt;。&lt;strong&gt;重要&lt;/strong&gt;: 如果路径包含空格，确保你使用引号将值括起来。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要在启动时自动加载私钥：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开开始菜单并右键点击&lt;strong&gt;Pageant&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;更多&lt;/strong&gt; &amp;gt; &lt;strong&gt;打开文件位置&lt;/strong&gt;。&lt;strong&gt;文件资源管理器&lt;/strong&gt;窗口会打开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右键点击&lt;strong&gt;Pageant&lt;/strong&gt;并选择&lt;strong&gt;属性&lt;/strong&gt;。&lt;strong&gt;Pageant属性&lt;/strong&gt;窗口会打开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新&lt;strong&gt;目标&lt;/strong&gt;字段，通过添加你想在启动时加载的私钥的完全路径。每个密钥之间用空格分隔。例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Program Files\PuTTY\pageant.exe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:\Users\user1\myKeys\privatekey.ppk&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择&lt;strong&gt;应用&lt;/strong&gt;然后选择&lt;strong&gt;确定&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过打开命令行并在你的仓库中运行&lt;code&gt;git&lt;/code&gt;命令来测试你的配置，以确保无需输入口令就可以完成操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当Pageant运行且你输入了口令后，你可以使用Unity包管理器通过使用口令保护的SSH密钥从那个Git仓库中获取包。&lt;/p&gt;
&lt;p&gt;下次当Pageant启动时，如果它受到口令保护，它会提示你输入口令。&lt;/p&gt;
&lt;p&gt;要在Windows启动时自动加载Pageant，参考微软支持文章，将应用添加到Windows 10启动时自动运行。&lt;/p&gt;
&lt;h1 id=&#34;loading-ssh-keys-automatically-on-macos在macos上自动加载ssh密钥&#34;&gt;Loading SSH keys automatically on macOS(在macOS上自动加载SSH密钥) &lt;a href=&#34;#loading-ssh-keys-automatically-on-macos%e5%9c%a8macos%e4%b8%8a%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bdssh%e5%af%86%e9%92%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你使用macOS，按照以下步骤配置OpenSSH客户端，这样你就可以在不出现提示的情况下使用受口令保护的SSH密钥。&lt;/p&gt;
&lt;h2 id=&#34;prerequisites前提条件-1&#34;&gt;Prerequisites(前提条件) &lt;a href=&#34;#prerequisites%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;macOS 10.13或更高版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin开始之前-1&#34;&gt;Before you begin(开始之前) &lt;a href=&#34;#before-you-begin%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;检查是否有任何现有的SSH密钥。参考GitHub文档文章，检查现有的SSH密钥。&lt;/p&gt;
&lt;p&gt;如果你没有SSH密钥：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照GitHub文档文章，生成一个新的SSH密钥来创建一个。&lt;/li&gt;
&lt;li&gt;按照GitHub文档文章，将新的SSH密钥添加到你的GitHub账户中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;procedure操作步骤-2&#34;&gt;Procedure(操作步骤) &lt;a href=&#34;#procedure%e6%93%8d%e4%bd%9c%e6%ad%a5%e9%aa%a4-2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查你的家目录&lt;code&gt;.ssh&lt;/code&gt;子目录是否包含一个&lt;code&gt;config&lt;/code&gt;文件。&lt;strong&gt;注意&lt;/strong&gt;：&lt;code&gt;.ssh&lt;/code&gt;是一个隐藏子目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;~/.ssh/config&lt;/code&gt;文件不存在，创建它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将以下内容添加到&lt;code&gt;~/.ssh/config&lt;/code&gt;，以指定在认证代理中加载的密钥，并指明目标服务器的使用。确保你在标记为&lt;code&gt;Host *&lt;/code&gt;的全局设置之前添加此条目。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SERVER_NAME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;UseKeychain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentitiesOnly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityFile&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FILE_PATH&lt;/span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SERVER_NAME&lt;/code&gt;是使用&lt;code&gt;IdentityFile&lt;/code&gt;指定文件的服务器。一个示例值是&lt;code&gt;github.com&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FILE_PATH&lt;/code&gt;是你创建的SSH文件的路径。一个示例值是&lt;code&gt;~/.ssh/&amp;lt;FILE&amp;gt;&lt;/code&gt;，其中&lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt;可能是&lt;code&gt;id_rsa&lt;/code&gt;、&lt;code&gt;id_ecdsa&lt;/code&gt;、&lt;code&gt;id_ed25519&lt;/code&gt;或自定义名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;github&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;com&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;UseKeychain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentitiesOnly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;IdentityFile&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;~/&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ssh&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id_ed25519&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开终端应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将你的密钥文件加载到&lt;code&gt;ssh-agent&lt;/code&gt;中，将&lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt;替换为你的密钥的实际文件名，然后在提示时输入你的口令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add ~/.ssh/&amp;lt;FILE&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-add ~/.ssh/id_ed25519
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置完成。macOS默认启动&lt;code&gt;ssh-agent&lt;/code&gt;，所以你现在可以使用Unity包管理器通过你的受口令保护的SSH密钥从那个Git仓库获取包。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity中文版-Unity&#39;s Package Manager(一)(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/17/2023-07-17-unity-Documents-2/</link>
      <pubDate>Mon, 17 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/17/2023-07-17-unity-Documents-2/</guid>
      <description>&lt;p&gt;翻译Unity中文版的初衷是因为官方提供的中文版存在缺陷，而且翻译的不全。现在基于Unity2023.2版本对官方文档进行翻译。&lt;/p&gt;
&lt;h1 id=&#34;unitys-package-manager一&#34;&gt;Unity’s Package Manager(一) &lt;a href=&#34;#unitys-package-manager%e4%b8%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;包是一个容器，存储各种类型的特征或资产，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编辑器工具和库，如文本编辑器，动画查看器或测试框架。&lt;/li&gt;
&lt;li&gt;运行时工具和库，如Physics API或图形管道。&lt;/li&gt;
&lt;li&gt;资产集合，如纹理或动画。&lt;/li&gt;
&lt;li&gt;项目模板，以与他人共享常见的项目类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过Package Manager，packages为Unity提供了广泛的增强功能。为了帮助查找和使用这些包，Package Manager的窗口提供了可以一起使用的包集合，称为&lt;em&gt;特性集&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在Editor中，你可以通过此菜单访问Package Manager窗口：&lt;strong&gt;Window&lt;/strong&gt; &amp;gt; &lt;strong&gt;Package Manager&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Package Manager还支持管理你从Unity &lt;strong&gt;Asset Store&lt;/strong&gt; 下载或导入的包。&lt;/p&gt;
&lt;p&gt;Unity提供了三个Package Manager接口：Package Manager窗口，Scripting API，和manifest文件。下表包含了对每个接口的介绍，以及更多信息。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Topic&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;How Unity works with packages(Unity如何与包进行协作)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;了解一下Unity的Package Manager的概览。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Concepts(概念)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;学习Package Manager的原理和特性，包括版本，manifests，注册表，状态，源，包生命周期，依赖和解析等概念。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Package Manager window(包管理器窗口)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在你的项目中查找和管理包，并解决包依赖性的冲突。Package Manager提供了一个用户界面，可以直接修改项目的manifest。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scripting API for packages(包的脚本编程接口)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用脚本API与Package Manager进行交互，使用C# &lt;strong&gt;脚本&lt;/strong&gt;。查看样本，了解如何查询包注册表，安装，嵌入和移除包，以及使用各种标准列出包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Project manifest(项目清单)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;了解Unity Package Manager所读取的文件，以便它能够计算要检索和加载的包的列表。参见Package manifest。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Inspecting packages(查看包内容)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用专用的&lt;strong&gt;Inspector&lt;/strong&gt;窗口查看任何包manifest。使用此窗口直接编辑嵌入或本地包的包manifest。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scoped Registries(作用域注册表)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;学习如何设置或访问自定义的注册服务器。使用此注册服务器来托管和分发（或使用）自定义包，除了Unity提供的注册表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Configuration(配置)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;学习如何配置范围注册认证，解决网络问题，自定义缓存位置等等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Resolution and conflict(解析和冲突)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;学习包管理器如何确定项目的直接和&lt;strong&gt;间接依赖性&lt;/strong&gt;，并在从注册表获取最佳版本之前评估所有请求的包版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Troubleshooting(故障排查)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果你的项目的任何包，包括包管理器窗口本身，都无法加载，匹配一个可能的解决方案来解决问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;how-unity-works-with-packages&#34;&gt;How Unity works with packages &lt;a href=&#34;#how-unity-works-with-packages&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当Unity打开一个项目时，Unity包管理器会读取项目清单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;来确定在项目中需要加载哪些包。然后它发送请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到包注册服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于在清单中出现作为依赖项的每个包。然后，包注册器将请求的信息和数据发送回包管理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进而在项目中安装这些包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个项目都有自己的清单，列出了需要作为项目“依赖项”来加载的包。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-15-unity-document-2/upm-overview.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Unity包管理器如何安装包&lt;/p&gt;
&lt;p&gt;向项目添加一个包需要更新项目清单，确保包管理器在依赖项列表中包含该包。尽管你可以直接修改项目清单，但使用包管理器窗口，它可以为你管理项目清单的修改，这会更安全，也更容易。&lt;/p&gt;
&lt;h1 id=&#34;concepts&#34;&gt;Concepts &lt;a href=&#34;#concepts&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这一部分解释了许多有关Unity包管理器功能的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Versions(版本)&lt;/li&gt;
&lt;li&gt;Manifests(清单)&lt;/li&gt;
&lt;li&gt;Registry(注册表)&lt;/li&gt;
&lt;li&gt;Package Management(包管理)&lt;/li&gt;
&lt;li&gt;Package sources(包资源)&lt;/li&gt;
&lt;li&gt;Package states and lifecycle(包状态和生命周期)&lt;/li&gt;
&lt;li&gt;Dependency and resolution(依赖和解析)&lt;/li&gt;
&lt;li&gt;Global cache(全局缓存)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;versions&#34;&gt;Versions &lt;a href=&#34;#versions&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;每个包都有多个版本供选择，标记着该包在其生命周期中的变化。每次开发者更新包，他们都会给它一个新的版本号。包版本的变化告诉你它是否包含一种破坏性改变(主版本)，新的向后兼容功能(次版本)，或者仅有的修复错误(补丁版)，遵循语义版本控制。&lt;/p&gt;
&lt;p&gt;要查看特定包的可用版本列表，请查看查找特定版本。&lt;/p&gt;
&lt;h2 id=&#34;manifests&#34;&gt;Manifests &lt;a href=&#34;#manifests&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;有两种类型的清单文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project manifests(项目清单)
(&lt;code&gt;manifest.json&lt;/code&gt;)储存包管理器需要找到并加载正确包的信息，包括声明为依赖项的包和版本列表。&lt;/li&gt;
&lt;li&gt;Package manifests(包清单)
(&lt;code&gt;package.json&lt;/code&gt;)储存关于特定包的信息，以及包所需的包和版本的列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两种文件都使用JSON（JavaScript 对象表示法）语法。&lt;/p&gt;
&lt;h2 id=&#34;registry&#34;&gt;Registry &lt;a href=&#34;#registry&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在Unity的包管理器领域，包注册表是一个服务器，它存储包内容以及每个包版本的信息（元数据）。Unity维护一个可供分发的官方包的中心注册表。默认情况下，所有项目都使用官方的Unity包注册表，但您可以添加额外的注册表以存储和分发私人包，或者在开发自定义包时对其进行暂存。&lt;/p&gt;
&lt;h2 id=&#34;package-management&#34;&gt;Package Management &lt;a href=&#34;#package-management&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Unity包管理器是一个管理整个包系统的工具。它的主要任务包括以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它与Unity包注册表服务器以及您指定的任何其他注册表进行通信。&lt;/li&gt;
&lt;li&gt;它读取您的项目清单和获取包内容及元数据。&lt;/li&gt;
&lt;li&gt;它安装、升级及卸载包，无论它们是项目的依赖关系还是已安装包中的一种。&lt;/li&gt;
&lt;li&gt;它导入您以前下载或购买的Asset Store包。&lt;/li&gt;
&lt;li&gt;它启用和禁用Unity的内置包。&lt;/li&gt;
&lt;li&gt;它显示每个包的每个版本的信息。&lt;/li&gt;
&lt;li&gt;在项目及其包需要多个包版本时，它解决冲突。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unity包管理器按项目安装样本、工具和资产，而不是在特定机器或设备的所有项目间安装。它使用全局缓存存储下载的包元数据和内容。一旦在项目中安装，Unity将包资产视为项目中的其他任何资产，只是这些资产存储在包文件夹内并且是&lt;strong&gt;不可变&lt;/strong&gt;的。您只能从Local和Embedded包源永久性改变内容。&lt;/p&gt;
&lt;h2 id=&#34;package-sources&#34;&gt;Package sources &lt;a href=&#34;#package-sources&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;源描述了包的来源：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity包管理器在您请求时，会将大多数包从包注册表服务器下载到您计算机上的全局缓存中。这些包是不可变的，所以您可以在项目中使用它们，但您不能修改它们或改变它们的包清单。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Built-in&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这些包允许您启用或禁用Unity的功能（例如，Terrain Physics、Animation等）。它们是不可变的。更多信息，请参见Built-in packages。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Embedded&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;存储在您的项目文件夹内的任何包都是嵌入式的。这个源对应于自定义状态，因为当您开始开发一个自定义包时，您通常会将所有需要的脚本、库、样本和其他资源放在项目文件夹下的一个文件夹中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Local&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;您可以从您的计算机上的任何文件夹中安装一个包（例如，如果您本地克隆了一个开发仓库）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tarball (local)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;您可以从计算机上的tarball文件中安装一个包。包管理器从tarball中提取包并将其存储在缓存中。然而，这些包是不可变的，与从本地文件夹安装的方式不同。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包管理器直接从Git仓库中而不是从包注册服务器安装基于&lt;strong&gt;Git&lt;/strong&gt;的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;要编辑包的包清单，请查看检查包。&lt;/p&gt;
&lt;p&gt;包管理器窗口会显示对应于这些源中的一些的标签。有关更多信息，请查看标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：包管理器将您从&lt;strong&gt;Asset Store&lt;/strong&gt;下载的包存储在一个与全局缓存分开的缓存中。请查看Asset Store包以获取更多信息。&lt;/p&gt;
&lt;h1 id=&#34;package-states-and-lifecycle&#34;&gt;Package states and lifecycle &lt;a href=&#34;#package-states-and-lifecycle&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;从Unity编辑器2021.1版本开始，包在其生命周期中可能会经历以下状态：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-15-unity-document-2/upm-lifecycle_v2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;[][]&lt;/p&gt;
&lt;p&gt;使用Unity包管理器的包生命周期&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Birth&lt;/strong&gt; &lt;strong&gt;(A)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;当包的开发者正在创建包时，它处于&amp;quot;自定义&amp;quot;状态。当它准备好让Unity用户进行测试并提供反馈时，包进入&amp;quot;实验&amp;quot;状态。Unity并不支持实验性的包，并且不保证实验性的包会被完全发布并经过验证，可在生产中安全使用，直到它们进入了发布轨道。实验性的包要么在它们版本的主要部分使用&lt;code&gt;0&lt;/code&gt;，要么在它们版本的修订部分使用&lt;code&gt;-exp.#&lt;/code&gt;后缀。例如，&lt;code&gt;mypackage@0.1.2&lt;/code&gt; 或 &lt;code&gt;mypackage@1.2.3-exp.1&lt;/code&gt;。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Release track&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;一旦包通过了质量测试并且不包含任何实验性特性或功能（包括对实验性包的依赖），它就进入了“预发布”状态，该状态位于发布轨道上。这意味着Unity完全支持它，并承诺在当前的LTS周期结束时（例如2021.3）将它们正式发布。要查看此版本可用的预发布包列表，可以参阅预发布包列表。Unity的发布管理只有在包通过了几个测试阶段和验证过程后，才会给予包“已发布”状态，这也包括适当的文档，更改日志和许可文件的检查。这种状态的包在Unity编辑器中以发布标签出现，并且永远不会使用非数字后缀作为版本的一部分。要查看此版本可用的已发布包列表，可以参阅已发布包。如果包开发者更新或改变一个已发布的包，那个包可能会根据严重性返回到另一个状态。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Type of change:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;New state:&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Version bump:&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;(B)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对API的重大改变导致API的失效&lt;/td&gt;
&lt;td&gt;Experimental&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.2.3&lt;/code&gt; =&amp;gt; &lt;code&gt;2.0.0-exp&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;(C)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;对API的小改动，没有导致API失效，但影响了使用&lt;/td&gt;
&lt;td&gt;Pre-release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.2.3&lt;/code&gt; =&amp;gt; &lt;code&gt;1.3.0-pre&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;(D)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;修复错误，微小变更以及典型的补丁更新中的文档更新&lt;/td&gt;
&lt;td&gt;Released (same state)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.2.3&lt;/code&gt; =&amp;gt; &lt;code&gt;1.2.4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Death&lt;/strong&gt; &lt;strong&gt;(E)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;到达生命周期末期的包在标记为“已弃用”的编辑器中不再受支持。处于该状态的包不应继续使用，因为它们可能失效或不安全。更多信息请参阅弃用包。有些实验性包无需经过发布周期轨道，直接进入已弃用状态。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;包管理器窗口显示与这些状态中的一些相对应的标签。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这些包状态仅适用于Unity内部开发的包。要了解他们特定的流程，请联系第三方包开发者。&lt;/p&gt;
&lt;h1 id=&#34;dependency-and-resolution&#34;&gt;Dependency and resolution &lt;a href=&#34;#dependency-and-resolution&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当你在包管理器窗口工作时，你可以从几个来源安装包（库、本地文件夹或压缩包、Git URL以及名称）。然而，当包管理器从这些来源无缝安装包时，它首先要进行一系列的计算来决定安装哪个版本。它还需要决定安装哪些其他包和版本以支持你选择的包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Direct dependencies直接依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你通过包管理器窗口选择一个包版本进行安装时，你正在向你的项目manifest添加一个“依赖”。这是一个声明，即你需要一个特定版本的某个包才能使项目正常工作。要向项目添加依赖，你需要以&lt;code&gt;包名称@包版本&lt;/code&gt;的形式在&lt;code&gt;&amp;lt;项目根目录&amp;gt;/Packages/manifest.json&lt;/code&gt;文件的依赖属性中添加对包和版本的引用。这些被称为“直接”依赖，因为你的项目直接依赖它们。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Indirect dependencies间接依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包也可以需要其他包才能工作。这些被称为“间接”（或转移）依赖。包开发者在开发过程中将这些添加到包manifest文件的依赖属性（&lt;code&gt;&amp;lt;包根目录&amp;gt;/package.json&lt;/code&gt;）。例如，在下面的图表中，&lt;code&gt;alembic@1.0.7&lt;/code&gt;包依赖于&lt;code&gt;timeline@1.0.0&lt;/code&gt;包，所以timeline包是一个“间接”依赖。反过来，项目依赖于&lt;code&gt;cinemachine@2.6.0&lt;/code&gt;和&lt;code&gt;alembic@1.0.7&lt;/code&gt;包，所以它们都是“直接”依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-15-unity-document-2/upm-dependencies.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该图展示了直接依赖和间接依赖&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version overrides版本覆盖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当你添加一个包版本作为依赖时，该版本并不一定是包管理器安装的版本。原因是包管理器必须考虑你项目中的所有依赖，无论是直接还是间接的。在以下示例中，请求的XR插件管理&lt;strong&gt;包版本是&lt;code&gt;4.0.3&lt;/code&gt;。然而，包管理器安装的版本是&lt;code&gt;4.0.6&lt;/code&gt;，因为另一个包依赖于更高的版本，如信息消息&lt;/strong&gt;(B)所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-15-unity-document-2/upm-solver-visual-cues.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当你在详情面板中点击信息按钮（A）时，会出现一个文本框（B）解释为何安装了这个版本而不是你请求的版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependency graph依赖图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包管理器一次只能安装一个包的版本，所以它必须构建一个依赖图。这个图是项目的每个直接依赖和间接依赖的列表。依赖图决定安装每个包的哪个版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lock file锁定文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当包管理器解决所有版本冲突后，它会将解决方案保存在一个锁定文件中，原因有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定性，确保每次都可靠地安装相同的包。&lt;/li&gt;
&lt;li&gt;效率，减少重新计算依赖图所需的时间和资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;global-cache&#34;&gt;Global cache &lt;a href=&#34;#global-cache&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当Unity包管理器从注册表下载包内容和元数据时，它会将它们存储在全局缓存中。这使得重用和共享包更加高效，并且允许你在离线时安装和更新存储的包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：全局缓存不包含来自&lt;strong&gt;资产商店&lt;/strong&gt;的&lt;code&gt;.unitypackage&lt;/code&gt;格式的包。包管理器将这些类型的包存储在一个单独的缓存中。更多信息，请参考资产商店包。&lt;/p&gt;
&lt;h2 id=&#34;location&#34;&gt;Location &lt;a href=&#34;#location&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;默认情况下，Unity将全局缓存存储在一个根目录中，这个目录取决于操作系统（以及Windows上的用户账户类型）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Operating system&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Default root directory&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows (user account)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;%LOCALAPPDATA%\Unity\cache\upm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;C:\Users\yourname\AppData\Local\Unity\cache\upm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Windows (system user account)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;%ALLUSERSPROFILE%\Unity\cache\upm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;C:\ProgramData\Unity\cache\upm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;macOS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;$HOME/Library/Caches/Unity/upm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/Users/yourname/Library/Caches/Unity/upm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Linux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;$HOME/.cache/Unity/upm&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;/home/yourname/.cache/Unity/upm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You can override the location of this root directory. Refer to Customize the global cache for more information.&lt;/p&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure &lt;a href=&#34;#structure&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;包管理器的全局缓存使用多个子缓存，每个子缓存都有不同的用途。包管理器将这些子缓存存储在全局缓存的文件夹下的子文件夹中：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Subfolder&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;db&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于存储包内容和元数据的注册表数据缓存。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;packages&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;包含从注册表获取的包tarballs的未压缩内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;git-lfs&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果你启用了Git大文件存储（LFS），则包含下载的Git大文件存储（LFS）文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在这些子文件夹中，每个注册表都有自己的路径，以便不同注册表上托管的包不会混淆。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：您可以重写这些文件夹的位置。有关更多信息，请参阅定制全局缓存。&lt;/p&gt;
&lt;h2 id=&#34;size&#34;&gt;Size &lt;a href=&#34;#size&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从Unity编辑器的2023.2.0f1版本开始，注册表数据缓存（&lt;code&gt;db&lt;/code&gt;子文件夹）的大小限制为10 gigabytes (GB)。当达到该限制时，PackageManager会通过剔除最近最少使用的内容（基于最旧的一个程序包安装到项目的日期）来修剪注册表数据缓存。换句话说，PackageManager首先剔除的是您在最早时间内添加到项目中的程序包。然而，尽管PackageManager将这些程序包从缓存中剔除，但它们仍然存在于安装了它们的任何项目中。下次您将这些包添加到其他项目时，PackageManager将从适当的注册表中获取它们，而不是从您的缓存中获取。&lt;/p&gt;
&lt;p&gt;您可以重写注册表数据缓存限制的大小。有关信息，请参考定制全局缓存。&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements &lt;a href=&#34;#requirements&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;运行Unity编辑器进程的用户账户必须对根目录及其内容拥有完全的写入权限。没有这些权限，PackageManager无法在缓存中下载和保存程序包的元数据和内容。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity中文版-Unity2023.2更新日志(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/13/2023-07-13-unity-Documents-1/</link>
      <pubDate>Thu, 13 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/13/2023-07-13-unity-Documents-1/</guid>
      <description>&lt;p&gt;翻译Unity中文版的初衷是因为官方提供的中文版存在缺陷，而且翻译的不全。现在基于Unity2023.2版本对官方文档进行翻译。&lt;/p&gt;
&lt;h1 id=&#34;new-in-unity-20232&#34;&gt;New in Unity 2023.2 &lt;a href=&#34;#new-in-unity-20232&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;release-notes&#34;&gt;Release Notes &lt;a href=&#34;#release-notes&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;要了解更多关于这个Unity版本的新功能、变更和改进，可以参考2023.2版本的发布说明。&lt;/p&gt;
&lt;h2 id=&#34;upgrade-guide&#34;&gt;Upgrade Guide &lt;a href=&#34;#upgrade-guide&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如果你正在将现有的项目从2023.1版本升级，可以阅读升级到2023.2的指南，了解你的项目可能会受到哪些影响。&lt;/p&gt;
&lt;h1 id=&#34;whats-new&#34;&gt;What’s new &lt;a href=&#34;#whats-new&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;了解自2023.1以来在Unity 2023.2中有哪些变化，并查阅受影响区域的文档。&lt;/p&gt;
&lt;h2 id=&#34;accessibility&#34;&gt;Accessibility &lt;a href=&#34;#accessibility&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们新增了一个编辑器窗口，即Accessibility Hierarchy Viewer，它可以展示当前活跃的可访问性结构及其节点。如需访问Accessibility Hierarchy Viewer，你可以去主菜单的 &lt;strong&gt;Window &amp;gt; Accessibility &amp;gt; Accessibility Hierarchy viewer&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;audio&#34;&gt;Audio &lt;a href=&#34;#audio&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们新增了Audio Random Container，可以随机化音频并确保音量、音调、时间和触发器可以设置为非重复间隔，以确保你的游戏永远不会有两次相同的声音。&lt;/li&gt;
&lt;li&gt;在Audio Random Container中我们加入了一个VU表。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authoring-tools&#34;&gt;Authoring Tools &lt;a href=&#34;#authoring-tools&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;2d&#34;&gt;2D &lt;a href=&#34;#2d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们在&lt;strong&gt;Tile Palette&lt;/strong&gt;编辑器窗口中增加了覆盖层支持。&lt;/p&gt;
&lt;h3 id=&#34;2d-physics&#34;&gt;2D Physics &lt;a href=&#34;#2d-physics&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;我们在 &lt;strong&gt;Joint Angular Limits&lt;/strong&gt; gizmo中增加了&lt;code&gt;ArticulationBody.jointPosition&lt;/code&gt;指针线，以便在Scene视图中显示关节的准确位置。&lt;/p&gt;
&lt;h3 id=&#34;editor-and-workflow&#34;&gt;Editor and Workflow &lt;a href=&#34;#editor-and-workflow&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新增了Scene视图的上下文菜单。您现在可以通过右键点击或使用自定义的键盘快捷方式在Scene视图中访问新的上下文菜单。这些菜单由UI Toolkit创建并可以在C#中扩展，提供了轻松访问常用命令的方式。&lt;/li&gt;
&lt;li&gt;在Scene视图的偏好设置中添加了&lt;strong&gt;仅在编辑器处于焦点状态时刷新Scene视图&lt;/strong&gt;的选项。启用此选项可使Scene视图仅在编辑器处于焦点状态时刷新。&lt;/li&gt;
&lt;li&gt;新增了可以用键盘快捷方式进行Animator状态之间切换的功能。&lt;/li&gt;
&lt;li&gt;增加了基本OpenType字体功能的支持。目前，只有字距调整功能是启用的。&lt;/li&gt;
&lt;li&gt;增加了一个新的Cameras覆盖层来替换Camera预览。您可以使用Cameras覆盖层进行相机的第一人称控制，并在Scene视图中管理相机。&lt;/li&gt;
&lt;li&gt;用UI Toolkit版本替换了大部分OS上下文菜单。&lt;/li&gt;
&lt;li&gt;增加了颜色检查器，这是一个用于校准光照和后处理的工具。用户可以通过&lt;strong&gt;GameObject&lt;/strong&gt; &amp;gt; &lt;strong&gt;Rendering&lt;/strong&gt; &amp;gt; &lt;strong&gt;Color Checker Tool&lt;/strong&gt;添加颜色检查器。该工具仅作为光照艺术家的生产工具，并不会在构建中保存。&lt;/li&gt;
&lt;li&gt;启用了编辑器显示不同许可证通知模态框的功能。&lt;/li&gt;
&lt;li&gt;增加了一个&lt;code&gt;PropertyCollectionAttribute&lt;/code&gt;，可以用来实现自定义抽屉的集合。&lt;/li&gt;
&lt;li&gt;使用Camera的平移、缩放和轨迹控制，添加了一个新的灯光放置工具。获取更多信息，请参阅从它的视角查看和控制灯光。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ui-toolkit&#34;&gt;UI Toolkit &lt;a href=&#34;#ui-toolkit&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;现在你可以用一个新的，灵活的运行时绑定系统在创建编辑器或运行时UI时轻松地将数据值连接到UI元素属性。您可以在UI Builder或C#代码中配置数据绑定。&lt;/li&gt;
&lt;li&gt;增加了新的控制元素，例如ToggleButtonGroup、Tab和TabViews，同时对现有的控制元素做出了改进。&lt;/li&gt;
&lt;li&gt;对Button、ListView和TreeView控件增加了图标支持。&lt;/li&gt;
&lt;li&gt;增加了新的UxmlElement和UxmlAttribute属性。在创建自定义控件时，这些属性替换了原有的UxmlFactory和UxmlTraits。这简化了自定义控件的创建，提供了通过C#属性的高效替代方案，无需编写大量的代码。此外，您现在可以像在Inspector中那样为字段创建自定义属性抽屉。&lt;/li&gt;
&lt;li&gt;对UI Builder进行了改进，改进了显示样式属性的驱动情况，优化了画布操作，并进行了其他的增强。更新的UI Builder现在也支持UXML Objects的编写，使其能够编辑MultiColumnTreeView和MultiColumnListView。&lt;/li&gt;
&lt;li&gt;在TextElement和TextField中，增加了Emojis Fallback Support字段，以控制在emoji范围内搜索字符的顺序（主字体vs全局回退）。另外，增加了对OpenType字体功能的基本支持，目前的焦点是启用字距调整功能。&lt;/li&gt;
&lt;li&gt;在UI Builder的Inspector中，为盒模型小部件增加了一个新的Spacing字段。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;textmeshpro&#34;&gt;TextMeshPro &lt;a href=&#34;#textmeshpro&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;增加了基本的Emoji支持。&lt;/li&gt;
&lt;li&gt;添加了基本的OpenType字体功能支持，目前只启用了字距调整功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;graphics&#34;&gt;Graphics &lt;a href=&#34;#graphics&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;批处理计算Skinning：Unity的Skinned Mesh Renderer组件使用计算调度在GPU上并行化顶点变换。Unity 2023.2在所有支持的平台上引入了对Skinned Mesh Renderers的优化。这些优化旨在批处理计算skin和blendshape调度。这可以增加并行变形的顶点数量，并提高角色和 skinned mesh 渲染的GPU性能。&lt;/li&gt;
&lt;li&gt;Progressive GPU Lightmapper现已退出预览，完全得到支持。&lt;/li&gt;
&lt;li&gt;添加了在运行时移动Light Probe位置的API。&lt;/li&gt;
&lt;li&gt;移除了Lighting窗口中的&lt;strong&gt;Auto Generate&lt;/strong&gt;设置。相关API现已废弃。为了在编辑时检查光照贴图，你现在可以选择Scene View Draw Mode，并将&lt;strong&gt;Lighting Data&lt;/strong&gt;设置为&lt;strong&gt;Preview&lt;/strong&gt;。这将展示一个烘焙光照的预览。预览光照贴图是非破坏性的，你可以在烘焙场景之后使用它们。&lt;/li&gt;
&lt;li&gt;添加了&lt;code&gt;BatchCullingContext.cullingFlags&lt;/code&gt;，用于指定是否应裁剪 lightmapped shadow casters。&lt;/li&gt;
&lt;li&gt;为&lt;code&gt;BatchRendererGroup&lt;/code&gt;添加了&lt;code&gt;rendererPriority&lt;/code&gt;支持。&lt;/li&gt;
&lt;li&gt;对构建计算队列上的异步光线追踪加速结构提供了支持。AsyncCompute CommandBuffers现在可以运行&lt;code&gt;CommandBuffer.BuildRayTracingAccelerationStructure&lt;/code&gt;命令。为RenderGraph和Render Graph Viewer添加了&lt;code&gt;RayTracingAccelerationStructure&lt;/code&gt;的支持。&lt;/li&gt;
&lt;li&gt;为Texture2DArrays添加了mipmap限制支持。&lt;/li&gt;
&lt;li&gt;为Texture2DArrays添加了mipmap剥离支持。&lt;/li&gt;
&lt;li&gt;为LoadImage添加了提供tiled EXR图像的支持。&lt;/li&gt;
&lt;li&gt;允许暴露光线追踪加速结构的构建标志，以平衡构建时间与GPU上的光线追踪速度和内存消耗。在创建和构建&lt;code&gt;RayTracingAccelerationStructure&lt;/code&gt;以及在Renderer设置的UI中，都可以从C#中自定义标志。&lt;/li&gt;
&lt;li&gt;为DX12添加了Native Render Pass支持。&lt;/li&gt;
&lt;li&gt;为D3D12（Windows和XBox平台）添加了批处理GPU skinning的支持。&lt;/li&gt;
&lt;li&gt;为粒子尾迹添加了Custom Vertex Streams功能。&lt;/li&gt;
&lt;li&gt;添加了&lt;code&gt;BakeTexture&lt;/code&gt;和&lt;code&gt;BakeTrailsTexture&lt;/code&gt;脚本方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;universal-render-pipeline-urp&#34;&gt;Universal Render Pipeline (URP) &lt;a href=&#34;#universal-render-pipeline-urp&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;要获得URP新功能和改进的完整描述，请参考URP的新功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了跨平台HDR显示支持。HDR显示器能够在更高的亮度差异范围内复制图像，接近自然光照条件。在这些设备上显示的HDR输出可以保留线性光照渲染和HDR图像的对比度和质量。编辑器和Standalone Players现在在所有的渲染管线和能力平台上，包括移动和XR，提供全面的HDR色调映射和显示支持。&lt;/li&gt;
&lt;li&gt;为Probe Volumes的间接照明添加了每个顶点质量级别，使得URP更高效地呈现照明环境。你可能需要在移动设备上进行进一步的优化，因为URP不支持Reflection Probes的Lighting Scenario混合或Lighting Normalization。&lt;/li&gt;
&lt;li&gt;在Motion Blur容量组件中添加了一个名为&lt;strong&gt;Camera And Objects&lt;/strong&gt;的新选项，该选项使用运动向量来模糊比摄像机的曝光时间移动更快的物体。&lt;/li&gt;
&lt;li&gt;添加了对额外定向光源cookies的支持。&lt;/li&gt;
&lt;li&gt;在URP Global Settings中添加了Default Volume Profile字段。&lt;/li&gt;
&lt;li&gt;在Universal Render Pipeline Asset中添加了Volume Profile字段。&lt;/li&gt;
&lt;li&gt;为URP材质添加了Alembic速度运动向量支持。&lt;/li&gt;
&lt;li&gt;为基于只有&lt;strong&gt;Time&lt;/strong&gt;节点的顶点动画的ShaderGraphs添加了自动&lt;strong&gt;TimeBased&lt;/strong&gt;运动向量生成。影响位置的所有其他数据在帧之间必须是常数。&lt;/li&gt;
&lt;li&gt;为使用正交投影的XR渲染和相机添加了对Forward+渲染路径的支持。&lt;/li&gt;
&lt;li&gt;在Forward+渲染路径中添加了对集中渲染的支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;high-definition-render-pipeline-hdrp&#34;&gt;High Definition Render Pipeline (HDRP) &lt;a href=&#34;#high-definition-render-pipeline-hdrp&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;要获得HDRP新功能和改进的完整描述，请参考HDRP的新功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为Decals投影器添加了HDRP路径跟踪器支持。路径跟踪器不支持来自decals的发光。&lt;/li&gt;
&lt;li&gt;增加了在运行时从磁盘流式加载Probe Volume数据的功能。你可以为不同的质量级别启用或禁用磁盘流式加载。&lt;/li&gt;
&lt;li&gt;使HDRP Shader Graph decals兼容透明对象。这意味着你可以使用Shader Graph创建的decals影响透明对象，以构建像雨滴、涟漪、自定义雕刻、玻璃上的污垢效果等程序效果。&lt;/li&gt;
&lt;li&gt;在HDRP物理天空中添加了一个带有星星和天体的夜空。&lt;/li&gt;
&lt;li&gt;为基于物理的天空添加了Shader Graph输出，并添加了控件来创建月亮。&lt;/li&gt;
&lt;li&gt;在Render Graph Viewer中添加了对异步计算pass和同步点的可视化。&lt;/li&gt;
&lt;li&gt;为体积云添加了beer阴影图。&lt;/li&gt;
&lt;li&gt;在HD Render Pipeline Asset中添加了Volume Profile字段。&lt;/li&gt;
&lt;li&gt;为带有彩色透射的薄对象添加了材料类型。&lt;/li&gt;
&lt;li&gt;为Lit ShaderGraphs的材料添加了禁用清漆的选项。&lt;/li&gt;
&lt;li&gt;添加了Global Pass API，你可以使用它在没有任何游戏对象的场景中向渲染管线注入自定义pass。&lt;/li&gt;
&lt;li&gt;为Arbitrary Output Variables (AOV)添加了体积雾全屏调试模式输出。&lt;/li&gt;
&lt;li&gt;添加了Adaptive Probe Volumes (APV)直接从磁盘流式加载数据的能力。这个功能只在具有计算阴影兼容性的设备上可用。&lt;/li&gt;
&lt;li&gt;添加了使用烘焙API独立于光照贴图或反射探针来烘焙Adaptive Probe Volumes (APV)的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;multiplayer&#34;&gt;Multiplayer &lt;a href=&#34;#multiplayer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;netcode-for-gameobjects&#34;&gt;Netcode for GameObjects &lt;a href=&#34;#netcode-for-gameobjects&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在网络对象组件的上下文菜单中添加了&lt;strong&gt;刷新场景中的预设实例&lt;/strong&gt;选项。使用此属性更新场景中存在的预设实例的&lt;code&gt;GlobalObjectIdHash&lt;/code&gt;值，这些预设实例在具有&lt;code&gt;NetworkObject&lt;/code&gt;组件之前就已存在。这个属性影响包含在构建列表中的所有场景。&lt;/li&gt;
&lt;li&gt;添加了&lt;code&gt;NetworkManager&lt;/code&gt;的&lt;code&gt;SetPeerMTU&lt;/code&gt;和&lt;code&gt;GetPeerMTU&lt;/code&gt;方法，以全面控制最大传输单元（MTU）大小。使用它为游戏对象的Netcode中的自定义协议。&lt;/li&gt;
&lt;li&gt;改进了网络预设标识生成（例如，&lt;code&gt;GlobalObjectIdHash&lt;/code&gt;）以修复Unity分配无效值的问题。&lt;/li&gt;
&lt;li&gt;以下方式改进了序列化API和codegen管道:
&lt;ul&gt;
&lt;li&gt;添加了&lt;code&gt;GenerateSerializationForTypeAttribute&lt;/code&gt;方法，你可以将此应用到任何类或方法，以确保特定类型包含在codegen序列化过程中。&lt;/li&gt;
&lt;li&gt;添加了&lt;code&gt;GenerateSerializationForGenericParameterAttribute&lt;/code&gt;方法，你可以使用它来将被&lt;code&gt;NetworkVariable&lt;/code&gt;类型包装的泛型类型包含在codegen过程中。&lt;/li&gt;
&lt;li&gt;暴露了额外的&lt;code&gt;NetworkVariableSerialization&lt;/code&gt;方法，以改进自定义&lt;code&gt;NetworkVariable&lt;/code&gt;的创建，没有任何装箱成本。你可以使用&lt;code&gt;NetworkVariableBase.MarkNetworkBehaviourDirty&lt;/code&gt;方法来将NetworkVariables标记为脏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;泛型&lt;code&gt;NetworkBehaviour&lt;/code&gt;类型中的RPC现在可以序列化类的泛型类型的参数。&lt;/li&gt;
&lt;li&gt;改进了Netcode对32位ARMv7的支持。&lt;/li&gt;
&lt;li&gt;添加了额外的&lt;code&gt;NetworkManager&lt;/code&gt;事件&lt;code&gt;OnServerStarted&lt;/code&gt;、&lt;code&gt;OnServerStopped&lt;/code&gt;、&lt;code&gt;OnClientStarted&lt;/code&gt;和&lt;code&gt;OnClientStopped&lt;/code&gt;，以更好地通知&lt;code&gt;NetworkManager&lt;/code&gt;初始化过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dedicated-server-platform&#34;&gt;Dedicated server platform &lt;a href=&#34;#dedicated-server-platform&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在玩家设置中添加了&lt;strong&gt;专用服务器优化&lt;/strong&gt;选项，启用后，会从服务器构建中剥离所有着色器。启用此选项可以大大减少构建时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;unity-transport&#34;&gt;Unity Transport &lt;a href=&#34;#unity-transport&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Unity传输2.X现在是Unity传输的默认和推荐版本。&lt;/li&gt;
&lt;li&gt;现在可以通过在&lt;code&gt;NetworkSettings.WithNetworkConfigParameters&lt;/code&gt;中新的&lt;code&gt;maxMessageSize&lt;/code&gt;参数配置传输将发送的最大消息大小。这在网络设备处理较大数据包时出错的环境中非常有用（比如某些移动网络或VPN）。该值不包括IP和UDP头，但包括传输本身添加的头（例如，可靠性头）。默认值是1400。注意，建议客户端和服务器配置使用相同的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;package-manager&#34;&gt;Package Manager &lt;a href=&#34;#package-manager&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;changes-to-package-cache-management&#34;&gt;Changes to package cache management &lt;a href=&#34;#changes-to-package-cache-management&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更改了全局缓存的默认位置和结构。&lt;/li&gt;
&lt;li&gt;注册数据缓存现在默认最大限制为10GB。你可以通过自定义全局缓存来覆盖默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;changes-to-the-package-manager-window&#34;&gt;Changes to the Package Manager window &lt;a href=&#34;#changes-to-the-package-manager-window&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加了一个导航面板:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了一个面板，以改进在包子集视图之间的导航。在早期版本中，这些上下文存储在&lt;strong&gt;Packages&lt;/strong&gt;下拉菜单中。&lt;/li&gt;
&lt;li&gt;在包管理器导航面板中添加了&lt;strong&gt;Services&lt;/strong&gt;作为专用条目。&lt;/li&gt;
&lt;li&gt;在导航面板中的&lt;strong&gt;In Project&lt;/strong&gt;下添加了&lt;strong&gt;Updates&lt;/strong&gt;作为嵌套条目。此嵌套视图列出了项目中所有有更新的包。&lt;/li&gt;
&lt;li&gt;在导航面板的My Registries下添加了单独的定位注册表作为嵌套条目。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对列表面板的增强:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;In Project&lt;/strong&gt;上下文的列表面板中添加了一个&lt;strong&gt;Packages - Asset Store&lt;/strong&gt;扩展器，以便你可以在&lt;strong&gt;In Project&lt;/strong&gt;视图中查看和管理Asset Store的包。&lt;/li&gt;
&lt;li&gt;搜索框的位置进行了重新调整，改变了其行为，以便在每个上下文基础上回撷你的搜索词。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对详情面板的增强:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改进了在&lt;strong&gt;My Assets&lt;/strong&gt;上下文中管理包的流程，通过优化详情面板中的操作按钮。最常见的操作作为菜单按钮中的默认操作，其他操作列在菜单中。还添加了&lt;strong&gt;In Project&lt;/strong&gt;标签，明确表示Asset Store包已经导入到你的项目并且是最新的。&lt;/li&gt;
&lt;li&gt;更新了查看Asset Store包时&lt;strong&gt;Import&lt;/strong&gt;按钮的标签。下载更新的Asset Store包后，主操作按钮的标签是&lt;strong&gt;Import update #.# to project&lt;/strong&gt;，所以你需要明确需要将更新导入到你的项目。&lt;/li&gt;
&lt;li&gt;更新了从注册表中安装的包的文档链接的行为。你现在可以右击链接并选择&lt;strong&gt;Open in browser&lt;/strong&gt;或&lt;strong&gt;Open locally&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当你登出并试图查看Asset Store包的详细信息时，添加了一个用你的Unity ID登录的按钮。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他增强:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在查看My Assets上下文时更新了Filters菜单中的值。&lt;/li&gt;
&lt;li&gt;更新了Filters控制的标签，以便显示选定的值而不是上一级别的类别。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;android&#34;&gt;Android &lt;a href=&#34;#android&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;添加了针对Android的Addressables包（&lt;code&gt;com.unity.addressables.android&lt;/code&gt;），为Addressables提供Play Asset Delivery支持。&lt;/li&gt;
&lt;li&gt;通过针对Android的Addressables包添加了纹理压缩格式定向支持，以将多种纹理压缩格式打包到Android资产包中。在安装时，只根据设备的移动GPU构建APK，使得加载和渲染纹理更快，且内存占用更少。&lt;/li&gt;
&lt;li&gt;添加了&lt;code&gt;ApplicationExitInfo&lt;/code&gt; API，提供关于应用程序崩溃和应用程序无响应（ANR）错误的信息。&lt;/li&gt;
&lt;li&gt;进行了以下改进:
&lt;ul&gt;
&lt;li&gt;设置&lt;code&gt;GameActivity&lt;/code&gt;为默认应用程序入口点，以提供对Android和你的应用程序之间交互的更多控制。&lt;/li&gt;
&lt;li&gt;将最低支持的Android版本提高到6.0（API级别23）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;profiler&#34;&gt;Profiler &lt;a href=&#34;#profiler&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Memory Profiler中添加了对AudioClip和Shader的元数据支持。&lt;/li&gt;
&lt;li&gt;在Profiler窗口中添加了一个Highlights模块。&lt;/li&gt;
&lt;li&gt;为CPU Profiler添加了一个新的Inverted Hierarchy视图。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raytracing-api&#34;&gt;Raytracing API &lt;a href=&#34;#raytracing-api&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;射线追踪加速结构构建标志：新的射线追踪加速结构构建标志被引入到Unity的渲染器和RTAS API中。这些标志让你可以控制射线追踪内存使用、RTAS构建时间和射线追踪性能之间的权衡。开发者和艺术家可以使用新的标志来优化他们的场景和渲染器中的射线追踪性能。&lt;/li&gt;
&lt;li&gt;Shader中的内联射线追踪：现在可以在光栅化和计算着色器中使用内联射线追踪，只要是面向具有DXR1.1能力的Windows平台、Xbox Series X/S和Playstation 5。开发者可以从着色器内部发送射线查询，遍历束定的射线追踪加速结构并进行交叉测试。这使他们可以实现各种硬件加速的射线追踪效果和模拟。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shader-graph&#34;&gt;Shader Graph &lt;a href=&#34;#shader-graph&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;添加了UGUI对Shader Graph的支持。Shader Graph现在在URP和HDRP中都为Canvas提供了子目标。UI艺术家可以使用Shader Graph为他们的UI元素创建自定义shader。定义UI元素的整体外观和风格，创建动画UI效果，并定义自定义按钮状态，同时使用更少的纹理内存。&lt;/li&gt;
&lt;li&gt;启用了Shader Graph Canvas主节点，以允许用户在HDRP，URP和Built-in中为Canvas创建UI shader。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;speedtree&#34;&gt;SpeedTree &lt;a href=&#34;#speedtree&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用传输遮罩在HDRP中提高SpeedTree的视觉质量，只在叶子上应用次表面散射。HDRP/Nature/SpeedTree8.shadergraph使用其次表面贴图作为传输遮罩节点，以消除树皮和小枝的非预期光传输。这也修复了过亮的广告牌照明与3D几何图形照明不匹配的问题。&lt;/p&gt;
&lt;h2 id=&#34;splines&#34;&gt;Splines &lt;a href=&#34;#splines&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;您现在可以在Spline对象上存储个性化数据。此外，编辑Inspector中点的界面已得到增强，某些API已向公众开放。当你在处理splines时，现在可以使用新的Scene视图上下文菜单。&lt;/p&gt;
&lt;h2 id=&#34;test-framework&#34;&gt;Test Framework &lt;a href=&#34;#test-framework&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据测试级别启用了重新尝试和重复测试。一旦测试完成了第一次迭代，Editor就会重新尝试或重复测试。将命令行参数传递给Editor以:
&lt;ul&gt;
&lt;li&gt;重复x次运行测试x次数或直到失败。这对测试不稳定的测试很有用。&lt;/li&gt;
&lt;li&gt;重试x，如果测试失败。这将运行测试x次数或直到成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过使用Editor命令行新参数&lt;code&gt;-randomOrderSeed x&lt;/code&gt;，你可以按随机顺序运行测试，其中&lt;code&gt;x&lt;/code&gt;是不同于0的整数。如果在项目中添加了新的测试，通过相同的种子将会保持随机顺序，新的测试将根据随机列表相应地放置。&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;TestFileReferences.json&lt;/code&gt;在播放器的构建步骤上生成，以便稍后由Test runners使用以丰富运行部分的数据。&lt;/li&gt;
&lt;li&gt;UTF版本现在会自动为SRP测试更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;version-control&#34;&gt;Version control &lt;a href=&#34;#version-control&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;添加了一个项目选项，用于支持追踪存在于项目根文件夹之外的磁盘上的包。&lt;/p&gt;
&lt;h2 id=&#34;vfx-graph&#34;&gt;VFX Graph &lt;a href=&#34;#vfx-graph&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在模板窗口中添加了具有预定义效果的VFX Graph资产。你可以将这些模板作为自己效果的起点。&lt;/li&gt;
&lt;li&gt;新增了自定义HLSL块和操作员。自定义HLSL节点让您在粒子模拟期间执行自己的代码。在VFX Graph上下文中，您可以使用操作员进行横向流动，或者使用块进行纵向流动。&lt;/li&gt;
&lt;li&gt;添加了URP Decals与VFX Graph。现在在VFX Graph中支持URP Lit decal输出，使得在URP上创建符合场景照明和材料的惊艳decal效果成为可能。&lt;/li&gt;
&lt;li&gt;在HDRP和URP中为Shader Graph烟雾效果添加照明。这意味着您可以创建使用六方向照明的lit shader的自定义烟雾shader。&lt;/li&gt;
&lt;li&gt;扩展了URP中的Camera Depth和Color buffer行为。这意味着您可以使用深度缓冲区进行基于深度的碰撞，或者采样色彩缓冲区以创建自定义效果。&lt;/li&gt;
&lt;li&gt;在URP中添加了对运动向量的支持。&lt;/li&gt;
&lt;li&gt;对Shader Graph添加了对运动向量的支持。&lt;/li&gt;
&lt;li&gt;新增了使用VFX Graph的Shade Graph集成来使用材料变体工作流覆盖VFX Output中设置的能力。&lt;/li&gt;
&lt;li&gt;启用了VFX instancing，可以公开纹理，网格或图形缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;web-platform-previously-webgl&#34;&gt;Web platform (previously WebGL) &lt;a href=&#34;#web-platform-previously-webgl&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Unity网页构建现在可以利用Emscripten工具链中最新的大小和性能优化。&lt;/li&gt;
&lt;li&gt;增加了支持指定您希望应用程序在运行时启动的浏览器类型及其可执行路径。您可以通过命令行或在&amp;quot;构建设置&amp;quot;窗口中的GUI设置来指定这个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xr&#34;&gt;XR &lt;a href=&#34;#xr&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;新增了对Hololens自动化的支持。&lt;/li&gt;
&lt;li&gt;扩展了Unity在URP，HDRP和内建渲染管线中对色调映射和输出到HDR显示器的集成支持，以支持具有HDR显示器的XR设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UGUI中文教程(自翻译)</title>
      <link>https://www.chenqiaoqian.com/2023/07/09/2023-07-09-unity-ugui/</link>
      <pubDate>Sun, 09 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/09/2023-07-09-unity-ugui/</guid>
      <description>&lt;p&gt;Unity UI 是一组用于开发游戏和应用程序用户界面的工具。它是一个基于 GameObject 的 UI 系统，使用组件和游戏视图来排列、定位和设置用户界面的样式。 您无法使用Unity UI在Unity编辑器中创建或更改用户界面。&lt;/p&gt;
&lt;h3 id=&#34;unity-ui-unity-user-interface&#34;&gt;Unity UI: Unity User Interface &lt;a href=&#34;#unity-ui-unity-user-interface&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Unity UI 是一个用于开发游戏和应用程序用户界面的 UI 工具包。它是一个基于 GameObject 的 UI 系统，使用组件和游戏视图来排列、定位和设置用户界面的样式。 您无法使用Unity UI在Unity编辑器中创建或更改用户界面。&lt;/p&gt;
&lt;p&gt;本文档介绍了 Unity UI 功能，例如创建 Canvas、定位和动画元素、定义用户交互以及自动调整布局大小。&lt;/p&gt;
&lt;h3 id=&#34;canvas&#34;&gt;Canvas &lt;a href=&#34;#canvas&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;canvas画布&#34;&gt;Canvas(画布) &lt;a href=&#34;#canvas%e7%94%bb%e5%b8%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;画布是所有UI元素应该所在的区域。画布是一个带有Canvas组件的游戏对象，所有的UI元素都必须是这种画布的子对象。
使用菜单 GameObject &amp;gt; UI &amp;gt; Image 创建新的UI元素，比如一个Image，如果场景中尚未存在画布，将自动创建一个Canvas。UI元素被创建为此Canvas的子对象。
画布区域在场景视图中显示为矩形。这样可以轻松定位 UI 元素，而无需始终保持游戏视图可见。
Canvas使用EventSystem对象来帮助消息系统。&lt;/p&gt;
&lt;h4 id=&#34;draw-order-of-elements元素绘制顺序&#34;&gt;Draw order of elements(元素绘制顺序) &lt;a href=&#34;#draw-order-of-elements%e5%85%83%e7%b4%a0%e7%bb%98%e5%88%b6%e9%a1%ba%e5%ba%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在Canvas中，UI元素按照它们在Hierarchy中出现的顺序进行绘制。首先绘制第一个子元素，然后是第二个子元素，依此类推。如果两个UI元素重叠，后出现的元素将会覆盖在先出现的元素之上。&lt;/p&gt;
&lt;p&gt;要改变元素覆盖的顺序，只需通过拖动它们在Hierarchy中的位置即可。也可以通过在Transform组件上使用以下方法来控制顺序：SetAsFirstSibling，SetAsLastSibling，和SetSiblingIndex。&lt;/p&gt;
&lt;h4 id=&#34;render-modes渲染模式&#34;&gt;Render Modes(渲染模式) &lt;a href=&#34;#render-modes%e6%b8%b2%e6%9f%93%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Canvas具有渲染模式设置，可以用来将其设置为在屏幕空间或世界空间中渲染。&lt;/p&gt;
&lt;h5 id=&#34;screen-space---overlay屏幕空间---叠加模式&#34;&gt;Screen Space - Overlay(屏幕空间 - 叠加模式) &lt;a href=&#34;#screen-space---overlay%e5%b1%8f%e5%b9%95%e7%a9%ba%e9%97%b4---%e5%8f%a0%e5%8a%a0%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;此渲染模式将UI元素放置在场景顶部的屏幕上进行渲染。如果屏幕尺寸调整或分辨率变化，Canvas将自动改变大小以匹配这些变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_Canvas_Screenspace_Overlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;screen-space---camera屏幕空间-相机模式&#34;&gt;Screen Space - Camera(屏幕空间-相机模式) &lt;a href=&#34;#screen-space---camera%e5%b1%8f%e5%b9%95%e7%a9%ba%e9%97%b4-%e7%9b%b8%e6%9c%ba%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;这与屏幕空间 - 叠加相似，但在这种渲染模式下，Canvas被放置在指定相机前面的一定距离处。UI元素由这台相机渲染，这意味着相机设置会影响UI的外观。如果相机设置为透视图，UI元素将呈现透视效果，透视变形的程度可以通过相机视野调整。如果屏幕尺寸调整，分辨率变化，或相机视锥体变化，Canvas将自动改变大小以匹配这些变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_Canvas_Screenspace_Camera.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;world-space世界空间&#34;&gt;World Space(世界空间) &lt;a href=&#34;#world-space%e4%b8%96%e7%95%8c%e7%a9%ba%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;在这种渲染模式下，Canvas将像场景中的任何其他对象一样运作。Canvas的大小可以通过其Rect Transform手动设置，UI元素将根据3D位置在场景中的其他对象前面或者后面进行渲染。这对于应该成为世界一部分的UI非常有用。这也被称为&amp;quot;diegetic interface&amp;quot;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_Canvas_Worldspace.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;basic-layout&#34;&gt;Basic Layout &lt;a href=&#34;#basic-layout&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;basic-layout基础布局&#34;&gt;Basic Layout(基础布局) &lt;a href=&#34;#basic-layout%e5%9f%ba%e7%a1%80%e5%b8%83%e5%b1%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在本节中，我们将介绍如何相对于Canvas和其他UI元素定位UI元素。如果你想在阅读的时候进行自我测试，你可以通过菜单GameObject -&amp;gt; UI -&amp;gt; Image来创建一个图像。&lt;/p&gt;
&lt;h4 id=&#34;the-rect-tool矩形工具&#34;&gt;The Rect Tool(矩形工具) &lt;a href=&#34;#the-rect-tool%e7%9f%a9%e5%bd%a2%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;每个UI元素在布局时都被表示为一个矩形。这个矩形可以在场景视图中使用工具栏的矩形工具进行操作。矩形工具既可以用于Unity的2D特性，也可以用于UI，事实上，甚至可以用于3D对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_Rect_Tool_Button.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩形工具可以用来移动、调整大小并旋转UI元素。一旦你选中了一个UI元素，你可以通过在矩形内任何地方点击并拖动来移动它。你可以点击边缘或角落并拖动来调整其大小。可以通过将光标悬停在角落稍远的地方，直到鼠标光标看起来像一个旋转符号，然后在任一方向上点击并拖动来旋转元素。&lt;/p&gt;
&lt;p&gt;就像其他工具一样，矩形工具使用工具栏中设置的当前的轴心模式和空间。在使用UI时，通常最好将它们设定为Pivot和Local。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_Pivot_Local_Buttons.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;rect-transform矩形变换&#34;&gt;Rect Transform(矩形变换) &lt;a href=&#34;#rect-transform%e7%9f%a9%e5%bd%a2%e5%8f%98%e6%8d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;形变换是一种新的变换组件，用于所有的UI元素，而不是使用常规的变换组件。、&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_RectTransform.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩形变换拥有常规变换的位置、旋转和缩放，但它也有宽度和高度，用于指定矩形的尺寸。&lt;/p&gt;
&lt;h5 id=&#34;resizing-versus-scaling调整大小与缩放&#34;&gt;Resizing Versus Scaling(调整大小与缩放) &lt;a href=&#34;#resizing-versus-scaling%e8%b0%83%e6%95%b4%e5%a4%a7%e5%b0%8f%e4%b8%8e%e7%bc%a9%e6%94%be&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;当矩形工具用于改变物体的大小时，通常是针对2D系统中的Sprites和3D Objects，它将改变物体的局部尺度。然而，当它被用于带有矩形变换的物体时，它将会改变宽度和高度，而保持本地缩放不变。这种调整大小不会影响字体大小、切片图像的边框等。&lt;/p&gt;
&lt;h5 id=&#34;pivot中心点&#34;&gt;Pivot(中心点) &lt;a href=&#34;#pivot%e4%b8%ad%e5%bf%83%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;旋转，大小和比例修改都是围绕中心点进行的，因此中心点的位置影响旋转，大小调整或缩放的结果。当工具栏的&amp;quot;Pivot&amp;quot;按钮设置为&amp;quot;Pivot&amp;quot;模式时，可以在&amp;quot;Scene View&amp;quot;中移动&amp;quot;Rect Transform&amp;quot;的中心点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_PivotRotate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;anchors锚点&#34;&gt;Anchors(锚点) &lt;a href=&#34;#anchors%e9%94%9a%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;矩形变换包括一个名为锚点的布局概念。在场景视图中，锚点显示为四个小三角形手柄，并且在检查器中也显示锚点信息。&lt;/p&gt;
&lt;p&gt;如果矩形变换的父对象也是矩形变换，那么子矩形变换可以以各种方式锚定到父矩形变换。例如，子对象可以锚定到父对象的中心，或者锚定到四个角中的一个。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_Anchored1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;锚点还允许子对象随着父对象的宽度或高度一起拉伸。矩形的每个角都有一个固定的偏移量到其对应的锚点，即矩形的左上角有一个固定的偏移量到左上角的锚点等。这样，矩形的不同角落可以锚定到父矩形中的不同点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_Anchored2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;锚点的位置是以父矩形的宽度和高度的分数（或百分比）来定义的。0.0（0%）对应于左侧或底侧，0.5（50%）对应于中间，1.0（100%）对应于右侧或顶侧。但是锚点不仅限于边缘和中间，它们可以锚定到父矩形内的任何点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_Anchored3.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以单独拖动每一个锚点，或者如果它们在一起，你可以通过点击它们中间的位置并拖动来一起拖动它们。如果你在拖动锚点的同时按住Shift键，矩形的对应角将会和锚点一起移动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_Anchored4.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;锚点手柄的一个有用特性是，它们会自动吸附到兄弟矩形的锚点，以便进行精确定位。&lt;/p&gt;
&lt;h5 id=&#34;anchor-presets锚点预设按钮&#34;&gt;Anchor presets(锚点预设按钮) &lt;a href=&#34;#anchor-presets%e9%94%9a%e7%82%b9%e9%a2%84%e8%ae%be%e6%8c%89%e9%92%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;在Inspector中，可以在 Rect Transform 组件的左上角找到锚点预设按钮。点击该按钮会打开锚点预设下拉菜单。在这里，你可以快速选择一些最常用的锚定选项。你可以将UI元素锚定到父元素的侧边或中间，或者随着父元素的大小一起拉伸。水平和垂直的锚定是独立的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_AnchorPreset.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;锚点预设按钮如果有选中的预设选项，会显示当前选中的预设选项。如果水平或垂直轴上的锚点设置的位置与预设中的任何位置不同，将显示自定义选项。&lt;/p&gt;
&lt;h5 id=&#34;anchor-and-position-fields-in-the-inspector检查器中的锚点和位置字段&#34;&gt;Anchor and position fields in the Inspector(检查器中的锚点和位置字段) &lt;a href=&#34;#anchor-and-position-fields-in-the-inspector%e6%a3%80%e6%9f%a5%e5%99%a8%e4%b8%ad%e7%9a%84%e9%94%9a%e7%82%b9%e5%92%8c%e4%bd%8d%e7%bd%ae%e5%ad%97%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;如果锚点数字字段还未显示，你可以点击锚点展开箭头来显示。Anchor Min 对应场景视图中的左下锚点手柄，而 Anchor Max 则对应右上手柄。&lt;/p&gt;
&lt;p&gt;根据锚点是一起（产生固定的宽度和高度）还是分开（使矩形随父矩形一起拉伸），矩形的位置字段显示方式会有所不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_RectTransform_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当所有的锚点手柄在一起时，显示的字段有Pos X、Pos Y、Width和Height。Pos X和Pos Y的值表示相对于锚点的枢轴位置。&lt;/p&gt;
&lt;p&gt;当锚点分开时，字段部分或全部变为Left、Right、Top和Bottom。这些字段定义了由锚点定义的矩形内的填充。如果锚点在水平方向上分开，则使用Left和Right字段，如果在垂直方向上分开，则使用Top和Bottom字段。&lt;/p&gt;
&lt;p&gt;注意，通常情况下，更改锚点或枢轴字段中的值会对定位值进行反向调整，以使矩形保持原位。在不需要这种情况时，可以通过在检查器中点击R键开启Raw edit模式。这将导致Anchor和Pivot的值可以更改，而其他值不会因此变化。由于矩形的位置和大小取决于锚点和枢轴的值，所以这可能会导致矩形在视觉上移动或重新调整大小。&lt;/p&gt;
&lt;h3 id=&#34;visual-components&#34;&gt;Visual Components &lt;a href=&#34;#visual-components&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;visual-components视觉组件&#34;&gt;Visual Components(视觉组件) &lt;a href=&#34;#visual-components%e8%a7%86%e8%a7%89%e7%bb%84%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;随着UI系统的引入，已经添加了新的组件，这些组件将帮助你创建特定于GUI的功能。此部分将介绍可以创建的新组件的基础知识。&lt;/p&gt;
&lt;h4 id=&#34;text&#34;&gt;Text &lt;a href=&#34;#text&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_TextInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Text组件，也被称为Label，具有一个用于输入要显示的文本的文本区域。可以设置字体、字体样式、字体大小，以及文本是否具有富文本功能。&lt;/p&gt;
&lt;p&gt;有选项可以设置文本的对齐方式，以及横向和纵向溢出的设置，这些设置可以控制如果文本的尺寸大于矩形的宽度或高度时会发生什么，还有一个Best Fit选项，使文本重新调整大小以适应可用空间。&lt;/p&gt;
&lt;h4 id=&#34;image&#34;&gt;Image &lt;a href=&#34;#image&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ImageInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Image拥有一个Rect Transform组件和一个Image组件。可以将精灵应用到Image组件上，在Target Graphic字段下，并可以在Color字段中设置其颜色。也可以将材质应用到Image组件。Image Type字段定义了应用的精灵将如何显示，选项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simple - 等比例缩放整个精灵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sliced - 利用3x3的精灵分割，所以调整大小不会扭曲角落，只有中心部分会被拉伸。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tiled - 类似于Sliced，但是将中心部分平铺（重复）而不是拉伸。对于完全无边框的精灵，整个精灵都会被平铺。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filled - 以与Simple相同的方式显示精灵，除了它会从一个定义的方向、方式和量填充精灵。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择Set Native Size选项，当选择了Simple或Filled时显示，会将图像重置为原始精灵大小。&lt;/p&gt;
&lt;p&gt;可以通过从&amp;rsquo;Texture Type&amp;rsquo;设置中选择Sprite(2D / UI)来导入图片作为UI精灵。精灵具有附加的导入设置，与旧的GUI精灵相比，最大的不同是增加了精灵编辑器。精灵编辑器提供了9切分图像的选项，这可以将图像分成9个区域，这样如果精灵调整大小，角落不会拉伸或扭曲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SpriteEditor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;raw-image&#34;&gt;Raw Image &lt;a href=&#34;#raw-image&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Image组件需要一个精灵，而Raw Image则需要一个纹理（没有边界等）。只有在必要的情况下才应使用Raw Image，否则在大多数情况下Image将是适合的。&lt;/p&gt;
&lt;h4 id=&#34;mask&#34;&gt;Mask &lt;a href=&#34;#mask&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Mask并不是一个可见的UI控件，而是一种修改控件子元素外观的方式。掩码将子元素限制在父元素的形状内（也就是说，&amp;ldquo;掩蔽&amp;rdquo;）。所以，如果子元素大于父元素，那么只有适应父元素的子元素部分才会可见。&lt;/p&gt;
&lt;h4 id=&#34;effects&#34;&gt;Effects &lt;a href=&#34;#effects&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;视觉组件也可以应用各种简单的效果，如简单的阴影或轮廓。&lt;/p&gt;
&lt;h3 id=&#34;interaction-components&#34;&gt;Interaction Components &lt;a href=&#34;#interaction-components&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;interaction-components交互组件&#34;&gt;Interaction Components(交互组件) &lt;a href=&#34;#interaction-components%e4%ba%a4%e4%ba%92%e7%bb%84%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;这部分涵盖了UI系统中处理交互的组件，如鼠标或触摸事件以及使用键盘或控制器的交互。&lt;/p&gt;
&lt;p&gt;交互组件本身不可见，必须与一个或多个视觉组件组合起来才能正确工作。&lt;/p&gt;
&lt;h4 id=&#34;common-functionality公用功能&#34;&gt;Common Functionality(公用功能) &lt;a href=&#34;#common-functionality%e5%85%ac%e7%94%a8%e5%8a%9f%e8%83%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;大部分交互组件都有一些共同点。它们都是可选择的，这意味着它们有共享的内置功能，可以用于可视化状态之间的过渡（正常、高亮、按下、禁用），并且可以使用键盘或控制器导航到其他可选择的项目。&lt;/p&gt;
&lt;p&gt;交互组件至少有一个UnityEvent，在用户以特定方式与组件交互时被触发。UI系统捕捉并记录了从附加到UnityEvent的代码传出的任何异常。&lt;/p&gt;
&lt;h4 id=&#34;button&#34;&gt;Button &lt;a href=&#34;#button&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Button有一个OnClick UnityEvent，用于定义当点击时它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ButtonExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;toggle&#34;&gt;Toggle &lt;a href=&#34;#toggle&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Toggle有一个IsOn复选框，用于确定Toggle当前是打开还是关闭状态。当用户点击Toggle时，这个值会翻转，相应地，视觉上的勾选标记也可以打开或关闭。它还有一个OnValueChanged UnityEvent，用于定义当值发生变化时它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;toggle-group&#34;&gt;Toggle Group &lt;a href=&#34;#toggle-group&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Toggle Group可以用来组合一组彼此独立的Toggle。属于同一组的Toggle被约束在一起，一次只能选择其中一个 - 选择其中一个会自动取消选择所有其他Toggle。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleGroupExample.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;slider&#34;&gt;Slider &lt;a href=&#34;#slider&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Slider具有一个十进制数值Value，用户可以在最小值和最大值之间拖动它。它可以是水平的也可以是垂直的。它还有一个OnValueChanged UnityEvent，用于定义当值发生变化时它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SliderExample.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;scrollbar&#34;&gt;Scrollbar &lt;a href=&#34;#scrollbar&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Scrollbar有一个十进制数值Value，范围在0和1之间。当用户拖动滚动条时，该值相应地进行变化。&lt;/p&gt;
&lt;p&gt;滚动条常与Scroll Rect和Mask一起使用，以创建滚动视图。Scrollbar有一个范围在0和1之间的Size值，用来确定手柄占整个滚动条长度的比例是多少。这通常是由另一个组件控制的，用来指示在滚动视图中可见的内容占总内容的比例有多大。Scroll Rect组件可以自动完成这个工作。&lt;/p&gt;
&lt;p&gt;滚动条可以是水平的，也可以是垂直的。它还有一个OnValueChanged UnityEvent，用于定义当值变化时，它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollbarExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;dropdown&#34;&gt;Dropdown &lt;a href=&#34;#dropdown&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Dropdown有一个可供选择的选项列表。每个选项可以指定一个文本字符串和可选的图像，可以在检查器中设置，也可以从代码动态设置。它有一个OnValueChanged UnityEvent，用于定义当当前选择的选项发生改变时它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownExample.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;input-field&#34;&gt;Input Field &lt;a href=&#34;#input-field&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Input Field用于使用户可以编辑Text Element的文本。它有一个UnityEvent，用于定义当文本内容发生变化时它将执行什么操作，还有另一个UnityEvent，用于定义当用户完成编辑时它将执行什么操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_InputFieldExample.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;scroll-rect-scroll-view&#34;&gt;Scroll Rect (Scroll View) &lt;a href=&#34;#scroll-rect-scroll-view&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;当需要在小区域内显示占用大量空间的内容时，可以使用Scroll Rect。Scroll Rect提供了滚动内容的功能。&lt;/p&gt;
&lt;p&gt;通常，Scroll Rect与Mask组合使用，以创建滚动视图，其中只有Scroll Rect内部的可滚动内容是可见的。它还可以额外地与一或两个Scrollbar组合使用，可以拖动它们进行水平或垂直滚动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollRectExample.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;animation-integration&#34;&gt;Animation Integration &lt;a href=&#34;#animation-integration&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Animation允许使用Unity的动画系统对控制状态间的每个过渡进行完全动画化。由于可以同时动画化的属性数量，这是过渡模式中最强大的一种。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_ButtonInspectorAnimation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;要使用Animation过渡模式，需要将Animator组件附加到控制元素上。可以通过点击&amp;quot;Auto Generate Animation&amp;quot;自动完成。这也会生成一个已经设置了状态的Animator控制器，需要保存。&lt;/p&gt;
&lt;p&gt;新的Animator控制器可以立即使用。与大多数Animator控制器不同，此控制器还存储控制器过渡的动画，如果需要，可以进行定制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_ButtonAnimator.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;例如，如果选择了一个附有Animator控制器的Button元素，则可以通过打开Animation窗口（Window&amp;gt;Animation）编辑按钮每个状态的动画。&lt;/p&gt;
&lt;p&gt;有一个Animation Clip弹出菜单可以选择所需的剪辑。可从&amp;quot;Normal&amp;quot;、&amp;ldquo;Highlighted&amp;rdquo;、&amp;ldquo;Pressed&amp;quot;和&amp;quot;Disabled&amp;quot;中选择。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUI_ButtonAnimationWindow.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Normal状态由按钮元素本身的值设置，可以为空。在所有其他状态中，最常见的配置是时间线开始时的单个关键帧。状态之间的过渡动画将由Animator处理。&lt;/p&gt;
&lt;p&gt;例如，可以通过从Animation Clip弹出菜单中选择Highlighted状态，并将播放头放在时间线开始处，来更改Highlighted状态下按钮的宽度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择录制按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在检查器中更改按钮的宽度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;退出录制模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切换到播放模式，看看在突出显示时按钮如何变大。&lt;/p&gt;
&lt;p&gt;任何数量的属性都可以在此关键帧中设置其参数。&lt;/p&gt;
&lt;p&gt;多个按钮可以通过共享Animator控制器来共享相同的行为。&lt;/p&gt;
&lt;p&gt;UI动画过渡模式与Unity的旧版动画系统不兼容。你应该仅使用Animator组件。&lt;/p&gt;
&lt;h3 id=&#34;auto-layout&#34;&gt;Auto Layout &lt;a href=&#34;#auto-layout&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;auto-layout自动布局&#34;&gt;Auto Layout(自动布局) &lt;a href=&#34;#auto-layout%e8%87%aa%e5%8a%a8%e5%b8%83%e5%b1%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rect Transform布局系统具有足够的灵活性，可以处理许多不同类型的布局，并且它还允许以完全自由形式放置元素。但是，有时可能需要更加结构化的布局。&lt;/p&gt;
&lt;p&gt;自动布局系统提供了将元素放置在嵌套布局组中的方法，例如水平组，垂直组或网格。它还允许元素根据所包含的内容自动调整大小。例如，一个按钮可以动态地调整大小以精确地适应其文本内容加上一些填充。&lt;/p&gt;
&lt;p&gt;自动布局系统是基于基本的Rect Transform布局系统构建的系统。可以选择在部分或所有元素上使用。&lt;/p&gt;
&lt;h4 id=&#34;understanding-layout-elements理解布局元素&#34;&gt;Understanding Layout Elements(理解布局元素) &lt;a href=&#34;#understanding-layout-elements%e7%90%86%e8%a7%a3%e5%b8%83%e5%b1%80%e5%85%83%e7%b4%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;自动布局系统基于layout elements(布局元素)和layout controllers(布局控制器)的概念。layout elements(布局元素)是具有Rect Transform和其他可选组件的游戏对象。layout elements(布局元素)不直接设置自己的大小，但作为layout controllers(布局控制器)的其他组件可以使用它们提供的信息来计算它们应使用的大小。&lt;/p&gt;
&lt;p&gt;布局元素有定义其自身的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minimum width(最小宽度)&lt;/li&gt;
&lt;li&gt;Minimum height(最小高度)&lt;/li&gt;
&lt;li&gt;Preferred width(首选宽度)&lt;/li&gt;
&lt;li&gt;Preferred height(首选高度)&lt;/li&gt;
&lt;li&gt;Flexible width(灵活的宽度)&lt;/li&gt;
&lt;li&gt;Flexible height(灵活的高度)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用布局元素提供的信息的布局控制器组件示例包括Content Size Fitter和各种Layout Group组件。布局组中的布局元素大小的基本原则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先分配最小尺寸&lt;/li&gt;
&lt;li&gt;如果有足够的可用空间，则会分配首选大小&lt;/li&gt;
&lt;li&gt;如果有额外的可用空间，则分配灵活的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何带有矩形变换的游戏对象都可以用作布局元素。默认情况下，它们的最小尺寸、首选尺寸和灵活尺寸均为 0。某些组件在添加到游戏对象时将更改这些布局属性。&lt;/p&gt;
&lt;p&gt;图像和文本组件是提供布局元素属性的组件的两个示例。他们更改首选宽度和高度以匹配精灵或文本内容。&lt;/p&gt;
&lt;h4 id=&#34;layout-element-component布局元素组件&#34;&gt;Layout Element Component(布局元素组件) &lt;a href=&#34;#layout-element-component%e5%b8%83%e5%b1%80%e5%85%83%e7%b4%a0%e7%bb%84%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;如果你想要覆盖最小，首选，或者灵活的尺寸，你可以通过在游戏对象上添加一个布局元素组件来达到目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_LayoutElementInspector.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;布局元素组件允许你覆盖一个或多个布局属性的值。启用你想要覆盖的属性的复选框，然后指定你想要覆盖的值。&lt;/p&gt;
&lt;h4 id=&#34;understanding-layout-controllers-理解布局控制器&#34;&gt;Understanding Layout Controllers (理解布局控制器) &lt;a href=&#34;#understanding-layout-controllers-%e7%90%86%e8%a7%a3%e5%b8%83%e5%b1%80%e6%8e%a7%e5%88%b6%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;布局控制器是一类组件，它们负责控制一个或多个布局元素的大小，可能还包括位置，这里的布局元素指带有矩形变换(Rect Transforms)的游戏对象。布局控制器可能会控制其自身的布局元素（即它本身所在的游戏对象），或者控制子布局元素。&lt;/p&gt;
&lt;p&gt;充当布局控制器的组件本身也可以同时充当布局元素。&lt;/p&gt;
&lt;h4 id=&#34;content-size-fitter内容尺寸适配器&#34;&gt;Content Size Fitter(内容尺寸适配器) &lt;a href=&#34;#content-size-fitter%e5%86%85%e5%ae%b9%e5%b0%ba%e5%af%b8%e9%80%82%e9%85%8d%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Content Size Fitter 充当布局控制器，控制其自身布局元素的大小。查看自动布局系统实际运行的最简单方法是将 Content Size Fitter 组件添加到带有 Text 组件的游戏对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ContentSizeFitterInspector.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果将“Horizontal Fit”或“Vertical Fit”设置为“Preferred”，则矩形变换将调整其宽度和/或高度以适合文本内容。&lt;/p&gt;
&lt;h4 id=&#34;aspect-ratio-fitter宽高比适配器&#34;&gt;Aspect Ratio Fitter(宽高比适配器) &lt;a href=&#34;#aspect-ratio-fitter%e5%ae%bd%e9%ab%98%e6%af%94%e9%80%82%e9%85%8d%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Aspect Ratio Fitter 用作布局控制器，控制其自身布局元素的大小。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_AspectRatioFitterInspector.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;它可以调整高度以适应宽度，反之亦然，也可以使元素适合其父级或包围其父级。 Aspect Ratio Fitter 不考虑布局信息，例如最小尺寸和首选尺寸。&lt;/p&gt;
&lt;h4 id=&#34;layout-groups布局组&#34;&gt;Layout Groups(布局组) &lt;a href=&#34;#layout-groups%e5%b8%83%e5%b1%80%e7%bb%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;布局组作为一个布局控制器，它控制其子布局元素的大小和位置。例如，水平将其子元素并排排列，网格布局组则将其子元素放置在网格中。
布局组并不控制它自己的大小。相反，它自身作为一个布局元素，可能会被其他布局控制器控制或者手动设置。
无论布局组被分配了什么大小，它在大多数情况下都会尝试为每一个子布局元素分配适当的空间，这基于他们报告的最小，首选和灵活的尺寸。而且，布局组还可以通过这种方式任意嵌套。&lt;/p&gt;
&lt;h4 id=&#34;driven-rect-transform-properties驱动的矩形变换属性&#34;&gt;Driven Rect Transform properties(驱动的矩形变换属性) &lt;a href=&#34;#driven-rect-transform-properties%e9%a9%b1%e5%8a%a8%e7%9a%84%e7%9f%a9%e5%bd%a2%e5%8f%98%e6%8d%a2%e5%b1%9e%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;由于自动布局系统中的布局控制器可以自动控制某些UI元素的尺寸和位置，因此，那些尺寸和位置不应同时通过检视器或场景视图手动编辑。因为这些更改的值在下一次布局计算时将被布局控制器重置。
矩形变换有一个驱动属性的概念来解决这个问题。例如，将 Horizontal Fit 属性设置为“Minimum”或“Preferred”的 Content Size Fitter 将驱动同一游戏对象上矩形变换的宽度。宽度将显示为只读，并且矩形变换顶部的一个小信息框将通知一个或多个属性由 Conten Size Fitter 驱动。
除了防止手动编辑之外，驱动的矩形变换属性还有其他原因。只需更改游戏视图的分辨率或大小即可更改布局。这反过来又可以改变布局元素的大小或位置，从而改变驱动属性的值。但仅仅因为调整了游戏视图的大小而将场景标记为具有未保存的更改是不可取的。为了防止这种情况，驱动属性的值不会保存为场景的一部分，并且对它们的更改不会将场景标记为已更改。&lt;/p&gt;
&lt;h4 id=&#34;technical-details技术细节&#34;&gt;Technical Details(技术细节) &lt;a href=&#34;#technical-details%e6%8a%80%e6%9c%af%e7%bb%86%e8%8a%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;自动布局系统带有一些内置的组件，但也可以创建新的组件并以自定义的方式控制布局。这是通过让一个组件实现特定的接口实现的，这些接口会被自动布局系统识别。&lt;/p&gt;
&lt;h4 id=&#34;layout-interfaces布局接口&#34;&gt;Layout Interfaces(布局接口) &lt;a href=&#34;#layout-interfaces%e5%b8%83%e5%b1%80%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;如果一个组件实现了ILayoutElement接口，那么它就会被自动布局系统视为布局元素。&lt;/p&gt;
&lt;p&gt;如果一个组件实现了ILayoutGroup接口，那么它就应该驱动其子元素的Rect Transforms。&lt;/p&gt;
&lt;p&gt;如果一个组件实现了ILayoutSelfController接口，那么它就应该驱动自己的RectTransform。&lt;/p&gt;
&lt;h4 id=&#34;layout-calculations布局算法&#34;&gt;Layout Calculations(布局算法) &lt;a href=&#34;#layout-calculations%e5%b8%83%e5%b1%80%e7%ae%97%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;自动布局系统按照以下顺序评估和执行布局：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过在ILayoutElement组件上调用CalculateLayoutInputHorizontal，计算布局元素的最小值、首选值和灵活宽度。这按照从下到上的顺序执行，即先计算子元素，父元素在自身计算中可以考虑子元素的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在ILayoutController组件上调用SetLayoutHorizontal，计算并设置布局元素的实际宽度。这按照从上到下的顺序进行，也就是说，在父元素之后计算子元素，因为子元素的宽度分配需要基于父元素中的全部宽度。此步骤之后，布局元素的Rect Transforms有了新的宽度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在ILayoutElement组件上调用CalculateLayoutInputVertical，计算布局元素的最小值、首选值和灵活高度。这同样按照从下到上的顺序执行，即先计算子元素，然后父元素在自身的计算中可以考虑到子元素的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过在ILayoutController组件上调用SetLayoutVertical，计算和设置布局元素的实际高度。这按照从上到下的顺序进行，也就是说，在父元素之后计算子元素，因为子元素的高度分配需要基于父元素中可用的全部高度。此步骤之后，布局元素的Rect Transforms有了新的高度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如上所述，自动布局系统先评估宽度，然后评估高度。因此，计算出的高度可能会依赖于宽度，但计算出的宽度绝不会依赖于高度。&lt;/p&gt;
&lt;h4 id=&#34;triggering-layout-rebuild触发布局重建&#34;&gt;Triggering Layout Rebuild(触发布局重建) &lt;a href=&#34;#triggering-layout-rebuild%e8%a7%a6%e5%8f%91%e5%b8%83%e5%b1%80%e9%87%8d%e5%bb%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;当一个组件上的属性改变可能导致当前布局不再有效时，需要进行布局重新计算。可以使用以下调用来触发：&lt;/p&gt;
&lt;p&gt;LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform);&lt;/p&gt;
&lt;p&gt;重建不会立即发生，而是在当前帧的结束时，也就是在绘制之前。之所以不立即重建，是因为这可能会导致在同一帧中多次重建布局，这对性能来说是不好的。&lt;/p&gt;
&lt;p&gt;触发重建的指导原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在可以更改布局的属性的setter中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在这些回调中：&lt;/p&gt;
&lt;p&gt;OnEnable&lt;/p&gt;
&lt;p&gt;OnDisable&lt;/p&gt;
&lt;p&gt;OnRectTransformDimensionsChange&lt;/p&gt;
&lt;p&gt;OnValidate（仅在编辑器中需要，运行时不需要）&lt;/p&gt;
&lt;p&gt;OnDidApplyAnimationProperties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rich-text&#34;&gt;Rich Text &lt;a href=&#34;#rich-text&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;rich-text富文本&#34;&gt;Rich Text(富文本) &lt;a href=&#34;#rich-text%e5%af%8c%e6%96%87%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;UI 元素和文本网格的文本可以包含多种字体样式和大小。 UI 系统和旧版 GUI 系统都支持富文本。 Text、GUIStyle、GUIText 和 TextMesh 类具有富文本设置，指示 Unity 在文本中查找标记标签。 Debug.Log函数还可以使用这些标记来增强代码中的错误报告。标签不会显示，但指示要应用于文本的样式更改。&lt;/p&gt;
&lt;h4 id=&#34;markup-format标记格式&#34;&gt;Markup format(标记格式) &lt;a href=&#34;#markup-format%e6%a0%87%e8%ae%b0%e6%a0%bc%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;标记系统的设计来自于HTML，但并不意味着严格符合标准的HTML。基本思想是文本的一部分可以被包含在一对匹配的标签之间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We are &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt;not&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt; amused.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如示例所示，标签只是“尖括号”字符&amp;lt;和内的文本片段&amp;gt;。&lt;/p&gt;
&lt;p&gt;您将开始标记放在该部分的开头。标签内的文本表示其名称（在本例中为b）。&lt;/p&gt;
&lt;p&gt;您可以在该部分的末尾放置另一个标签。这是结束标签。它与开始标记具有相同的名称，但名称前面带有斜杠/字符。每个开始标签必须有一个相应的结束标签。如果不关闭开始标记，它将呈现为常规文本。&lt;/p&gt;
&lt;p&gt;这些标签不会直接显示给用户，而是被解释为对其所包含的文本进行样式设置的说明。上例中使用的标签b将粗体应用于单词“not”，因此文本在屏幕上显示为:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;标记的文本部分（包括包围它的标签）称为元素。&lt;/p&gt;
&lt;h4 id=&#34;nested-elements嵌套元素&#34;&gt;Nested elements(嵌套元素) &lt;a href=&#34;#nested-elements%e5%b5%8c%e5%a5%97%e5%85%83%e7%b4%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;通过将一个元素&amp;quot;嵌套&amp;quot;在另一个元素内，可以将多种样式应用于文本的一部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We are &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt;definitely not&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt; amused
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;标签应用斜体样式，所以这将在屏幕上呈现为:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;注意关闭标签的顺序，它与打开标签的顺序相反。当你考虑到内部标签并不需要覆盖最外层元素的所有文本时，这个原因可能会更清晰。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We are &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt;absolutely &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt;definitely&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;i&lt;/span&gt;&amp;gt; not&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;b&lt;/span&gt;&amp;gt; amused
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h4 id=&#34;tag-parameters标签参数&#34;&gt;Tag parameters(标签参数) &lt;a href=&#34;#tag-parameters%e6%a0%87%e7%ad%be%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;一些标签对文本有简单的全有或全无效果，但其他一些标签可能允许变化。例如，颜色标签需要知道应用哪种颜色。通过参数在标签中添加这样的信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We are &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;green&lt;/span&gt;&amp;gt;green&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&amp;gt; with envy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;产生的结果是：&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;请注意，结束标记不包含参数值。或者，该值可以用引号引起来，但这不是必需的。&lt;/p&gt;
&lt;p&gt;标记参数不能包含空格。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;We are &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;green&lt;/span&gt;&amp;gt;green&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&amp;gt; with envy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于字符两侧都有空格，因此不起作用&lt;code&gt;=&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;supported-tags支持的标签&#34;&gt;Supported tags(支持的标签) &lt;a href=&#34;#supported-tags%e6%94%af%e6%8c%81%e7%9a%84%e6%a0%87%e7%ad%be&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;以下列表描述了Unity支持的所有样式标签。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;标签&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;例子&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将文本呈现为粗体。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;We are &amp;lt;b&amp;gt;not&amp;lt;/b&amp;gt; amused.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将文本呈现为斜体。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;We are &amp;lt;i&amp;gt;usually&amp;lt;/i&amp;gt; not amused.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据给定的像素值参数设置文本的大小。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;We are &amp;lt;size=50&amp;gt;largely&amp;lt;/size&amp;gt; unaffected.&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;虽然这个标签可以用于Debug.Log，但你会发现，如果设置的大小过大，窗口栏和控制台的行间距看起来会很奇怪。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据参数值设置文本的颜色。颜色可以采用传统的HTML格式指定，即&lt;code&gt;#rrggbbaa&lt;/code&gt;&amp;hellip;其中字母对应表示颜色的红色，绿色，蓝色和alpha（透明度）值的十六进制数字对。例如，全不透明的青色将通过&lt;code&gt;color=#00ffffff&lt;/code&gt;进行指定&amp;hellip; 你可以用大写或小写指定十六进制值；&lt;code&gt;#FF0000&lt;/code&gt;等同于&lt;code&gt;#ff0000&lt;/code&gt;。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;We are &amp;lt;color=#ff0000ff&amp;gt;colorfully&amp;lt;/color&amp;gt; amused&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;另一个选择是使用颜色的名称。这样理解起来比较容易，但自然地，颜色的范围被限制了，而且总是假设颜色是完全不透明的。 &amp;lt;color=cyan&amp;gt;一些文本&lt;!-- raw HTML omitted --&gt; 可用的颜色名称在下面的表格中给出。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;material&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这只对文本网格有用，并使用参数指定的材质渲染文本的一个部分。该值是关联到检查器显示的文本网格的材质数组的索引。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;We are &amp;lt;material=2&amp;gt;texturally&amp;lt;/material&amp;gt; amused&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;quad&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这只对文本网格有用，并能在文本中内联渲染一个图像。它接受参数来指定用于图像的材质，图像的像素高度，以及进一步的四个参数，表示要显示的图像的矩形区域。不同于其他标签，quad标签并未环绕某段文本，因此没有结束标签 - 斜杠字符被放在初始标签的末尾，以表示它是&amp;quot;自关闭&amp;quot;的。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;`&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这将选择渲染器材质数组中位置的材质，并将图像的高度设置为20像素。图像的矩形区域从由x，y，宽度和高度值给出的位置开始，这些值都是以纹理未缩放的宽度和高度的分数形式给出的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;supported-colors支持的颜色&#34;&gt;Supported colors(支持的颜色) &lt;a href=&#34;#supported-colors%e6%94%af%e6%8c%81%e7%9a%84%e9%a2%9c%e8%89%b2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;下面列出了你可以在&lt;!-- raw HTML omitted --&gt;富文本标签中使用名称替代十六进制标签的颜色。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;*&lt;strong&gt;Color name*&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;*&lt;strong&gt;Hex value*&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;*&lt;strong&gt;Swatch*&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;aqua (same as cyan)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#00ffffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/CyanSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;black&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#000000ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/BlackSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;blue&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#0000ffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/BlueSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;brown&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#a52a2aff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/BrownSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cyan (same as aqua)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#00ffffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/CyanSwatch2.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;darkblue&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#0000a0ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/DarkblueSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fuchsia (same as magenta)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ff00ffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MagentaSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;green&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#008000ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GreenSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;grey&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#808080ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GreySwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lightblue&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#add8e6ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/LightblueSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#00ff00ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/LimeSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;magenta (same as fuchsia)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ff00ffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MagentaSwatch2.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;maroon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#800000ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MaroonSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;navy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#000080ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/NavySwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;olive&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#808000ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/OliveSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;orange&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ffa500ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/OrangeSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;purple&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#800080ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/PurpleSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ff0000ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/RedSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;silver&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#c0c0c0ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/SilverSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;teal&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#008080ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/TealSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ffffffff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/WhiteSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;yellow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;#ffff00ff&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/YellowSwatch.png&#34; alt=&#34;img&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Editor GUI(编辑器 GUI)&lt;/p&gt;
&lt;p&gt;默认情况下，编辑器 GUI 系统禁用了富文本，但可以通过自定义 GUIStyle 明确启用。应设定 richText 属性为 true，并将样式传递给对应的 GUI 函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GUIStyle style = new GUIStyle ();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;style.richText = true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GUILayout.Label(&amp;#34;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;30&lt;/span&gt;&amp;gt;Some &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;yellow&lt;/span&gt;&amp;gt;RICH&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&amp;gt; text&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;size&lt;/span&gt;&amp;gt;&amp;#34;,style);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;event&#34;&gt;Event &lt;a href=&#34;#event&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Event System(事件系统)&lt;/p&gt;
&lt;p&gt;事件系统是一种基于输入（包括键盘、鼠标、触摸或自定义输入）向应用程序中的对象发送事件的方式。事件系统由几个协同工作以发送事件的组件组成。&lt;/p&gt;
&lt;p&gt;当你向GameObject添加一个事件系统组件时，你会注意到它暴露的功能不多，这是因为事件系统本身被设计为事件系统模块之间的管理器和通信协调者。&lt;/p&gt;
&lt;p&gt;事件系统的主要角色如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理被选中的GameObject&lt;/li&gt;
&lt;li&gt;管理正在使用的输入模块&lt;/li&gt;
&lt;li&gt;管理射线投射（如果需要的话）&lt;/li&gt;
&lt;li&gt;根据需要更新所有的输入模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Input Modules(输入模块)
输入模块是你如何希望事件系统行为的主要逻辑存在的地方，它们用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;处理输入&lt;/li&gt;
&lt;li&gt;管理事件状态&lt;/li&gt;
&lt;li&gt;向场景对象发送事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在事件系统中，一次只能有一个输入模块处于活动状态，而且它们必须是事件系统组件同一GameObject上的组件。&lt;/p&gt;
&lt;p&gt;Raycasters(射线投射器)
射线投射器用于确定指针所在的位置。输入模块通常使用在场景中配置的射线投射器来计算指向设备所在的位置。默认存在3个提供的射线投射器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图形射线投射器 - 用于UI元素&lt;/li&gt;
&lt;li&gt;2D物理射线投射器 - 用于2D物理元素&lt;/li&gt;
&lt;li&gt;物理射线投射器 - 用于3D物理元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你在你的场景中配置了2d/3d射线投射器，让非UI元素从输入模块接收消息就很简单了。只需附加一个实现了事件接口之一的脚本。关于这方面的例子，可以参见IPointerEnterHandler和IPointerClickHandler脚本参考页面。&lt;/p&gt;
&lt;h4 id=&#34;messaging-system消息系统&#34;&gt;Messaging System(消息系统) &lt;a href=&#34;#messaging-system%e6%b6%88%e6%81%af%e7%b3%bb%e7%bb%9f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;新的UI系统使用了一个旨在取代SendMessage的消息系统。该系统完全基于C#，旨在解决SendMessage系统中存在的一些问题。该系统使用自定义接口，可以在MonoBehaviour上实现，以表明该组件能够从消息系统接收回调。当调用次数被指定为目标GameObject时，将在所有实现了指定接口的GameObject的组件上发出调用，这些指定的接口就是调用要针对的。消息系统允许传递自定义用户数据，以及事件应传播的GameObject层次结构的深度；也就是说，它应该仅针对指定的GameObject执行，还是也应在子对象和父对象上执行。此外，消息框架提供了辅助函数，用于搜索并找到实现给定消息接口的GameObject。&lt;/p&gt;
&lt;p&gt;消息系统是通用的，不仅设计用于UI系统，还设计用于一般的游戏代码。添加自定义消息事件相对简单，它们将使用与UI系统用于所有事件处理的相同框架。&lt;/p&gt;
&lt;h5 id=&#34;defining-a-custom-message定义自定义消息&#34;&gt;Defining A Custom Message(定义自定义消息) &lt;a href=&#34;#defining-a-custom-message%e5%ae%9a%e4%b9%89%e8%87%aa%e5%ae%9a%e4%b9%89%e6%b6%88%e6%81%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;如果你希望定义一个自定义消息，这相对来说很简单。在UnityEngine.EventSystems命名空间中，有一个基础接口叫做&amp;rsquo;IEventSystemHandler&amp;rsquo;。任何从此接口派生的东西都可以被视为通过消息系统接收事件的目标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ICustomMessageTarget&lt;/span&gt; : IEventSystemHandler
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// functions that can be called via the messaging system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Message1();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Message2();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦定义了这个接口，那么它就可以由MonoBehaviour实现。当实现它时，它定义了如果针对这个MonoBehaviours的GameObject发出了给定的消息，将会执行的功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomMessageTarget&lt;/span&gt; : MonoBehaviour, ICustomMessageTarget
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Message1()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Debug.Log (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message 1 received&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Message2()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Debug.Log (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Message 2 received&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们有了一个可以接收消息的脚本，我们需要发出消息。通常，这会是对某些松散耦合的事件的响应。例如，在UI系统中，我们会发出PointerEnter和PointerExit等事件，以及用户输入应用程序时可能发生的其他各种事件。&lt;/p&gt;
&lt;p&gt;要发送消息，存在一个静态助手类来完成这件事。它需要一个消息的目标对象、一些用户特定数据、以及一个映射到你想要定位的消息接口中具体功能的算子作为参数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ExecuteEvents.Execute&amp;lt;ICustomMessageTarget&amp;gt;(target, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;, (x,y)=&amp;gt;x.Message1());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此代码将在实现ICustomMessageTarget接口的GameObject目标上的任何组件上执行Message1函数。ExecuteEvents类的脚本文档覆盖了Execute函数的其他形式，比如在子元素或者父元素中执行。&lt;/p&gt;
&lt;h4 id=&#34;input-modules输入模块&#34;&gt;Input Modules(输入模块) &lt;a href=&#34;#input-modules%e8%be%93%e5%85%a5%e6%a8%a1%e5%9d%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;输入模块是可以配置和自定义事件系统主要逻辑的地方。打开即用的有两个输入模块，一个设计用于独立设备，一个设计用于触摸输入。每个模块都会按照你在所给配置上所预期的那样接收和派发事件。&lt;/p&gt;
&lt;p&gt;输入模块是事件系统的&amp;rsquo;业务逻辑&amp;rsquo;发生的地方。当启用事件系统时，它会查看附加了哪些输入模块，并把更新处理传递给特定模块。&lt;/p&gt;
&lt;p&gt;输入模块设计为基于你希望支持的输入系统来进行扩展或修改。它们的目的是将硬件特定输入（如触摸、摇杆、鼠标、运动控制器）映射成通过消息系统发送的事件。&lt;/p&gt;
&lt;p&gt;内置的输入模块被设计为支持常见的游戏配置，例如触摸输入、控制器输入、键盘输入和鼠标输入。如果你在你的MonoBehaviours上实现了特定的接口，它们会向应用程序中的控件发送各种各样的事件。所有的UI组件都实现了对于给定组件来说有意义的接口。&lt;/p&gt;
&lt;h4 id=&#34;supported-events支持事件&#34;&gt;Supported Events(支持事件) &lt;a href=&#34;#supported-events%e6%94%af%e6%8c%81%e4%ba%8b%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;事件系统支持多个事件，用户还可以在自定义的输入模块中进一步定制这些事件。&lt;/p&gt;
&lt;p&gt;由独立输入模块和触摸输入模块支持的事件是通过接口提供的，可以通过实现接口在MonoBehaviour上实现。如果你配置了有效的事件系统，那么这些事件将在正确的时间被调用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IPointerEnterHandler - OnPointerEnter - 当指针进入对象时被调用&lt;/li&gt;
&lt;li&gt;IPointerExitHandler - OnPointerExit - 当指针退出对象时被调用&lt;/li&gt;
&lt;li&gt;IPointerDownHandler - OnPointerDown - 当在对象上按下指针时被调用&lt;/li&gt;
&lt;li&gt;IPointerUpHandler - OnPointerUp - 当指针释放时被调用(在点击指针的游戏物体上调用)&lt;/li&gt;
&lt;li&gt;IPointerClickHandler - OnPointerClick - 当在同一对象上按下并释放指针时被调用&lt;/li&gt;
&lt;li&gt;IInitializePotentialDragHandler - OnInitializePotentialDrag - 当找到拖动目标时被调用，可以用来初始化值&lt;/li&gt;
&lt;li&gt;IBeginDragHandler - OnBeginDrag - 在拖动即将开始时在拖动对象上调用&lt;/li&gt;
&lt;li&gt;IDragHandler - OnDrag - 在拖动发生时在拖动对象上被调用&lt;/li&gt;
&lt;li&gt;IEndDragHandler - OnEndDrag - 拖动结束时在拖动对象上被调用&lt;/li&gt;
&lt;li&gt;IDropHandler - OnDrop - 在拖动结束的对象上被调用&lt;/li&gt;
&lt;li&gt;IScrollHandler - OnScroll - 当鼠标滚轮滚动时被调用&lt;/li&gt;
&lt;li&gt;IUpdateSelectedHandler - OnUpdateSelected - 在每个时钟周期内选定的对象上被调用&lt;/li&gt;
&lt;li&gt;ISelectHandler - OnSelect - 当对象成为选定的对象时被调用&lt;/li&gt;
&lt;li&gt;IDeselectHandler - OnDeselect - 当选中的对象变为非选中状态时被调用&lt;/li&gt;
&lt;li&gt;IMoveHandler - OnMove - 当移动事件发生时被调用（左，右，上，下）&lt;/li&gt;
&lt;li&gt;ISubmitHandler - OnSubmit - 当提交按钮被按下时被调用&lt;/li&gt;
&lt;li&gt;ICancelHandler - OnCancel - 当取消按钮被按下时被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;raycasters射线投射器&#34;&gt;Raycasters(射线投射器) &lt;a href=&#34;#raycasters%e5%b0%84%e7%ba%bf%e6%8a%95%e5%b0%84%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;事件系统需要一种方法来检测当前的输入事件需要发送到哪里，这就是射线投射器提供的功能。给定一个屏幕空间位置，它们将收集所有潜在的目标，判断它们是否在给定位置下方，然后返回离屏幕最近的对象。有几种类型的射线投射器提供：&lt;/p&gt;
&lt;p&gt;图形射线投射器 - 用于UI元素，存在于画布上并在画布中进行搜索&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2D物理射线投射器 - 用于2D物理元素&lt;/li&gt;
&lt;li&gt;物理射线投射器 - 用于3D物理元素&lt;/li&gt;
&lt;li&gt;当场景中存在并启用了射线投射器时，事件系统在从输入模块发出查询时将使用它&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用了多个射线投射器，则他们所有人都将被投射，结果将根据元素到距离进行排序&lt;/p&gt;
&lt;h3 id=&#34;reference参考&#34;&gt;Reference(参考) &lt;a href=&#34;#reference%e5%8f%82%e8%80%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;rect-transform&#34;&gt;Rect Transform &lt;a href=&#34;#rect-transform&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Rect Transform组件是Transform组件的2D布局对应物。其中Transform代表单个点，Rect Transform代表UI元素可以放置其中的矩形。如果Rect Transform的父级也是一个Rect Transform，子Rect Transform也可以指定它相对于父矩形的位置和大小应如何设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_RectTransform_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pos (X, Y, Z)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;矩形的旋转中心点相对于锚点的位置。旋转中心点是矩形旋转的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Width/Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;矩形的宽度和高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Left, Top, Right, Bottom&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;矩形边缘相对于其锚点的位置。这可以被认为是在由锚点定义的矩形内部的填充。当锚点分开时（如下所示），此项将代替“位置（Pos）”和“宽度/高度（Width/Height）”。要访问这些选项，请点击RectTransform组件左上角的方形锚点预设（Anchor Presets）框。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Anchors&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;矩形左下角和右上角的锚点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Min&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义为父矩形大小的一部分的矩形左下角的锚点。0,0 对应于锚定到父矩形的左下角，而 1,1 对应于锚定到父矩形的右上角。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Max&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义为父矩形大小的一部分的矩形右上角的锚点。0,0 对应于锚定到父矩形的左下角，而 1,1 对应于锚定到父矩形的右上角。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pivot&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;矩形旋转的围绕点位置，定义为矩形本身大小的一部分。0,0 对应于左下角，而 1,1 对应于右上角。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Rotation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对象围绕其枢轴点沿X、Y和Z轴旋转的角度（以度为单位）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scale&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在X、Y和Z维度上应用于对象的缩放因子。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Blueprint Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;就像它们没有被旋转和缩放一样编辑RectTransforms。这也启用了吸附功能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Raw Edit Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当启用时，编辑轴心和锚点值将不会对矩形的位置和大小进行反向调整，以使其保持在一个地方。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请注意，某些RectTransform的计算是在帧的结束时进行的，就在计算UI顶点之前，以确保它们与整个帧期间进行的所有最新变化保持同步。这意味着它们在执行Start和第一次执行Update还未首次计算。&lt;/p&gt;
&lt;p&gt;您可以通过创建一个Start()其中添加Canvas.ForceUpdateCanvases()方法来解决这个问题。这将迫使Canvas不是在帧的结束时更新，而是在调用该方法时更新。&lt;/p&gt;
&lt;h4 id=&#34;canvas-components&#34;&gt;Canvas Components &lt;a href=&#34;#canvas-components&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;canvas-1&#34;&gt;Canvas &lt;a href=&#34;#canvas-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Canvas组件代表了UI布局和渲染的抽象空间。所有的UI元素都必须是具有附加了Canvas组件的游戏对象的子对象。当你从菜单中创建一个UI元素对象(GameObject &amp;gt; Create UI)时，如果场景中还没有Canvas对象，将自动创建一个Canvas对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasScreenSpaceCameraInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasWorldSpaceInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Render Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;UI呈现到屏幕上或者作为3D空间中的对象的方式。 &lt;em&gt;Screen Space - Overlay&lt;/em&gt;、&lt;em&gt;Screen Space - Camera&lt;/em&gt; 和&lt;em&gt;World Space&lt;/em&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pixel Perfect (Screen Space modes only)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否应该为了精确而无抗锯齿地渲染UI？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Render Camera (Screen Space - Camera mode only)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;UI应该渲染到哪个相机。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Plane Distance (Screen Space - Camera mode only)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;UI平面应该放置在相机前方的距离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Event Camera (World Space mode only)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将用于处理UI事件的相机。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Receives Events&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Canvas处理UI事件。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对所有UI元素来说，一个Canvas就足够了，但是场景中有多个Canvas也是可能的。也可以使用嵌套Canvas，也就是将一个Canvas作为另一个Canvas的子对象用于优化。嵌套的Canvas使用与其父对象相同的渲染模式。&lt;/p&gt;
&lt;p&gt;传统上，UI被渲染得就像是直接绘制在屏幕上的简单图形设计一样。也就是说，它们没有被摄像机观察的3D空间的概念。Unity支持这种屏幕空间渲染，但也允许UI作为场景中的对象进行渲染，这取决于渲染模式属性的值。可用的模式有Screen Space - Overlay、Screen Space - Camera 和World Space。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screen Space - Overlay&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这种模式下，Canvas将会调整大小以适应屏幕，然后直接渲染，无需参考场景或摄像机(即使场景中完全没有摄像机，UI也会被渲染)。如果屏幕的大小或分辨率发生变化，UI将自动重新调整大小以适应。UI将会绘制在其他任何图形（如相机视图）之上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/CanvasOverlay.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意：Screen Space - Overlay模式下的Canvas需要被存储在层级结构的顶部。如果不这样做，UI可能会从视图中消失。这是一个内置的限制。请将Screen Space - Overlay的Canvas保持在层级结构的顶层，以得到预期的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screen Space - Camera&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这种模式下，Canvas被渲染得就像它是在距离给定摄像机一定距离的平面上绘制的。UI在屏幕上的大小并不会随着距离的变化而变化，因为它总是重新调整大小以完全适应摄像机的视锥体。如果屏幕的大小、分辨率或摄像机的视锥体发生了变化，那么UI将自动重新调整大小以适应。场景中距离摄像机比UI平面更近的3D对象将会渲染在UI的前面，而平面后面的对象会被遮挡。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/CanvasCamera.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;World Space&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种模式将UI渲染得就像它是场景中的一个平面对象。然而，与Screen Space - Camera模式不同，这个平面并不需要面向摄像机，可以按照你喜欢的方式进行定向。Canvas的大小可以通过它的矩形变换进行设置，但它在屏幕上的大小将取决于摄像机的观察角度和距离。其它的场景对象可以经过Canvas的后面，穿过或者在Canvas的前面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/CanvasWorldSpace.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;canvas-scaler&#34;&gt;Canvas Scaler &lt;a href=&#34;#canvas-scaler&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Canvas Scaler组件用于控制Canvas中UI元素的整体比例和像素密度。这个缩放影响Canvas下的所有内容，包括字体大小和图片边框。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasScalerInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UI Scale Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定Canvas中的UI元素如何进行缩放。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Constant Pixel Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;让UI元素保持相同的像素大小，不论屏幕大小如何。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scale With Screen Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;屏幕越大，UI元素就会越大。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Constant Physical Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;让UI元素保持相同的物理大小，不论屏幕大小和分辨率如何。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Constant Pixel Size设置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scale Factor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过这个因子来缩放画布中的所有UI元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reference Pixels Per Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果一个精灵设置了这个“Pixels Per Unit”，那么精灵中的一个像素将会覆盖UI中的一个单位。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Scale With Screen Size设置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reference Resolution&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这是UI布局设计的分辨率。如果屏幕分辨率更大，UI将被放大，如果分辨率更小，UI将被缩小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Screen Match Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果当前分辨率的宽高比不符合参考分辨率，则使用此模式来缩放画布区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Match Width or Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据宽度、高度或其间的某种值来缩放画布区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;横向或纵向扩展画布区域，因此画布的大小永远不会小于参考值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Shrink&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;横向或纵向裁剪画布区域，因此画布的大小永远不会大于参考值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Match&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定缩放是否以宽度或高度为参考，或者是两者之间的混合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reference Pixels Per Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果一个精灵有这个“Pixels Per Unit”设置，那么精灵中的一个像素将覆盖UI中的一个单位。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Constant Physical Size设置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Physical Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用来指定位置和大小的物理单位。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Fallback Screen DPI&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果屏幕DPI未知，应假定的DPI值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Default Sprite DPI&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于具有“Pixels Per Unit”设置的精灵，该设置与“Reference Pixels Per Unit”设置匹配的每英寸像素数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reference Pixels Per Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果一个精灵有这个“Pixels Per Unit”设置，那么它的DPI将匹配“Default Sprite DPI”设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;World Space Canvas设置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Dynamic Pixels Per Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于UI中动态创建的位图，如文本的单位像素数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Reference Pixels Per Unit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果一个精灵有这个&amp;rsquo;Pixels Per Unit&amp;rsquo;设置，那么在精灵中的一个像素将覆盖世界中的一个单位。如果&amp;rsquo;Pixels Per Unit&amp;rsquo;设置为1，那么在精灵中的&amp;rsquo;单位像素&amp;rsquo;设置将完全按照原样使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于设置为“Screen Space - Overlay”或“Screen Space - Camera”的Canvas，Canvas Scaler UI缩放模式可以设置为Constant Pixel Size，Scale With Screen Size或Constant Physical Size。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constant Pixel Size&lt;/strong&gt;
使用Constant Pixel Size模式，UI元素的位置和大小以屏幕上的像素为单位。当Canvas Scaler未附加时，这也是Canvas的默认功能。然而，可以通过Canvas Scaler的缩放因子设置为Canvas中的所有UI元素提供一种恒定的缩放。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scale With Screen Size&lt;/strong&gt;
使用Scale With Screen Size模式，可以根据指定的参考分辨率的像素来指定位置和大小。如果当前屏幕分辨率大于参考分辨率，Canvas将保留参考分辨率的分辨率，但将放大以适应屏幕。如果当前屏幕分辨率小于参考分辨率，Canvas将同样缩小以适应。&lt;/p&gt;
&lt;p&gt;如果当前屏幕分辨率的宽高比与参考分辨率不同，将分别缩放每个轴以适应屏幕将导致非均匀的缩放，这通常是不期望的。因此，ReferenceResolution组件会让Canvas分辨率偏离参考分辨率，以保持屏幕的宽高比。Screen Match Mode设置可以控制这种偏差的行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constant Physical Size&lt;/strong&gt;
使用Constant Physical Size模式，UI元素的位置和大小以物理单位（如毫米、点或点刻）指定。这种模式依赖于设备正确报告其屏幕DPI。您可以为不报告DPI的设备指定一种备选的DPI。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;World Space&lt;/strong&gt;
对于设置为&amp;rsquo;World Space&amp;rsquo;的Canvas，Canvas Scaler可以用来控制Canvas中UI元素的像素密度。&lt;/p&gt;
&lt;h5 id=&#34;canvas-group&#34;&gt;Canvas Group &lt;a href=&#34;#canvas-group&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Canvas Group可以用来从一个地方控制一整组UI元素的某些方面，无需单独处理每一个元素。Canvas Group的属性会影响它所在的GameObject以及所有的子元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasGroupInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Alpha&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;此组中UI元素的透明度。值在0和1之间，其中0表示完全透明，1表示完全不透明。注意，元素本身也保持其透明度，因此Canvas Group的alpha值和单个UI元素的alpha值会相互乘以。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定此组件是否接受输入。当设置为false时，交互功能将被禁用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Block Raycasts&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;此组件是否将充当Raycasts的碰撞器？你需要在附加到Canvas的图形射线投射器上调用RayCast函数。这不适用于Physics.Raycast。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ignore Parent Groups&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组是否会受到游戏对象层次结构中更上层Canvas Group组件设置的影响，或者它会忽略这些设置，从而覆盖它们？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Canvas Group的典型用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过在窗口的GameObject上添加Canvas Group，控制其Alpha属性，实现整个窗口的淡入或淡出。&lt;/li&gt;
&lt;li&gt;通过在父GameObject上添加Canvas Group，并将其Interactable属性设置为false，使一整套控件无法交互（变灰）。&lt;/li&gt;
&lt;li&gt;通过在元素或其父元素上放置Canvas Group组件，并将其Block Raycasts属性设置为false，使一个或多个UI元素不阻止鼠标事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;canvas-renderer&#34;&gt;Canvas Renderer &lt;a href=&#34;#canvas-renderer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Canvas Renderer组件渲染包含在Canvas内的图形UI对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_CanvasRendererInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;菜单中可用的标准UI对象（GameObject &amp;gt; Create UI）在需要的地方都已附加Canvas Renderer，但您可能需要为自定义UI对象手动添加此组件。虽然检查器中没有公开的属性，但可以从脚本中访问一些属性和函数。&lt;/p&gt;
&lt;h4 id=&#34;visual-components-1&#34;&gt;Visual Components &lt;a href=&#34;#visual-components-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;text-1&#34;&gt;Text &lt;a href=&#34;#text-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Text控件向用户显示非交互式的文本。这可以用于为其他GUI控件提供标题或标签，或者展示指令或其他文本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_TextInspector2_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;控件显示的文本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Character&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Font&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于显示文本的字体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Font Style&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应用于文本的样式。选项有&lt;em&gt;Normal&lt;/em&gt;（正常）、&lt;em&gt;Bold&lt;/em&gt;（粗体）、&lt;em&gt;Italic&lt;/em&gt;（斜体）和&lt;em&gt;Bold And Italic&lt;/em&gt;（粗斜体）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Font Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示文本的大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Line Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文本行之间的垂直间隔。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Rich Text&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文本中的标记元素是否应被解释为富文本样式？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Paragraph&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Alignment&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;文本的水平和垂直对齐。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Align by Geometry&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用字形几何的范围来执行水平对齐，而不是字形度量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal Overflow&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;处理文本过宽无法适应矩形的情况的方法。选项有 &lt;em&gt;Wrap&lt;/em&gt; 和 &lt;em&gt;Overflow&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical Overflow&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;处理折行文本过高无法适应矩形的情况的方法。选项有 &lt;em&gt;Truncate&lt;/em&gt; 和 &lt;em&gt;Overflow&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Best Fit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity是否应忽略大小属性，而只是试图使文本适应控件的矩形？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于渲染文本的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Material&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于渲染文本的材质。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些控件（如Buttons和Toggles）具有内置的文本描述。对于没有隐式文本的控件（如Sliders），你可以使用文本控件创建的标签来指示其用途。文本也适用于指令列表、故事文本、对话和法律免责声明。&lt;/p&gt;
&lt;p&gt;文本控件提供了常见的字体大小、样式等参数，以及文本对齐方式。当启用富文本选项时，文本内的标记元素将被视为样式信息，因此你可以让单个词汇或短小的部分以粗体或不同的颜色显示。&lt;/p&gt;
&lt;h5 id=&#34;image-1&#34;&gt;Image &lt;a href=&#34;#image-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Image控件向用户展示一个非交互式的图片。你可以用它来作为装饰或图标，而且你可以通过脚本改变图片以反映其他控件的变化。该控件类似于原始图像控件，但是提供了更多的选项来动态渲染图像和精确填充控件矩形。然而，图像控件需要其贴图为精灵，而原始图像可以接受任何贴图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/ImageCtrlExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ImageInspector_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Source Image&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示要显示的图像的贴图（必须导入为精灵）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应用于图像的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Material&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于渲染图像的材质。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Raycast Target&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果您希望Unity将图像视为射线投射的目标，请启用“Raycast Target”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Preserve Aspect&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确保图像保持其现有尺寸。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Set Native Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将图像框的尺寸设置为纹理的原始像素大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;您必须将要显示的图像导入为Sprite，才能与Image控件一起使用。&lt;/p&gt;
&lt;h5 id=&#34;raw-image-1&#34;&gt;Raw Image &lt;a href=&#34;#raw-image-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Raw Image控件向用户显示一个非互动的图像。您可以用它做装饰或图标等用途，而且可以通过脚本改变图像以反映其他控件的变化。该控件与Image控件相似，但为图像的动画提供了更多的选项，并能准确地填充控件矩形。然而，Image控件要求其Texture为Sprite，而Raw Image可以接受任何Texture。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/RawImageCtrlExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_RawImageInspector184.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Texture&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;表示要显示的图像的纹理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应用于图像的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Material&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于渲染图像的材质。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Raycast Target&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果您希望Unity将图像视为射线投射的目标，请启用“Raycast Target”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UV Rectangle&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;图像在控件矩形内的偏移和大小，以标准化坐标（范围0.0到1.0）给出。图像的边缘被拉伸以填充UV矩形周围的空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Raw Image不需要精灵纹理，您可以使用它来显示Unity播放器可以获取到的任何纹理。例如，您可能会显示使用WWW类从URL下载的图像，或者显示游戏中对象的纹理。&lt;/p&gt;
&lt;p&gt;UV矩形属性允许您显示较大图像的一小部分。X和Y坐标指定图像的哪个部分与控件的左下角对齐。例如，X坐标0.25 会截掉图像最左边的四分之一。W和H（也就是，宽度和高度）属性指示将要缩放以适应控件矩形的图像部分的宽度和高度。例如，宽度和高度为0.5将会将图像区域的四分之一放大到控件矩形。通过更改这些属性，您可以根据需要进行图像的缩放和调整大小（参见Scrollbar控件）。&lt;/p&gt;
&lt;h5 id=&#34;mask-1&#34;&gt;Mask &lt;a href=&#34;#mask-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Mask并不是一个可见的UI控件，而是一种修改控件子元素外观的方法。遮罩（即:“mask”）将子元素限制在父元素的形状内。因此，如果子元素大于父元素，那么只有符合父元素的子元素部分才会可见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MaskCtrlExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MaskInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Show Graphic&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;遮罩（父对象）的图形是否应该以透明度的形式覆盖在子对象之上？&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Description (描述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遮罩的一个常见用途是使用例如面板对象（menu: GameObject &amp;gt; Create UI &amp;gt; Panel）作为“框架”，来显示大图像的小部分。您可以首先将图像指定为面板对象的子对象来实现这一点。您应该将图像定位到面板区域后面应该可见的区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MaskDisabled.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后，向面板添加Mask组件。由于被面板的形状遮挡，子图像在面板外的区域将变得不可见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/MaskEnabled.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果随后移动图像，则只有面板揭示的部分将会可见。这种移动可以通过滚动条来控制，例如创建一个可滚动的地图查看器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation(实现原理)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;遮罩是使用GPU的模板缓冲器来实现的。&lt;/p&gt;
&lt;p&gt;*第一个遮罩元素将1写入模板缓冲器 *所有遮罩下面的元素在渲染时进行检查，仅在模板缓冲器中有1的区域呈现 *嵌套的遮罩会将递增的位掩码写入缓冲器，这意味着可渲染的子项需要具有模板值的逻辑与才能被渲染。&lt;/p&gt;
&lt;h5 id=&#34;rectmask2d&#34;&gt;RectMask2D &lt;a href=&#34;#rectmask2d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;RectMask2D是一个与Mask控件类似的遮罩控制器。该遮罩将子元素限制在父元素的矩形内。与标准的遮罩控件不同，它有一些限制，但是它也有许多性能优势。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description(描述)&lt;/strong&gt;
RectMask2D的一个常见用途是显示较大区域的小部分。使用RectMask2D来框定这个区域。&lt;/p&gt;
&lt;p&gt;RectMask2D控件的限制包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它只在2D空间内工作&lt;/li&gt;
&lt;li&gt;它不能正确地遮盖不在同一平面上的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RectMask2D的优点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它不使用模板缓冲器&lt;/li&gt;
&lt;li&gt;没有额外的绘制调用&lt;/li&gt;
&lt;li&gt;无需改变材质&lt;/li&gt;
&lt;li&gt;性能快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ui-effect-components&#34;&gt;UI Effect Components &lt;a href=&#34;#ui-effect-components&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;shadow&#34;&gt;Shadow &lt;a href=&#34;#shadow&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;阴影组件对图形组件（如文字或图片）添加了简单的轮廓效果。它必须与图形组件位于同一GameObject上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_TextExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ShadowExample.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ShadowInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Effect Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;阴影的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Effect Distance&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;阴影的偏移量，表示为一个向量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Use Graphic Alpha&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将图形的颜色乘以效果的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;outline&#34;&gt;Outline &lt;a href=&#34;#outline&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;轮廓组件为诸如Text或Image的图形组件添加了一个简单的轮廓效果。它必须和图形组件在同一个游戏对象上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_TextExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_OutlineExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_OutlineInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Effect Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;轮廓的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Effect Distance&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;轮廓效果在水平和垂直方向上的距离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Use Graphic Alpha&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将图形的颜色与效果的颜色进行乘法运算。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;position-as-uv1&#34;&gt;Position as UV1 &lt;a href=&#34;#position-as-uv1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;这为文本和图像图形添加了一个简单的位置作为UV1的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_PositionAsUV1Inspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;interaction-components-1&#34;&gt;Interaction Components &lt;a href=&#34;#interaction-components-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;selectable-base-class&#34;&gt;Selectable Base Class &lt;a href=&#34;#selectable-base-class&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Selectable类是所有交互组件的基类，它处理的是那些公共的项。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这决定了这个组件是否会接受输入。当它被设定为false时，交互会被禁用，并且转换状态会被设定为禁用状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在一个可选组件内，有几个过渡选项，具体取决于可选组件当前处于什么状态。不同的状态有：正常，高亮，按压和禁用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;还有一些导航选项，用来控制如何实现控件的键盘导航。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;transition-options&#34;&gt;Transition Options &lt;a href=&#34;#transition-options&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;在一个可选择的组件中，根据可选择组件当前所处的状态，有几个不同的过渡选项。不同的状态有：正常，高亮，按压和禁用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableTransition.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;过度选项:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个选项是让按钮完全没有状态效果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Color Tint&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据按钮所处的状态更改按钮的颜色。可以为每个独立的状态选择颜色。也可以设置不同状态之间的淡入淡出时间。数字越高，颜色间的淡入淡出变化就越慢。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Sprite Swap&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;允许根据按钮当前所处的状态显示不同的精灵图像，这些精灵图像可以自定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Animation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;允许根据按钮的状态进行动画展示，为了使用动画过渡，必须存在一个动画器组件。确保禁用根运动是很重要的。要创建一个动画控制器，点击生成动画（或者创建你自己的），并确保一个动画控制器已经被添加到按钮的动画器组件中。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Color Tint&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableColorTint.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Target Graphic&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;交互组件所使用的图形。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Normal Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;控件的正常颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Highlighted Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被高亮时的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pressed Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被按下时的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Disabled Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被禁用时的颜色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Color Multiplier&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这会将每次过渡的色彩和它的值相乘。通过这种方式，你可以创建大于1的颜色，以增亮那些基础颜色小于白色（或者透明度小于满透明度）的图形元素上的颜色（或者透明度）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Fade Duration&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;以秒为单位，从一个状态过渡到另一个状态所需的时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Sprite Swap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableSpriteSwap.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Target Graphic&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;要使用的普通精灵。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Highlighted Sprite&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被高亮时使用的精灵。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pressed Sprite&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被按下时使用的精灵。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Disabled Sprite&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被禁用时使用的精灵。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Animation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableAnimation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Normal Trigger&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用的正常动画触发器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Highlighted Trigger&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被高亮时使用的触发器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Pressed Trigger&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被按下时使用的触发器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Disabled Trigger&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当控件被禁用时使用的触发器。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6 id=&#34;navigation-options&#34;&gt;Navigation Options &lt;a href=&#34;#navigation-options&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableNavigation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;导航选项指的是如何控制游戏模式下UI元素的导航。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有键盘导航。同时确保它不会因点击/轻触而接收焦点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;实现水平导航。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;实现垂直导航。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Automatic&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自动导航。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Explicit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在此模式下，你可以明确指定控件在按下不同方向键时的导航路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Visualize&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选择&amp;quot;可视化&amp;quot;会在场景窗口中给你展示你已经设置的导航的可视化表示。请看下图。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SelectableNavigationExplicit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/GUIVisualizeNavigation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上述的可视化模式中，箭头指示了一组控件的焦点变化方式。也就是说，对于每一个独立的UI控件，你可以看到当某个控件被选中时，用户按下一个方向键后，哪个UI控件将会接下来获得焦点。所以在上面的例子中，如果&amp;quot;按钮&amp;quot;获得了焦点，用户按下了右箭头键，那么第一个（左边的）竖直滑动器将会接下来获得焦点。需要注意的是，因为竖直滑动器控制着滑动器的值，所以竖直滑动器不能通过上或下的键跳转焦点。同样，水平滑动器也不能通过左/右箭头键跳转焦点。&lt;/p&gt;
&lt;h5 id=&#34;button-1&#34;&gt;Button &lt;a href=&#34;#button-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;按钮控件响应用户的点击，用于开始或确认一个动作。熟悉的例子包括网页表单上使用的提交和取消按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ButtonExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ButtonInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果你希望这个按钮能接受输入，就启用&amp;quot;可交互&amp;rdquo;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件如何在视觉上响应用户操作的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定控件序列的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Click&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unity在用户点击按钮并释放时调用的UnityEvent。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;按钮被设计为在用户点击并释放时触发一个动作。如果在释放点击之前鼠标被移出按钮控件，动作就不会发生。&lt;/p&gt;
&lt;p&gt;按钮有一个叫做点击事件(On Click)的事件，当用户完成点击时会响应。典型的用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认一个决定（例如，开始游戏或者保存游戏）&lt;/li&gt;
&lt;li&gt;在GUI中移动到子菜单&lt;/li&gt;
&lt;li&gt;取消正在进行的动作（例如，下载一个新的场景）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;toggle-1&#34;&gt;Toggle &lt;a href=&#34;#toggle-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Toggle控件是一个复选框，允许用户开启或关闭一个选项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组件会接受输入吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件如何视觉上响应用户操作的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件序列的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Is On&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;切换按钮是否从一开始就处于开启状态？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Toggle Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;切换按钮在其值改变时的图形反应方式。选项包括无（即，勾选标记简单地出现或消失）和淡出（即，勾选标记会淡入或淡出）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Graphic&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于勾选标记的图像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Group&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个切换按钮所属的切换按钮组（如果有的话）。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Function:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Changed&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当切换按钮被点击时调用的Unity事件。该事件可以将当前状态作为bool类型的动态参数发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;切换控制允许用户开启或关闭选项。你也可以将多个切换按钮组合到一个切换按钮组中，当一组选项中只应有一个被开启时。&lt;/p&gt;
&lt;p&gt;切换按钮有一个单一事件叫做&amp;quot;值变更时&amp;quot;，当用户改变当前值时该事件会作出响应。新的值会作为一个布尔参数传递给事件函数。切换开关的典型用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启或关闭选项（例如，游戏时播放音乐）。&lt;/li&gt;
&lt;li&gt;让用户确认他们已阅读法律免责声明。&lt;/li&gt;
&lt;li&gt;在切换按钮组中选择一组选项中的一个（例如，一周中的某一天）。&lt;/li&gt;
&lt;li&gt;注意，切换按钮是一个为子元素提供可点击区域的父元素。如果切换按钮没有子元素（或者它们被禁用），则它不可点击。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;toggle-group-1&#34;&gt;Toggle Group &lt;a href=&#34;#toggle-group-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Toggle Group并不是一个可见的UI控件，而是一种修改一组切换按钮行为的方式。属于同一组的切换按钮被约束在同一时间只能有一个被开启 - 按下其中一个以开启它会自动关闭其他的切换按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleGroupExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ToggleGroupInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Allow Switch Off&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否允许没有任何切换按钮被开启？如果启用此设置，按下当前开启的切换按钮将关闭它，使得没有切换按钮被开启。如果禁用此设置，按下当前开启的切换按钮将不会改变其状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过将Toggle Group对象拖拽到组内每个切换按钮的Group属性中来建立切换按钮组。&lt;/p&gt;
&lt;p&gt;Toggle Group在用户必须从互斥的选项集中做出选择的任何地方都很有用。常见的例子包括选择玩家角色类型，速度设置（慢，中，快等），预设颜色和一周中的某一天。你可以在场景中一次拥有多个切换按钮组对象，所以如果必要，你可以创建多个独立的组。&lt;/p&gt;
&lt;p&gt;与其他UI元素不同，带有Toggle Group组件的对象不需要是一个画布对象的子对象，尽管切换按钮自身仍然需要这样。&lt;/p&gt;
&lt;p&gt;请注意，如果场景加载或实例化组时组内多个切换按钮被开启，Toggle Group不会立刻执行约束。只有当一个新的切换按钮被开启时，其他的才会被关闭。这意味着你需要确保只有一个切换按钮从一开始就被开启。&lt;/p&gt;
&lt;h5 id=&#34;slider-1&#34;&gt;Slider &lt;a href=&#34;#slider-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Slider控件允许用户通过拖动鼠标从预设范围内选择一个数值。请注意，类似的ScrollBar控件被用于滚动，而不是选择数值。熟悉的例子包括游戏中的难度设置和图片编辑器中的亮度设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SliderExample_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_SliderInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组件会接受输入吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件对用户操作在视觉上响应方式的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件序列的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Fill Rect&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;控件填充区域使用的图形。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Handle Rect&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滑块控件的&amp;quot;handle&amp;quot;部分所使用的图形。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Direction&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当把手被拖动时，滑块值增加的方向。选项有从左到右，从右到左，从下到上和从上到下。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Min Value&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当滑块把手位于最低端（由方向属性决定）时，Slider的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Max Value&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当滑块把手位于最高端（由方向属性决定）时，Slider的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Whole Numbers&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Slider的值是否应限制为整数值？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Slider的当前数值。如果在检查器中设定了值，它将被用作初始值，但是当数值变动时，该值将在运行时改变。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Changed&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当Slider的当前值发生变化时，将会触发一个UnityEvent。这个事件可以将当前值作为浮点型的动态参数发送。无论是否启用了“Whole Numbers”（整数值）属性，该值都会以浮点型传递。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Slider的值是由其手柄沿其长度的位置决定的。随着手柄被拖动的距离增加，值会从最小值增加到最大值。默认的行为是让Slider从左到右增加，但也可以使用“Direction”（方向）属性来反转这种行为。你还可以通过为“Direction”属性选择“Bottom To Top”（从底部到顶部）或“Top To Bottom”（从顶部到底部）以设置滑块垂直增加。&lt;/p&gt;
&lt;p&gt;Slider有一个名为“On Value Changed”（数值改变时）的单一事件，当用户拖动手柄时会触发。滑块的当前数值会作为浮点型参数传递给这个函数。典型的使用案例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择游戏的难度级别，灯光的亮度等。&lt;/li&gt;
&lt;li&gt;设置距离、大小、时间或角度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;scrollbar-1&#34;&gt;Scrollbar &lt;a href=&#34;#scrollbar-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Scrollbar控件允许用户滚动过大以至于无法完全看见的图像或其他视图。请注意，类似的Slider控件被用于选择数值，而不是滚动。熟悉的例子包括文本编辑器侧边的垂直滚动条，以及用于查看大图像或地图的一部分的垂直和水平对的滚动条。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollbarExample_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollBarInspector_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组件会接受输入吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件对用户操作在视觉上反馈方式的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;决定控件序列的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Fill Rect&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于控件的背景区域的图形。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Handle Rect&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于控件滑动&amp;quot;handle&amp;quot;部分的图形。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Direction&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当操作句柄被拖动时，滚动条值将以哪种方向增加。选项有从左到右，从右到左，从下到上和从上到下。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滚动条的初始位置值，范围在0.0到1.0之间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滚动条中手柄的部分大小，范围在0.0到1.0之间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Number Of Steps&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滚动条允许的不同滚动位置的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Function:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Changed&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当滚动条的当前值发生变化时调用的UnityEvent。该事件可以将值发送为float类型的动态参数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;滚动条的值由手柄沿其长度的位置确定，该值被报告为极端末端之间的一部分。例如，默认的从左到右的条有一个0.0在左端，1.0在右端，0.5表示中点。可以通过为方向属性选择从上到下或从下到上来使滚动条垂直定向。&lt;/p&gt;
&lt;p&gt;滚动条与类似的滑块控件之间的一个重要区别是滚动条的手柄可以改变尺寸以表示可滚动的距离；当视图只能滚动很短的距离时，手柄会占满大部分条形，只允许稍微向任一方向移动。&lt;/p&gt;
&lt;p&gt;滚动条有一个称为“值改变时”的单一事件，该事件在用户拖动手柄时响应。当前值作为浮点参数传递给事件函数。滚动条的典型用途包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垂直滚动一段文本。&lt;/li&gt;
&lt;li&gt;水平滚动时间线。&lt;/li&gt;
&lt;li&gt;成对使用时，可以水平和垂直滚动大图像，以查看放大的部分。手柄的大小改变以指示缩放的程度，从而指示可滚动的距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;dropdown-1&#34;&gt;Dropdown &lt;a href=&#34;#dropdown-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;下拉菜单可以用来让用户从选项列表中选择一个单一的选项。&lt;/p&gt;
&lt;p&gt;该控件显示当前选择的选项。一旦点击，它会打开选项列表，以便可以选择新的选项。选择新选项后，选项列表再次关闭，控件显示新选择的选项。如果用户点击控件本身，或者画布内的任何其他地方，列表也会关闭。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownExample_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownExampleOpen.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Interactable&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组件会接受输入吗？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定控件对用户操作的视觉反应方式的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Navigation&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定控件序列的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Template&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;下拉列表的模板的Rect Transform。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Caption Text&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于保存当前选定选项文本的Text组件。（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Caption Image&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于保存当前选定选项图片的Image组件。（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Item Text&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于保存项目文本的Text组件。（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Item Image&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于保存项目图片的Image组件。（可选）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Value&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当前选择选项的索引。0代表第一个选项，1代表第二个，以此类推。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Options&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可能的选项列表。每个选项都可以指定一个文本字符串和一个图片。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Function:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Changed&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当用户点击下拉列表中的一个选项时，会触发的UnityEvent事件。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选项列表可以在Inspector中指定，或者可以通过代码进行赋值。每个选项都可以指定一个文本字符串，如果Dropdown支持的话，还可以选择性地指定一个图片。&lt;/p&gt;
&lt;p&gt;按钮有一个名为“On Value Changed”的事件，当用户完成对列表中某个选项的点击时触发。它支持发送一个整数值，这个值是所选选项的索引。0代表第一个选项，1代表第二个，以此类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The template system&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dropdown控件被设计为拥有一个子GameObject，该GameObject作为点击Dropdown控件时显示的下拉列表的模板。模板GameObject默认是不活跃的，但在编辑模板时可以让它活跃，以便更好地看到正在发生的事情。必须在Dropdown组件的Template属性中指定对模板对象的引用。&lt;/p&gt;
&lt;p&gt;模板必须有一个带有Toggle组件的项。当实际的下拉列表在点击Dropdown控件时被创建，这个项会被复制多次，列表中的每个选项都使用一个副本。项的父对象会自动调整大小，以便能够装下所有的项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownHierarchySimple.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_DropdownHierarchyScrolling.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;模板可以通过许多不同的方式进行设置。由GameObject &amp;gt; UI &amp;gt; Dropdown菜单项使用的设置包括一个滚动视图，这样如果一次显示的选项太多，滚动条会出现，用户可以通过滚动条浏览选项。然而，这并不是模板设置的必要部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setup of text and image support&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下拉菜单支持每个选项有一个文本内容和一个图片内容。文本和图片都是可选的。只有当Dropdown设置支持时，才能使用它们。&lt;/p&gt;
&lt;p&gt;当Caption Text和Item Text属性都设置时，下拉菜单支持每个选项的文本。当使用GameObject &amp;gt; UI &amp;gt; Dropdown菜单项时，默认会设置这些属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caption Text是用来放置当前选定选项文本的Text组件。它通常是Dropdown GameObject的子对象。&lt;/li&gt;
&lt;li&gt;Item Text是用来放置每个选项文本的Text组件。它通常是Item GameObject的子对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当Caption Image和Item Image属性都设置时，下拉菜单支持每个选项的图片。这些属性默认情况下不设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caption Image是用来放置当前选定选项图片的Image组件。它通常是Dropdown GameObject的子对象。&lt;/li&gt;
&lt;li&gt;Item Image是用来放置每个选项图片的Image组件。它通常是Item GameObject的子对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际用于下拉菜单的文本和图片在Dropdown组件的Options属性中指定，或者可以从代码中设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Placement of the dropdown list&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下拉列表相对于下拉控件的位置由模板的Rect Transform的锚点和枢轴决定。&lt;/p&gt;
&lt;p&gt;默认情况下，列表会显示在控件下方。通过将模板锚定在控件的底部来实现这一点。模板的枢轴也需要在顶部，这样当模板扩展以适应可变数量的选项项时，它只会向下扩展。&lt;/p&gt;
&lt;p&gt;Dropdown控件有简单的逻辑来防止下拉菜单显示在Canvas的边界外，因为这会使得选择某些选项变得不可能。如果默认位置的下拉菜单在Canvas的矩形内部完全看不见，它相对于控件的位置会翻转。例如，默认情况下显示在控件下方的列表会显示在它的上方。&lt;/p&gt;
&lt;p&gt;这种逻辑非常简单，有一定的限制。下拉菜单的模板不得大于Canvas大小的一半减去下拉控件的大小，否则如果下拉控件位于Canvas的中间，两个位置可能都没有足够的空间放置列表。&lt;/p&gt;
&lt;h5 id=&#34;input-field-1&#34;&gt;Input Field &lt;a href=&#34;#input-field-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;输入字段是一种使Text控件的文本可编辑的方法。像其他交互控件一样，它本身并非可见的UI元素，必须与一个或多个可视UI元素结合使用才能看见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_InputFieldExample_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_InputFieldExample2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_InputFieldInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Transition&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;确定控件对用户操作的视觉反应方式的属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;TextComponent&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;作为Input Field内容的Text元素的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Text&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;编辑开始前放置在字段中的初始文本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Character Limit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;输入字段中可以输入的最大字符数的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Content Type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义您的输入字段接受的字符类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Line Type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义在文本字段内文本的格式化方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Placeholder&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这是一个可选的“空”图形，用于显示输入字段中没有文本。请注意，即使输入字段被选中（也就是，当其被聚焦），这个“空”图形仍然会显示。例如：“Enter text&amp;hellip;”。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Caret Blink Rate&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义用于指示建议插入文本的标记在行上的闪烁频率。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Selection Color&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;选中文本部分的背景色。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Hide Mobile Input (iOS only)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在移动设备上隐藏与屏幕键盘关联的原生输入字段。请注意，这只在iOS设备上有效。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Change&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当输入字段的文本内容发生变化时，会调用一个UnityEvent。该事件可以将当前的文本内容作为字符串类型的动态参数发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;End Edit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当用户通过提交或点击某处从输入字段移除焦点以完成文本内容编辑时，会调用一个UnityEvent。该事件可以将当前的文本内容作为字符串类型的动态参数发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过菜单（Component &amp;gt; UI &amp;gt; Input Field），可以将输入字段脚本添加到任何已有的文本控件对象中。完成这项操作后，你还应将对象拖放到输入字段的文本属性上，以启用编辑功能。&lt;/p&gt;
&lt;p&gt;用户在输入过程中，文本控件自身的文本属性将会发生改变，编辑后可以从脚本中获取该值。请注意，富文本特意不支持可编辑的文本控件；字段在输入时会立即应用任何富文本标记，但标记基本上会“消失”，并且无法再改变或移除样式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints(提示)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若要获取输入字段的文本，请使用InputField组件本身的text属性，而不是显示文本的Text组件的text属性。Text组件的text属性可能会被裁剪，或者对于密码，可能由星号组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;scroll-rect&#34;&gt;Scroll Rect &lt;a href=&#34;#scroll-rect&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;当需要在一个小区域里显示占据大量空间的内容时，可以使用滚动矩形。滚动矩形提供了滚动此类内容的功能。&lt;/p&gt;
&lt;p&gt;通常滚动矩形会与遮罩组合使用，以创建一个只有滚动矩形内可滚动内容可见的滚动视图。它还可以额外地与一个或两个滚动条结合使用，这些滚动条可以拖动以水平或垂直滚动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollRectExample_5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollRectInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这是对需要滚动的UI元素的矩形变换的引用，例如一个大图像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用水平滚动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用垂直滚动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Movement Type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无限制，弹性或者夹紧。使用弹性或夹紧可以强制内容保持在滚动矩形的边界内。当内容到达滚动矩形的边缘时，弹性模式会使内容反弹。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Elasticity&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这是弹性模式中使用的反弹量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Inertia&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当设置了惯性时，拖动后释放指针，内容会继续移动。当未设置惯性时，内容只有在拖动时才会移动。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Deceleration Rate&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当设置了惯性，减速率决定了内容停止移动的速度。减速率为0将立即停止移动。减速率为1表示移动将永不减速。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Scroll Sensitivity&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对滚轮和触控板滚动事件的敏感度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Viewport&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;指向作为内容矩形变换父级的视口矩形变换的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal Scrollbar&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的引用到一个水平滚动条元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Visibility&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当不需要滚动条时，是否应自动隐藏滚动条，并可选地扩展视口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滚动条和视口之间的空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical Scrollbar&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的引用到一个垂直滚动条元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Visibility&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当不需要滚动条时，是否应自动隐藏滚动条，并可选地扩大视口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;滚动条和视口之间的空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Event事件&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Property:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Function:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;On Value Changed&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当Scroll Rect的滚动位置发生变化时，会调用的UnityEvent。该事件可以将当前滚动位置作为Vector2类型的动态参数发送。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;滚动视图中的重要元素包括视口，滚动内容，以及可选的一个或两个滚动条。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根GameObject有Scroll Rect组件。&lt;/li&gt;
&lt;li&gt;视口具有Mask组件。视口可以是根GameObject，也可以是根的子GameObject。如果使用自动隐藏的滚动条，它必须是一个子元素。视口的Rect Transform需要在Scroll Rect的Viewport属性中引用。&lt;/li&gt;
&lt;li&gt;所有滚动内容必须是视口的子对象的单一内容GameObject的子对象。内容的Rect Transform需要在Scroll Rect的Content属性中引用。&lt;/li&gt;
&lt;li&gt;滚动条（如果使用）是根GameObject的子对象。请参阅滚动条页面以获取有关滚动条设置的更多详细信息，并参阅下面的滚动条设置部分以获取有关带有滚动视图的滚动条设置的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个图片显示了一个设置，其中视口是滚动视图根的子对象。这是使用GameObject &amp;gt; UI &amp;gt; Scroll View菜单选项时的默认设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScrollRectHierarchy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;要滚动内容，输入必须从ScrollRect的边界内部接收，而不是在内容本身上。&lt;/p&gt;
&lt;p&gt;在使用Unrestricted滚动移动时要小心，因为可能会以无法检索的方式失去对内容的控制。当使用Elastic或Constrained移动时，最好将内容定位到开始在ScrollRect的边界内，否则当RectTransform试图将内容带回其边界时，可能会出现不良行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrollbar setup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可选地，Scroll Rect可以链接到水平和/或垂直滚动条。这些通常被放置在视口的兄弟层级中，存在时，应分别拖入到Scroll Rect的Horizontal Scrollbar和Vertical Scrollbar属性中。请注意，这样的水平滚动条上的Direction属性应设置为Left To Right，垂直滚动条设置为Bottom To Top。&lt;/p&gt;
&lt;p&gt;滚动条可以选择具有自动隐藏行为，如果内容不需要滚动，因为它没有大于视口，那么它会隐藏滚动条。请注意，自动隐藏只在Play Mode中发生。在Edit Mode中，滚动条始终显示。这可以防止在不应标记场景为dirty的情况下标记它，并且也有助于创建内容，即使显示滚动条，也有足够的空间。&lt;/p&gt;
&lt;p&gt;如果一个或两个滚动条的可见性行为设置为Auto Hide And Expand View，那么当滚动条隐藏时，视口会自动扩大以占据滚动条原本所在的多余空间。在这种设置中，视图的位置和大小由Scroll Rect驱动，水平滚动条的宽度以及垂直滚动条的高度也被驱动。在此设置中，视口以及滚动条必须是Scroll Rect根GameObject的子对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hints(提示)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内容的RectTransform的轴心和锚点可以用来决定如果内容增长或收缩时，内容如何在滚动视图内对齐。如果内容应该保持与顶部对齐，将锚点设置在父对象的顶部，并将轴心设置到顶部位置。&lt;/p&gt;
&lt;h4 id=&#34;auto-layout-1&#34;&gt;Auto Layout &lt;a href=&#34;#auto-layout-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;自动布局系统提供了将元素放置在嵌套布局组（如水平组、垂直组或网格）中的方式。它还允许元素根据包含的内容自动调整大小。&lt;/p&gt;
&lt;h5 id=&#34;layout-element&#34;&gt;Layout Element &lt;a href=&#34;#layout-element&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;如果你想覆盖布局元素的最小、首选或弹性大小，你可以通过在GameObject中添加一个Layout Element组件来实现。&lt;/p&gt;
&lt;p&gt;布局控制器按以下顺序分配宽度或高度给布局元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，布局控制器分配最小尺寸属性（Min Width, Min Height）。&lt;/li&gt;
&lt;li&gt;如果有足够的可用空间，布局控制器分配首选尺寸属性（Preferred Width, Preferred Height）。&lt;/li&gt;
&lt;li&gt;如果还有额外的可用空间，布局控制器分配弹性尺寸属性（Flexible Width, Flexible Height）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_LayoutElementInspector_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当你启用宽度或高度属性时，旁边会出现一个值字段。使用这个值字段输入宽度或高度的确切值。最小和首选尺寸是以常规单位表示，而弹性尺寸则是以相对单位表示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ignore Layout&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;当启用时，布局系统会忽略这个布局元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Min Width&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个布局元素应该具有的最小宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Min Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个布局元素应该具有的最小高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Preferred Width&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在分配额外可用宽度之前，这个布局元素应该具有的首选宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Preferred Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在分配额外可用高度之前，这个布局元素应该具有的首选高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Flexible Width&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;此布局元素应相对于其同级元素填充的可用额外宽度的相对数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Flexible Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个布局元素相对于它的同级元素应填充的额外可用高度的相对数值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Layout Priority&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个组件的布局优先级。如果一个游戏对象有多个具有布局属性的组件（例如，一个Image组件和一个LayoutElement组件），布局系统会使用具有最高布局优先级的组件的属性值。如果组件有相同的布局优先级，布局系统使用每个属性的最高值，无论它来自哪个组件。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Description(描述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Layout Element组件允许你覆盖一个或多个布局属性的值。如果你想要覆盖一个属性的值，启用该属性的复选框，然后指定你想要覆盖的值。&lt;/p&gt;
&lt;p&gt;最小和优先大小以常规单位定义，而灵活的大小以相对单位定义。如果任何布局元素有大于零的灵活大小，意味着所有可用的空间将被填充满。兄弟元素的相对灵活大小值确定了每个兄弟元素填充可用空间的大小比例。最常见的是，灵活的宽度和高度设置为0或1。&lt;/p&gt;
&lt;p&gt;在某些情况下，同时指定优先大小和灵活大小是有意义的。灵活的大小只有在所有的优先大小都已完全分配后才被分配。因此，一个布局元素如果指定了灵活大小，但没有指定优先大小，将会保持其最小大小，直到其他布局元素已经增长到它们的全优先大小，然后基于额外的可用空间开始增长。通过也指定一个灵活的大小，这可以被避免，并且该元素可以与其他具有优先大小的布局元素一起增长到其优选大小，然后在所有的灵活大小都已分配后进一步增长。&lt;/p&gt;
&lt;h5 id=&#34;content-size-fitter&#34;&gt;Content Size Fitter &lt;a href=&#34;#content-size-fitter&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ContentSizeFitterInspector22.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal Fit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如何控制宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unconstrained&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不要基于布局元素来驱动宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Min Size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据布局元素的最小宽度来驱动宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Preferred Size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据布局元素的首选宽度来驱动宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical Fit&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高度是如何被控制的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Unconstrained&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不要根据布局元素来驱动高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Min Size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据布局元素的最小高度来驱动高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Preferred Size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据布局元素的优选高度来驱动高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Description(描述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Content Size Fitter充当一个布局控制器，控制其自身布局元素的大小。大小由Game Object上的布局元素组件提供的最小或优选大小决定。这类布局元素可以是Image或Text组件，布局组，或者是一个Layout Element组件。&lt;/p&gt;
&lt;p&gt;值得记住的是，当一个Rect Transform被调整大小 - 无论是由Content Size Fitter还是其他东西 - 调整大小是围绕枢轴进行的。这意味着可以使用枢轴来控制调整大小的方向。&lt;/p&gt;
&lt;p&gt;例如，当枢轴在中心时，Content Size Fitter将等同于所有方向来扩展Rect Transform。而当枢轴在左上角时，Content Size Fitter将向下和向右扩展Rect Transform。&lt;/p&gt;
&lt;h5 id=&#34;aspect-ratio-fitter&#34;&gt;Aspect Ratio Fitter &lt;a href=&#34;#aspect-ratio-fitter&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_AspectRatioFitterInspector_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Aspect Mode&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如何调整矩形的大小以强制执行宽高比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;None&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不要使矩形适应宽高比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Width Controls Height&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据宽度自动调整高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Height Controls Width&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据高度自动调整宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Fit In Parent&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;宽度、高度、位置和锚点都会自动调整，使矩形在保持宽高比的同时适应其父级矩形。可能会有一些空间在父级矩形内部，但未被此矩形覆盖。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Envelope Parent&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;宽度、高度、位置和锚点会自动调整，使得矩形在保持宽高比的情况下覆盖父级矩形的全部区域。此矩形可能会超出父级矩形的范围。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Aspect Ratio&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;要强制执行的宽高比。这是宽度除以高度的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Description(描述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;宽高比适配器作为一个布局控制器，控制其自身布局元素的大小。它可以调整高度以适应宽度，反之亦然，或者它可以使元素适应其父元素的大小或者包裹其父元素。宽高比适配器并不会考虑像最小尺寸和首选尺寸这样的布局信息。&lt;/p&gt;
&lt;p&gt;值得记住的是，当一个矩形变换被调整大小 - 无论是由宽高比适配器还是别的什么调整的 - 调整是围绕枢轴进行的。这意味着，可以用枢轴来控制矩形的对齐方式。例如，一个放在顶部中心的枢轴会使矩形等量向两侧增长，仅向下增长，而顶边则保持在原位。&lt;/p&gt;
&lt;h5 id=&#34;horizontal-layout-group&#34;&gt;Horizontal Layout Group &lt;a href=&#34;#horizontal-layout-group&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Horizontal Layout Group组件将其子布局元素并排放置。这些元素的宽度由各自的最小、优选和灵活宽度按照下述模型确定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有子布局元素的最小宽度相加，以及它们之间的间距也被加入。得出的结果就是Horizontal Layout Group的最小宽度。&lt;/li&gt;
&lt;li&gt;所有子布局元素的优选宽度相加，和它们之间的间距也被加入。得出的结果就是Horizontal Layout Group的优选宽度。&lt;/li&gt;
&lt;li&gt;如果Horizontal Layout Group的宽度等于其最小宽度或者更小，那么所有子布局元素的宽度也将是它们各自的最小宽度。&lt;/li&gt;
&lt;li&gt;越接近Horizontal Layout Group的优选宽度，每个子布局元素的宽度也将越接近它们的优选宽度。&lt;/li&gt;
&lt;li&gt;如果Horizontal Layout Group的宽度超过其优选宽度，它将按照各自的灵活宽度比例向子布局元素分配额外的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_HorizontalLayoutGroupInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Padding&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在布局组的边缘之间的填充。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局元素之间的间距。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Child Alignment&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果子布局元素没有填满所有可用空间，使用何种对齐方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Control Child Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组是否控制其子布局元素的宽度和高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Use Child Scale&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组在计算元素的大小和布局时，是否考虑其子布局元素的比例。&lt;!-- raw HTML omitted --&gt;宽度和高度分别对应每个子布局元素的Rect Transform组件中的Scale &amp;gt; X和Scale &amp;gt; Y值。&lt;!-- raw HTML omitted --&gt;你无法使用Animator Controller来动画化Scale值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Child Force Expand&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否强制子布局元素扩展以填充额外的可用空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;vertical-layout-group&#34;&gt;Vertical Layout Group &lt;a href=&#34;#vertical-layout-group&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Vertical Layout Group组件将其子布局元素置于彼此顶部。他们的高度由相应的最小，首选和灵活高度决定，根据以下模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有子布局元素的最小高度被相加，之间的空间也被添加。结果就是Vertical Layout Group的最小高度。&lt;/li&gt;
&lt;li&gt;所有子布局元素的首选高度被相加，之间的空间也被添加。结果就是Vertical Layout Group的首选高度。&lt;/li&gt;
&lt;li&gt;如果Vertical Layout Group处于其最小高度或更小的状态，所有子布局元素也将具有它们的最小高度。&lt;/li&gt;
&lt;li&gt;Vertical Layout Group越接近其首选高度，每个子布局元素也越接近他们的首选高度。&lt;/li&gt;
&lt;li&gt;如果Vertical Layout Group高于其首选高度，它会将额外的空间按照各自的灵活高度的比例分配给子布局元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_VerticalLayoutGroupInspector23.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Padding&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组边缘内部的填充。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局元素之间的间距。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Child Alignment&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果子布局元素没有填充所有可用空间，将使用的对齐方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Control Child Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组是否控制其子布局元素的宽度和高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Use Child Scale&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组在尺寸和布局元素时，是否考虑其子布局元素的缩放。&lt;!-- raw HTML omitted --&gt;宽度和高度对应于每个子布局元素的Rect Transform组件中的Scale &amp;gt; X和Scale &amp;gt; Y值。&lt;!-- raw HTML omitted --&gt;你无法使用Animator Controller来动画这些Scale值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Child Force Expand&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否强制子布局元素扩展以填充额外可用的空间。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;grid-layout-group&#34;&gt;Grid Layout Group &lt;a href=&#34;#grid-layout-group&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Grid Layout Group组件将其子布局元素置于一个格子中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_GridLayoutGroupInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Padding&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局组边缘内部的填充。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Cell Size&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每个组中布局元素的大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Spacing&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;布局元素之间的间距。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Start Corner&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;首个元素所在的角落。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Start Axis&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;沿哪个主轴放置元素。横向会填满整行后才开始新的行。纵向会填满整列后才开始新的列。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Child Alignment&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;如果布局元素没有填满所有可用空间，应使用的对齐方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Constraint&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将网格约束为固定数目的行或列，以帮助自动布局系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Description(描述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与其他布局组不同，Grid Layout Group忽视其包含的布局元素的最小、优选和灵活尺寸属性，而是为所有元素分配固定尺寸，该尺寸由Grid Layout Group自身的Cell Size属性定义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Grid Layout Group and auto layout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用Grid Layout Group作为自动布局设置的一部分时，需要注意一些特殊考虑，例如与Content Size Fitter一起使用。&lt;/p&gt;
&lt;p&gt;自动布局系统独立计算水平和垂直大小。这可能与Grid Layout Group存在冲突，因为行数取决于列数，反之亦然。&lt;/p&gt;
&lt;p&gt;对于任何给定数量的单元格，都有不同组合的行数和列数可以使网格适应其内容。为了帮助布局系统，你可以指定你希望表格具有固定数量的列或行，通过使用Constraint属性。&lt;/p&gt;
&lt;p&gt;以下是一些使用Content Size Fitter搭配布局系统的建议方法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flexible width and fixed height&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果您想设置一个具有灵活宽度和固定高度的网格，当添加更多元素时，网格会水平扩展，您可以按如下方式设置这些属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grid Layout Group Constraint：Fixed Row Count&lt;/li&gt;
&lt;li&gt;Content Size Fitter Horizontal Fit：Preferred Size&lt;/li&gt;
&lt;li&gt;Content Size Fitter Vertical Fit：Preferred Size 或 Unconstrained&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用不受约束的Vertical Fit，那么您需要给网格设定一个足够大的高度，以适应指定的单元格行数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fixed width and flexible height&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果您想设置一个具有固定宽度和灵活高度的网格，当添加更多元素时，网格会垂直扩展，您可以按如下方式设置这些属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grid Layout Group Constraint：Fixed Column Count&lt;/li&gt;
&lt;li&gt;Content Size Fitter Horizontal Fit：Preferred Size 或 Unconstrained&lt;/li&gt;
&lt;li&gt;Content Size Fitter Vertical Fit：Preferred Size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果使用不受约束的Horizontal Fit，那么您需要给网格设定一个足够大的宽度，以适应指定的单元格列数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Both flexible width and height&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果您想设置一个宽度和高度都灵活的网格，您可以实现，但是您将无法控制行和列的具体数量。网格将尝试使行和列的数量大致相同。您可以按如下方式设置这些属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grid Layout Group Constraint：Flexible&lt;/li&gt;
&lt;li&gt;Content Size Fitter Horizontal Fit：Preferred Size&lt;/li&gt;
&lt;li&gt;Content Size Fitter Vertical Fit：Preferred Size&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;event-1&#34;&gt;Event &lt;a href=&#34;#event-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&#34;script---event-system-manager&#34;&gt;Script - Event System Manager &lt;a href=&#34;#script---event-system-manager&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;这个子系统负责控制构成事件的所有其他元素。它协调哪个输入模块当前处于活动状态，哪个GameObject当前被视为&amp;quot;selected&amp;quot;，以及其他一系列高级事件系统概念。&lt;/p&gt;
&lt;p&gt;每次&amp;rsquo;Update&amp;rsquo;，事件系统都会接收到调用，查看其输入模块，并找出应当用于此次更新的输入模块。然后，它将处理工作委派给这些模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;First Selected&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;被首先选定的GameObject。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Send Navigation Events&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;事件系统是否应允许导航事件（移动/提交/取消）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Drag Threshold&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;以像素为单位的拖拽软区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;script---graphic-raycaster&#34;&gt;Script - Graphic Raycaster &lt;a href=&#34;#script---graphic-raycaster&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Graphic Raycaster 用于对 Canvas 进行射线检测。Raycaster 查看 Canvas 上的所有图像，并确定是否有任何图像被击中。&lt;/p&gt;
&lt;p&gt;Graphic Raycaster 可以配置为忽略背面的图形，也可以被存在于其前面的2D或3D对象阻挡。如果您希望强制将此元素的处理置于射线检测的前端或后端，也可以应用手动优先级。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Ignore Reversed Graphics&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;是否应考虑面向远离Graphic Raycaster的图形？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Blocked Objects&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将阻挡图形射线检测的对象类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Blocking Mask&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;阻挡Graphic Raycast的对象类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;script---physics-raycaster&#34;&gt;Script - Physics Raycaster &lt;a href=&#34;#script---physics-raycaster&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Physics Raycaster在场景中对3D对象执行射线投射。这允许将消息发送给实现了事件接口的3D物理对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Depth&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获取配置相机的深度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Event Camera&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;获取此模块使用的相机。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Event Mask&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;相机遮罩和事件遮罩的逻辑与运算。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Final Event Mask&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;相机遮罩和事件遮罩的逻辑与运算。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;script---physics-2d-raycaster&#34;&gt;Script - Physics 2D Raycaster &lt;a href=&#34;#script---physics-2d-raycaster&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Physics 2D Raycaster是针对场景中的2D对象进行射线投射的。这允许向实现事件接口的2D物理对象发送消息。需要使用相机游戏对象，并且如果Physics 3D Raycaster没有添加到相机游戏对象中，它将会被添加到游戏对象中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Event Camera&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将为这个射线投射器生成射线的相机。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Priority&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;相对于其他投射器的优先级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Sort Order Priority&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;基于排序顺序的射线投射器的优先级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Render Order Priority&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;基于渲染顺序的射线投射器的优先级。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;script---standalone-input-module&#34;&gt;Script - Standalone Input Module &lt;a href=&#34;#script---standalone-input-module&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;这个模块旨在使控制器/鼠标输入按预期工作。按钮按压、拖拽等类似的事件会对输入作出响应。&lt;/p&gt;
&lt;p&gt;随着鼠标/输入设备的移动，模块会向组件发送指针事件，并使用Graphics Raycaster和Physics Raycaster来计算当前指针设备指向的元素。你可以根据你的需求配置这些射线投射器以检测或忽略你的场景的某些部分。&lt;/p&gt;
&lt;p&gt;该模块会对通过Input窗口跟踪的输入做出动作事件以及提交/取消事件的响应。该方法适用于键盘和控制器输入。可以在模块的检查器中配置被跟踪的轴和键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Horizontal Axis&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为水平轴按钮输入所需的管理器名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Vertical Axis&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为垂直轴输入所需的管理器名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Submit Button&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为Submit按钮输入所需的管理器名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Cancel Button&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;为Cancel按钮输入所需的管理器名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Input Actions Per Second&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;每秒允许的键盘/控制器输入数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Repeat Delay&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在每秒输入动作重复率生效前的延迟秒数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Force Module Active&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;启用此属性以强制使此Standalone Input Module处于活动状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模块使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垂直/水平轴进行键盘和控制器导航&lt;/li&gt;
&lt;li&gt;提交/取消按钮用于发送提交和取消事件&lt;/li&gt;
&lt;li&gt;存在事件间的超时限制，只允许每秒钟达到最大事件数量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块的流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果从输入窗口输入了有效的轴，则向选定的对象发送移动事件&lt;/li&gt;
&lt;li&gt;如果按下提交或取消按钮，则向选定的对象发送提交或取消事件&lt;/li&gt;
&lt;li&gt;处理鼠标输入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​			如果是新的按压操作：
​					发送PointerEnter事件（发送给沿层次结构向上可以处理的所有对象）
​					发送PointerPress事件
​					缓存拖动处理器（层次结构中可以处理它的第一个元素）
​					向拖动处理器发送BeginDrag事件
​					在事件系统中设定&amp;rsquo;Pressed&amp;rsquo;对象为选定
​			如果这是一个持续的按压：
​					处理移动
​					向缓存的拖动处理器发送DragEvent
​					如果触摸在对象之间移动，处理PointerEnter和PointerExit事件
​			如果这是一个释放：
​					向接收到PointerPress的对象发送PointerUp事件
​					如果当前的悬停对象与PointerPress对象相同，则发送PointerClick事件
​					如果缓存了拖动处理器，则发送一个Drop事件
​					向缓存的拖动处理器发送EndDrag事件
​			处理滚轮事件&lt;/p&gt;
&lt;h5 id=&#34;script---touch-input-module&#34;&gt;Script - Touch Input Module &lt;a href=&#34;#script---touch-input-module&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;注意：TouchInputModule已过时。现在，触摸输入在StandaloneInputModule中处理。&lt;/p&gt;
&lt;p&gt;此模块设计用于处理触摸设备。它会根据用户输入发送触摸和拖动的指针事件。此模块支持多点触控。&lt;/p&gt;
&lt;p&gt;该模块使用场景配置的Raycasters来计算当前正在触摸哪个元素。每一个当前的触摸都会发出一个射线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties(属性)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;属性:&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;strong&gt;功能:&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Force Module Active&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;强制使此模块处于活动状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Details(详情)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模块的流程如下：&lt;/p&gt;
&lt;p&gt;对于每一个触摸事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这是一个新的按压
&lt;ul&gt;
&lt;li&gt;发送PointerEnter事件（发送给层次结构中每一个能处理它的对象）&lt;/li&gt;
&lt;li&gt;发送PointerPress事件&lt;/li&gt;
&lt;li&gt;缓存拖动处理器（在层次结构中能处理它的第一个元素）&lt;/li&gt;
&lt;li&gt;向拖动处理器发送BeginDrag事件&lt;/li&gt;
&lt;li&gt;在事件系统中设置&amp;rsquo;Pressed&amp;rsquo;对象为Selected&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果这是一个持续的按压
&lt;ul&gt;
&lt;li&gt;处理移动&lt;/li&gt;
&lt;li&gt;向缓存的拖动处理器发送DragEvent事件&lt;/li&gt;
&lt;li&gt;如果触摸在对象之间移动，处理PointerEnter和PointerExit事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果这是一个释放
&lt;ul&gt;
&lt;li&gt;向接收到PointerPress的对象发送PointerUp事件&lt;/li&gt;
&lt;li&gt;如果当前悬停对象与PointerPress对象相同，则发送一个PointerClick事件&lt;/li&gt;
&lt;li&gt;如果有拖动处理器缓存，发送一个Drop事件&lt;/li&gt;
&lt;li&gt;向缓存的拖动处理器发送EndDrag事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;script---event-trigger&#34;&gt;Script - Event Trigger &lt;a href=&#34;#script---event-trigger&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Event Trigger从事件系统接收事件，并为每个事件调用已注册的函数。&lt;/p&gt;
&lt;p&gt;你可以使用Event Trigger为每个事件系统事件指定希望调用的函数。你可以将多个函数分配给单个事件，每当Event Trigger接收到该事件，它就会调用这些函数。&lt;/p&gt;
&lt;p&gt;请注意，将Event Trigger组件附加到GameObject上会使该对象拦截所有事件，且此对象不会发生事件冒泡！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Event&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以通过点击添加新事件类型按钮，选择性地将每个受支持的事件包含在Event Trigger中。&lt;/p&gt;
&lt;h3 id=&#34;ui-how-tosui操作指南&#34;&gt;UI How Tos(UI操作指南) &lt;a href=&#34;#ui-how-tosui%e6%93%8d%e4%bd%9c%e6%8c%87%e5%8d%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在这一部分，你可以学习到常见UI任务的解决方案。&lt;/p&gt;
&lt;h4 id=&#34;designing-ui-for-multiple-resolutions为多种分辨率设计ui&#34;&gt;Designing UI for Multiple Resolutions(为多种分辨率设计UI) &lt;a href=&#34;#designing-ui-for-multiple-resolutions%e4%b8%ba%e5%a4%9a%e7%a7%8d%e5%88%86%e8%be%a8%e7%8e%87%e8%ae%be%e8%ae%a1ui&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;现代游戏和应用程序通常需要支持各种不同的屏幕分辨率，特别是UI布局需要能够适应这一点。Unity的UI系统包括了许多用于此目的的工具，可以以各种方式结合使用。&lt;/p&gt;
&lt;p&gt;在这个操作指南中，我们将使用一个简单的案例研究，并在这个背景下查看并比较不同的工具。在我们的案例研究中，我们在屏幕角落有三个按钮，如下图所示，目标是将这种布局适应到各种分辨率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResBase.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在本操作指南中，我们将考虑四种屏幕分辨率：手机HD的纵向（640 x 960）和横向（960 x 640），以及手机SD的纵向（320 x 480）和横向（480 x 320）。该布局最初是在手机HD纵向分辨率下设置的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using anchors to adapt to different aspect ratios(使用锚点适应不同的纵横比)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，UI元素被锚定在父矩形的中心。这意味着它们与中心保持固定的偏移。&lt;/p&gt;
&lt;p&gt;如果将分辨率更改为横向纵横比，那么这种设置下的按钮可能不再位于屏幕的矩形内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResCenter.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;让按钮保持在屏幕内的一种方法是改变布局，使得按钮的位置与屏幕的各自角落相对应。左上角按钮的锚点可以通过检查器中的锚点预设下拉菜单设置为左上角，或者通过在场景视图中拖动三角形的锚点句柄来设置。最好在游戏视图中设置的当前屏幕分辨率是布局最初设计的那个，其中按钮的放置看起来是正确的。同样，左下角和右下角按钮的锚点可以分别设置为左下角和右下角。&lt;/p&gt;
&lt;p&gt;一旦按钮被锚定到各自的角落，当将分辨率改变为不同的纵横比时，它们会坚持在那里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResCorners.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当屏幕大小改变为更大或更小的分辨率时，按钮也会保持在它们各自的角落。但是，由于它们保持以像素指定的原始大小，它们可能占据屏幕的更大或更小的比例。这可能是你想要的，也可能不是，这取决于你希望你的布局在不同分辨率的屏幕上表现如何。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResSizeChange.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这个指南中，我们知道，手机SD竖屏和横屏的较小分辨率并不对应于物理上较小的屏幕，而是对应于像素密度较低的屏幕。在这些低密度的屏幕上，按钮不应该比在高密度屏幕上看起来更大 - 它们应该以相同的大小出现。&lt;/p&gt;
&lt;p&gt;这意味着按钮应该以与屏幕缩小的百分比相同的百分比变小。换句话说，按钮的缩放应该跟随屏幕大小。这就是Canvas Scaler组件能够帮助的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scaling with Screen Size(随屏幕大小缩放)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Canvas Scaler组件可以添加到根Canvas - 一个带有Canvas组件的游戏对象，所有的UI元素都是它的子对象。当通过GameObject菜单创建一个新的Canvas时，它也会默认被添加。&lt;/p&gt;
&lt;p&gt;在Canvas Scaler组件中，你可以将其UI Scale Mode设置为Scale With Screen Size。使用这种缩放模式，你可以指定一个分辨率作为参考。如果当前屏幕分辨率小于或大于这个参考分辨率，Canvas的缩放因子就会相应地设置，所以所有的UI元素都会随着屏幕分辨率一起放大或缩小。&lt;/p&gt;
&lt;p&gt;在我们的案例中，我们将Canvas Scaler设置为Phone HD竖屏分辨率640 x 960。现在，当将屏幕分辨率设置为Phone SD竖屏分辨率320 x 480时，整个布局缩小了，所以它看起来比例相同，就像在全分辨率下一样。所有的东西都缩小了：按钮的大小，它们到屏幕边缘的距离，按钮的图形，和文本元素。这就意味着布局在Phone SD竖屏分辨率下看起来与Phone HD竖屏分辨率下一样，只是像素密度更低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResReferenceResolution.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;需要注意的一点是：添加了Canvas Scaler组件后，也很重要的是要检查布局在其它纵横比下的样子。通过将分辨率回调到Phone HD横屏，我们可以看到按钮现在看起来比它们应该的（和曾经的）更大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResLandscapeWrongScaling.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;造成横屏纵横比下按钮更大的原因归结于Canvas Scaler设置的工作方式。默认情况下，它比较当前分辨率的宽度与Canvas Scaler的宽度，结果用作缩放所有内容的缩放因子。由于当前的横屏分辨率960 x 640的宽度比竖屏Canvas Scaler的640 x 960大1.5倍，因此布局放大了1.5倍。&lt;/p&gt;
&lt;p&gt;该组件有一个名为Match的属性，可以是0（宽度），1（高度）或者介于两者之间的值。默认设置为0，如前所述，它比较当前屏幕宽度与Canvas Scaler宽度。&lt;/p&gt;
&lt;p&gt;如果Match属性设置为0.5，那么它将同时比较当前宽度与参考宽度以及当前高度与参考高度，并选择一个介于两者之间的缩放因子。由于在这种情况下，横屏分辨率宽度大1.5倍，但也短1.5倍，这两个因素相互抵消，产生最终的缩放因子1，这意味着按钮保持原大小。&lt;/p&gt;
&lt;p&gt;至此，布局使用适当的锚定组合和Canvas上的Canvas Scaler组件，支持了所有四种屏幕分辨率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_MultiResAllResolutions.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;making-ui-elements-fit-the-size-of-their-content让ui元素适应其内容的大小&#34;&gt;Making UI elements fit the size of their content(让UI元素适应其内容的大小) &lt;a href=&#34;#making-ui-elements-fit-the-size-of-their-content%e8%ae%a9ui%e5%85%83%e7%b4%a0%e9%80%82%e5%ba%94%e5%85%b6%e5%86%85%e5%ae%b9%e7%9a%84%e5%a4%a7%e5%b0%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;通常在用Rect Transform定位一个UI元素时，它的位置和大小是手动指定的（可选的，包括与父Rect Transform一同拉伸的行为）。&lt;/p&gt;
&lt;p&gt;然而，有时你可能希望这个矩形能自动调整大小以适应UI元素的内容。这可以通过添加一个名为Content Size Fitter的组件来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fit to size of Text(调整以适应文本大小)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了让带有Text组件的Rect Transform适应文本内容，将Content Size Fitter组件添加到同一个拥有Text组件的游戏对象上。然后将Horizontal Fit和Vertical Fit下拉框都设置为Preferred。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it work? (它是如何工作的?)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里发生的是，Text组件作为一个Layout Element，可以提供有关其最小和最佳大小的信息。在手动布局中，这些信息不会被使用。Content Size Fitter是一种Layout Controller，它会监听由Layout Elements提供的布局信息，并根据这些信息控制Rect Transform的大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember the pivot(轴心点的重要)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当UI元素自动调整大小以适应其内容时，你应该特别注意Rect Transform的轴心点。当元素大小改变时，轴心点位置会保持不变，因此通过设置轴心点位置，你可以控制元素是向哪个方向扩大或缩小。例如，如果轴心点在中心，那么元素将会均等地向所有方向扩展；如果轴心点在左上角，那么元素会向右边和下方扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fit to size of UI element with child Text(适应带有子Text的UI元素尺寸)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你有一个UI元素，如Button，它有一个背景图像和一个带有Text组件的子游戏对象，你可能希望整个UI元素适应文本的大小 - 可能还有一些填充。&lt;/p&gt;
&lt;p&gt;要做到这一点，首先在UI元素上添加一个Horizontal Layout Group，然后添加一个Content Size Fitter。将Horizontal Fit、Vertical Fit或两者设置为Preferred。你可以使用Horizontal Layout Group中的padding属性添加和调整填充。&lt;/p&gt;
&lt;p&gt;为什么要使用Horizontal Layout Group呢？其实也可以是Vertical Layout Group - 只要只有一个子元素，它们产生的效果是一样的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it work? (它是如何工作的？)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Horizontal（或Vertical）Layout Group既充当Layout Controller也充当Layout Element。首先，它会监听组中子元素提供的布局信息 - 在这种情况下监听的是子Text。然后，它会确定组必须要有多大（最小值和优选大小），才能包含所有子元素，并作为提供这些有关最小值和优选大小信息的Layout Element。&lt;/p&gt;
&lt;p&gt;Content Size Fitter会侦听同一个Game Object上任何Layout Element（在这种情况下由Horizontal或Vertical Layout Group提供）的布局信息。根据它的设置，它会基于这些信息控制Rect Transform的大小。&lt;/p&gt;
&lt;p&gt;一旦设置了Rect Transform的大小，Horizontal（或Vertical）Layout Group就会确保根据可用的空间对其子元素进行定位和大小设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make children of a Layout Group fit their respective sizes(使Layout Group的子元素适应其各自的尺寸)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你有一个Layout Group（水平或垂直）并希望组中的每一个UI元素适应其各自的内容，你该怎么做呢？&lt;/p&gt;
&lt;p&gt;你不能在每个子元素上都放一个Content Size Fitter。原因是Content Size Fitter想要控制其自身的Rect Transform，但父Layout Group也想要控制子Rect Transform。这会造成冲突，结果是不确定的行为。&lt;/p&gt;
&lt;p&gt;然而，这也并非必要。父Layout Group已经可以使每个子元素适应内容的大小。你需要做的是在Layout Group中禁用Child Force Expand选项。如果子元素本身也是Layout Group，你可能需要在这些子Layout Group中也禁用Child Force Expand选项。&lt;/p&gt;
&lt;p&gt;一旦子元素不再以灵活的宽度扩展，它们的对齐方式可以在Layout Group中通过Child Alignment设置来指定。&lt;/p&gt;
&lt;p&gt;如果你希望一些子元素扩展以填充额外的可用空间，但不是其他子元素呢？你可以通过在你想要扩展的子元素中添加一个Layout Element组件并启用这些Layout Element上的Flexible Width或Flexible Height属性来轻松控制这一点。父Layout Group应该仍然禁用Child Force Expand选项，否则所有的子元素都将灵活地扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it work? (它是如何工作的？)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个游戏对象可以有多个组件，每个组件都提供关于最小、优选和灵活大小的布局信息。一个优先级系统决定哪些值优先于其他值生效。Layout Element组件的优先级高于Text、Image和Layout Group组件，因此可以用来覆盖它们提供的任何布局信息值。&lt;/p&gt;
&lt;p&gt;当Layout Group监听子元素提供的布局信息时，它会考虑到被重新定义的灵活大小。然后，当控制子元素的大小时，它不会让它们大于其优选大小。然而，如果Layout Group启用了Child Force Expand选项，它将始终使所有子元素的灵活大小至少为1。&lt;/p&gt;
&lt;h4 id=&#34;creating-a-world-space-ui创建一个世界空间ui&#34;&gt;Creating a World Space UI(创建一个世界空间UI) &lt;a href=&#34;#creating-a-world-space-ui%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e4%b8%96%e7%95%8c%e7%a9%ba%e9%97%b4ui&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;UI系统使得在场景中的其他2D或3D对象之间创建位于世界中的UI变得非常容易。&lt;/p&gt;
&lt;p&gt;开始时，通过使用GameObject &amp;gt; UI &amp;gt; Image创建一个UI元素（例如一个Image），如果你的场景中还没有的话。这同时也会为你创建一个Canvas。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set the Canvas to World Space(设置Canvas为世界空间)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选中你的Canvas并将渲染模式更改为World Space。&lt;/p&gt;
&lt;p&gt;现在你的Canvas已经位于世界中，只要相机对准它，所有的相机都可以看到它，但是它可能与你场景中的其他对象相比很大。我们稍后再处理这个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decide on a resolution(确定一个分辨率)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，你需要决定Canvas的分辨率应该是多少。如果它是一张图片，那么这张图片的像素分辨率应该是多少呢？像800x600这样的分辨率可能是一个好的起点。你可以在Canvas的Rect Transform的宽度和高度值中输入分辨率。同时设置位置为0,0可能是一个好主意。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Specify the size of the Canvas in the world(指定Canvas在世界中的大小)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，你应该考虑Canvas在世界中应该有多大。你可以使用缩放工具简单地缩小它，直到它有一个看起来不错的大小，或者你可以决定它应该有多少米。&lt;/p&gt;
&lt;p&gt;如果你希望它有特定的宽度（以米为单位），你可以通过使用 meter_size / canvas_width 来计算需要的缩放。例如，如果你希望它宽2米，Canvas的宽度是800，你就会得到2 / 800 = 0.0025。然后，你将Canvas的Rect Transform的Scale属性设置为0.0025，对X、Y和Z都进行设置，以确保它均匀地缩放。&lt;/p&gt;
&lt;p&gt;另一种思考的方式是，你正在控制Canvas中每个像素的大小。如果Canvas的缩放为0.0025，那么这也是Canvas中每个像素在世界中的大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Position the Canvas(定位Canvas)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与设为屏幕空间的Canvas不同，世界空间的Canvas可以在场景中自由定位和旋转。你可以将Canvas放置在任何墙壁、地板、天花板或倾斜的表面（当然，也可以自由地悬挂在空气中）。只需在工具栏中使用常规的翻译和旋转工具即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating UI elements from scripting(通过脚本创建UI元素)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你正在创建一个动态的UI，其中的UI元素基于用户操作或游戏中的其他操作出现、消失或改变，你可能需要编写一个根据自定义逻辑实例化新UI元素的脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating a prefab of the UI element(创建UI元素的预制体)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了能够轻松地动态实例化UI元素，第一步是为你想要实例化的UI元素类型创建一个预制体。在场景中设置UI元素的外观，然后将元素拖入项目视图以将其转换为预制体。&lt;/p&gt;
&lt;p&gt;例如，一个按钮的预制体可以是一个带有Image组件和Button组件的游戏对象，和一个带有Text组件的子游戏对象。你的设置可能会根据你的需要而有所不同。&lt;/p&gt;
&lt;p&gt;你可能会想知道为什么我们没有API方法来创建各种类型的控制，包括视觉效果和所有其他元素。原因是有无数种方式可以设置一个按钮。它是使用图像、文本还是同时使用两者？甚至可能是多个图像？文本的字体、颜色、字体大小和对齐是什么样的？图像应该使用什么精灵或精灵？通过让你制作一个预制体并实例化它，你可以按照你想要的方式设置它。如果你以后想要改变UI的外观和感觉，你只需要改变预制体，然后它就会体现在你的UI中，包括动态创建的UI。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instantiating the UI element(实例化UI元素)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像通常一样使用Instantiate方法实例化UI元素的预制体。在设置实例化UI元素的父级时，建议使用Transform.SetParent方法，并将worldPositionStays参数设置为false。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Positioning the UI element(定位UI元素)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UI元素通常使用其Rect Transform进行定位。如果UI元素是Layout Group的子元素，那么它将被自动定位，可以跳过定位步骤。&lt;/p&gt;
&lt;p&gt;在定位Rect Transform时，首先确定它是否具有或应具有任何拉伸行为。当anchorMin和anchorMax属性不相同时，会发生拉伸行为。&lt;/p&gt;
&lt;p&gt;对于非拉伸的Rect Transform，通过设置anchoredPosition和sizeDelta属性最容易设置位置。anchoredPosition指定了枢轴相对于锚点的位置。sizeDelta在没有拉伸时就和大小一样。&lt;/p&gt;
&lt;p&gt;对于拉伸的Rect Transform，使用offsetMin和offsetMax属性设置位置可能更简单。offsetMin属性指定了rect的左下角相对于左下锚点的角。offsetMax属性指定了rect的右上角相对于右上锚点的角。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customizing the UI Element(自定义UI元素)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你要动态实例化多个UI元素，那么你可能不希望它们看起来和做的事情都一样。无论是在菜单中的按钮，库存中的物品，还是其他东西，你可能希望各个项目有不同的文本或图像，当与之交互时，做不同的事情。&lt;/p&gt;
&lt;p&gt;这是通过获取各种组件并更改其属性来完成的。参见Image和Text组件的脚本引用，以及如何从脚本中使用UnityEvents。&lt;/p&gt;
&lt;h4 id=&#34;creating-screen-transitions创建屏幕过渡&#34;&gt;Creating Screen Transitions(创建屏幕过渡) &lt;a href=&#34;#creating-screen-transitions%e5%88%9b%e5%bb%ba%e5%b1%8f%e5%b9%95%e8%bf%87%e6%b8%a1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;需要在多个UI屏幕之间进行转换是相当常见的。在这个页面中，我们将探讨一种使用动画和状态机来驱动和控制每个屏幕的简单方式来创建和管理这些过渡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overview(概述)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高级思想是我们的每个屏幕都将有一个动画控制器，包含两个状态（打开和关闭）和一个布尔参数（打开）。要在屏幕之间进行转换，你只需要关闭当前打开的屏幕并打开所需的屏幕。为了简化这个过程，我们将创建一个小型的类ScreenManager，它将跟踪并处理关闭任何已经打开的屏幕。触发转换的按钮只需请求ScreenManager打开所需的屏幕。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thinking about Navigation(关于导航)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你计划支持控制器/键盘导航的UI元素，那么有几件事情是需要注意的。避免在屏幕外部有Selectable元素是很重要的，因为那会让玩家能够选择到屏幕外的元素，我们可以通过停用任何屏幕外的层次结构来做到这一点。我们还需要确保当显示新屏幕时，我们设置其作为选定的元素，否则玩家将无法导航到新的屏幕。我们将在下面的ScreenManager类中处理所有这些。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Setting up the Animator Controller(设置动画控制器)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;让我们来看看为动画控制器做屏幕过渡的最常见和最小的设置。控制器将需要一个布尔参数（打开）和两个状态（打开和关闭），每个状态都应该有只有一个关键帧的动画，这样我们就让状态机为我们做过渡混合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScreenTransitionAnimatorOpen.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScreenTransitionAnimatorClosed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在我们需要创建两种状态之间的转换，让我们从Open到Closed的转换开始，并正确设置条件，我们希望当参数Open设置为false时，从Open转换到Closed。现在我们创建从Closed到Open的转换，并设置条件为当参数Open为true时，从Closed转换到Open。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScreenTransitionAnimatorTransitionToOpen.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScreenTransitionAnimatorTransitionToClosed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Managing the screens(管理屏幕)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了上述所有设置，我们唯一缺少的就是在我们想要过渡的屏幕的Animator上把参数Open设置为true，并在当前打开的屏幕的Animator上把Open设置为false。为了做到这一点，我们将创建一个小脚本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine.UI;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; UnityEngine.EventSystems;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ScreenManager&lt;/span&gt; : MonoBehaviour {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Screen to open automatically at the start of the Scene&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Animator initiallyOpen;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Currently Open Screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Animator m_Open;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Hash of the parameter we use to control the transitions.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m_OpenParameterId;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//The GameObject Selected before we opened the current Screen.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Used when closing a Screen, so we can go back to the button that opened it.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; GameObject m_PreviouslySelected;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Animator State and Transition names we need to check against.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; k_OpenTransitionName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Open&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; k_ClosedStateName = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Closed&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OnEnable()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//We cache the Hash to the &amp;#34;Open&amp;#34; Parameter, so we can feed to Animator.SetBool.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_OpenParameterId = Animator.StringToHash (k_OpenTransitionName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//If set, open the initial Screen now.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (initiallyOpen == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OpenPanel(initiallyOpen);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Closes the currently open panel and opens the provided one.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//It also takes care of handling the navigation, setting the new Selected element.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; OpenPanel (Animator anim)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m_Open == anim)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Activate the new Screen hierarchy so we can animate it.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        anim.gameObject.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Save the currently selected button that was used to open this Screen. (CloseCurrent will modify it)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; newPreviouslySelected = EventSystem.current.currentSelectedGameObject;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Move the Screen to front.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        anim.transform.SetAsLastSibling();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CloseCurrent();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_PreviouslySelected = newPreviouslySelected;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Set the new Screen as then open one.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_Open = anim;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Start the open animation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_Open.SetBool(m_OpenParameterId, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Set an element in the new screen as the new Selected one.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        GameObject go = FindFirstEnabledSelectable(anim.gameObject);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SetSelected(go);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Finds the first Selectable element in the providade hierarchy.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; GameObject FindFirstEnabledSelectable (GameObject gameObject)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        GameObject go = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectables = gameObject.GetComponentsInChildren&amp;lt;Selectable&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; selectable &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; selectables) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (selectable.IsActive () &amp;amp;&amp;amp; selectable.IsInteractable ()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                go = selectable.gameObject;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; go;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Closes the currently open Screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//It also takes care of navigation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Reverting selection to the Selectable used before opening the current screen.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CloseCurrent()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m_Open == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Start the close animation.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_Open.SetBool(m_OpenParameterId, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Reverting selection to the Selectable used before opening the current screen.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SetSelected(m_PreviouslySelected);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Start Coroutine to disable the hierarchy when closing animation finishes.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StartCoroutine(DisablePanelDeleyed(m_Open));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//No screen open.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_Open = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Coroutine that will detect when the Closing animation is finished and it will deactivate the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//hierarchy.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IEnumerator DisablePanelDeleyed(Animator anim)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; closedStateReached = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; wantToClose = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (!closedStateReached &amp;amp;&amp;amp; wantToClose)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!anim.IsInTransition(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                closedStateReached = anim.GetCurrentAnimatorStateInfo(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;).IsName(k_ClosedStateName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            wantToClose = !anim.GetBool(m_OpenParameterId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; WaitForEndOfFrame();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wantToClose)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            anim.gameObject.SetActive(&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//Make the provided GameObject selected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//When using the mouse/touch we actually want to set it as the previously selected and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//set nothing as selected for now.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetSelected(GameObject go)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Select the GameObject.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventSystem.current.SetSelectedGameObject(go);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//If we are using the keyboard right now, that&amp;#39;s all we need to do.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; standaloneInputModule = EventSystem.current.currentInputModule &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; StandaloneInputModule;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (standaloneInputModule != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//Since we are using a pointer device, we don&amp;#39;t want anything selected.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//But if the user switches to the keyboard, we want to start the navigation from the provided game object.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//So here we set the current Selected to null, so the provided gameObject becomes the Last Selected in the EventSystem.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EventSystem.current.SetSelectedGameObject(&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们把这个脚本挂起来，我们通过创建一个新的GameObject来实现这一点，我们可以把它重命名为&amp;quot;ScreenManager&amp;quot;，并添加上面的组件到它上面。你可以给它分配一个初始屏幕，这个屏幕在你的场景开始时会被打开。&lt;/p&gt;
&lt;p&gt;现在，让我们来做最后的部分，让UI按钮工作起来。选择应该触发屏幕过渡的按钮，并在检视器中的On Click()列表下添加一个新的动作。把我们刚创建的ScreenManager GameObject拖到ObjectField上，在下拉菜单中选择ScreenManager-&amp;gt;OpenPanel (Animator)，并把你希望用户点击按钮时打开的面板拖拽到最后的ObjectField上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-09-unity-ugui/UI_ScreenTransitionButtonInspector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes(备注)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种技术只需要每个屏幕都有一个带有Open参数和Closed状态的AnimatorController就可以工作&amp;ndash;你的屏幕或状态机器是如何构造的并不重要。这种技术也非常适用于嵌套屏幕，这意味着你只需要每个嵌套层级一个ScreenManager。&lt;/p&gt;
&lt;p&gt;我们在上面设置的状态机器的默认状态是Closed，所以所有使用这个控制器的屏幕都开始为关闭状态。ScreenManager提供了一个initiallyOpen属性，所以你可以指定哪个屏幕首先显示。&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frame Debugger</title>
      <link>https://www.chenqiaoqian.com/2023/07/03/2023-07-05-unity-framedebugger/</link>
      <pubDate>Mon, 03 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/03/2023-07-05-unity-framedebugger/</guid>
      <description>&lt;p&gt;帧调试器 (Frame Debugger) 可将正在运行的游戏的状态冻结到特定帧来自由回放，并查看用于渲染该帧的各个DrawCall。除了列出DrawCall调用，调试器还可逐个单步执行这些DrawCall，以便详细查看游戏视图是如何从场景的图形元素构建的。&lt;/p&gt;
&lt;h2 id=&#34;frame-debugger&#34;&gt;Frame Debugger &lt;a href=&#34;#frame-debugger&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;使用帧调试器&#34;&gt;使用帧调试器 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e5%b8%a7%e8%b0%83%e8%af%95%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Frame Debugger 窗口（菜单：Window &amp;gt; Analysis &amp;gt; Frame Debugger）,打开后点击Enable，会显示DrawCall调用信息。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-07-unity-framedebugger/2023-07-07-unity-framedebugger-2.png&#34; alt=&#34;&#34;&gt;
以上图为例，显示该帧有7次DrawCall，结合Profiler可以进一步确认
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-07-unity-framedebugger/2023-07-07-unity-framedebugger-3.png&#34; alt=&#34;&#34;&gt;
单独点击Frame Debugger左侧，可以查看DrawCall渲染顺序
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-07-unity-framedebugger/2023-07-07-unity-framedebugger-1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;rendertarget面板&#34;&gt;RenderTarget面板 &lt;a href=&#34;#rendertarget%e9%9d%a2%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-07-unity-framedebugger/2023-07-07-unity-framedebugger-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Channels：分别提供了仅仅显示对应颜色Channle。&lt;/p&gt;
&lt;p&gt;Shader：渲染这个物体采用的是哪个Shader的哪个SubShader。&lt;/p&gt;
&lt;p&gt;Blend：着色到目标的颜色混合规则。&lt;/p&gt;
&lt;p&gt;ZClip：开启片元深度检测模式，如果一个片元在near与far的外面就会被丢弃。&lt;/p&gt;
&lt;p&gt;ZTest：深度测试的规则，根据通过深度测试的才会被渲染。&lt;/p&gt;
&lt;p&gt;ZWrite：是否将当前片元的深度信息写入深度缓存。&lt;/p&gt;
&lt;p&gt;Cull：裁剪剔除的模式，有back, front, none三种模式，分别是裁剪剔除掉背对摄像机的面，裁剪提出掉真对摄像机的面和不裁剪剔除。&lt;/p&gt;
&lt;p&gt;Why Drawcall cannot be batched?：不能合批的原因描述。&lt;/p&gt;
&lt;p&gt;ShaderProperties：CPU传递给GPU的数据的详细信息。&lt;/p&gt;
&lt;h3 id=&#34;注意事项&#34;&gt;注意事项： &lt;a href=&#34;#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;当Frame Debugger点击Enable后，编辑器处于暂停状态，点击DrawCall渲染次序，可以发现某些时候，DrawCall次序会不同发生变化。&lt;/p&gt;
&lt;p&gt;原因：当点击Frame Debugger不同DrawCall时，Unity会传递一&lt;strong&gt;帧&lt;/strong&gt;，所以行为的Mono都会执行一次Update，因此Update里面的逻辑也会被执行。Unity使用Time.Scale = 0来实现暂停，Time.deltaTime将为零并且Time.time在下一帧中不会改变，如果Update逻辑中使用了改两个值逻辑也将保持不变。 但是 Time.unscaledTime 和 Time.unscaledDeltaTime 始终有效，即使编辑器已经处于暂停状态，Frame Debugger点击的时候DrawCall也会发生变化。&lt;/p&gt;
&lt;p&gt;总之，如果Update方法中有一些逻辑，而不是使用 Time.scale计算时间，那么即使编辑器暂停，也会在&lt;strong&gt;帧&lt;/strong&gt;通过时进行更改。&lt;/p&gt;
&lt;p&gt;解决方案：可以通过使用UnityEditor.EditorApplication.isPaused在一些关键的Update进行检查即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#if&lt;/span&gt; UNITY_EDITOR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(UnityEditor.EditorApplication.isPaused)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity内置渲染管线-基础语法</title>
      <link>https://www.chenqiaoqian.com/2023/07/03/buildin-renderpipeline-base/</link>
      <pubDate>Mon, 03 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/03/buildin-renderpipeline-base/</guid>
      <description>&lt;p&gt;Shader(着色器)是用来实现图像渲染的，用来替代固定渲染管线的可编辑程序。&lt;/p&gt;
&lt;h2 id=&#34;unity-shader基础&#34;&gt;Unity Shader基础 &lt;a href=&#34;#unity-shader%e5%9f%ba%e7%a1%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;开发语言&#34;&gt;开发语言 &lt;a href=&#34;#%e5%bc%80%e5%8f%91%e8%af%ad%e8%a8%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在Unity中，所有的Unity Shader都通过ShaderLab来编写。ShaderLab是Unity提供编写Unity Shader的一种说明性语言。在Unity中通常使用着色器语言CG和HLSL嵌入进ShaderLab中。&lt;/p&gt;
&lt;h3 id=&#34;开发工具&#34;&gt;开发工具 &lt;a href=&#34;#%e5%bc%80%e5%8f%91%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Shader代码编写推荐使用VSCode + ShaderlabVSCode(Free)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-1.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;下载build-in-shaders&#34;&gt;下载Build In Shaders &lt;a href=&#34;#%e4%b8%8b%e8%bd%bdbuild-in-shaders&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Unity官网下载Build In Shaders合集，以便参考。&lt;/p&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shader &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Study/Hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//Shader的真正名字  可以是路径式的格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*材质球参数及UI面板
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://docs.unity3d.com/cn/current/Manual/SL-Properties.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://docs.unity3d.com/cn/current/ScriptReference/MaterialPropertyDrawer.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	https://zhuanlan.zhihu.com/p/93194054
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Properties
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _MainTex (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Texture&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2D&lt;/span&gt;) = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	这是为了让你可以在一个Shader文件中写多种版本的Shader，但只有一个会被使用。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	提供多个版本的SubShader，Unity可以根据对应平台选择最合适的Shader。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;	*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SubShader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		标签属性，有两种：一种是SubShader层级，一种在Pass层级
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		https://docs.unity3d.com/cn/current/Manual/SL-SubShaderTags.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		https://docs.unity3d.com/cn/current/Manual/SL-PassTags.html
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Tags { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RenderType&amp;#34;&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Opaque&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		Pass里面的内容Shader代码真正起作用的地方，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		一个Pass对应一个真正意义上运行在GPU上的完整着色器(Vertex-Fragment Shader)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		一个SubShader里面可以包含多个Pass，每个Pass会被按顺序执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Pass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            CGPROGRAM&lt;span style=&#34;color:#75715e&#34;&gt;//Shader代码从这里开始，以下为CG着色语言&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#pragma&lt;/span&gt; vertex vert
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;#pragma&lt;/span&gt; fragment frag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UnityCG.cginc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;//https://docs.unity3d.com/Manual/SL-VertexProgramInputs.html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//CPU向顶点Shader提供的模型数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//冒号后面的是特定语义词，告诉CPU需要哪些类似的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				float4 vertex : POSITION; &lt;span style=&#34;color:#75715e&#34;&gt;//模型空间顶点坐标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord0 : TEXCOORD0; &lt;span style=&#34;color:#75715e&#34;&gt;//第一套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord1 : TEXCOORD1; &lt;span style=&#34;color:#75715e&#34;&gt;//第二套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord2 : TEXCOORD2; &lt;span style=&#34;color:#75715e&#34;&gt;//第二套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half2 texcoord4 : TEXCOORD3;  &lt;span style=&#34;color:#75715e&#34;&gt;//模型最多只能有4套UV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half4 color : COLOR; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点颜色&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half3 normal : NORMAL; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点法线&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				half4 tangent : TANGENT; &lt;span style=&#34;color:#75715e&#34;&gt;//顶点切线(模型导入Unity后自动计算得到)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v2f&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//自定义数据结构体，顶点着色器输出的数据，也是片元着色器输入数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                float4 vertex : SV_POSITION;&lt;span style=&#34;color:#75715e&#34;&gt;//输出裁剪空间下的顶点坐标数据，给光栅化使用，必须要写的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;//注意跟上方的TEXCOORD的意义是不一样的，上方代表的是UV，这里可以是任意数据。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//插值器：输出后会被光栅化进行插值，而后作为输入数据，进入片元Shader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#75715e&#34;&gt;//最多可以写16个：TEXCOORD0 ~ TEXCOORD15。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                float2 uv : TEXCOORD0;&lt;span style=&#34;color:#75715e&#34;&gt;//自定义数据体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			Shader内的变量声明，如果跟上面Properties模块内的参数同名，就可以产生链接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;			*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sampler2D _MainTex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            float4 _MainTex_ST;&lt;span style=&#34;color:#75715e&#34;&gt;//纹理坐标_ST固定写法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            v2f vert (appdata v)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                v2f o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                o.vertex = UnityObjectToClipPos(v.vertex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                o.uv = TRANSFORM_TEX(v.texcoord0, _MainTex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                UNITY_TRANSFER_FOG(o,o.vertex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; o;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            fixed4 frag (v2f i) : SV_Target
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                fixed4 col = tex2D(_MainTex, i.uv);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; col;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ENDCG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;properties&#34;&gt;Properties &lt;a href=&#34;#properties&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Properties语义块包含了一系列属性，这些属性会显式的出现在材质面板中。便于开发者在材质面板中能够方便地调整各种材质属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;subshader&#34;&gt;SubShader &lt;a href=&#34;#subshader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;一个Unity Shader文件至少包含一个SubShader语义块。加载时，unity会扫描所有的SubShader语义块，并选择第一个能在目标平台上运行的SubShader。如果都不支持，会使用Fallback指定的Unity Shader。&lt;/p&gt;
&lt;p&gt;仅在SubShader中使用的Tag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;渲染状态设置&#34;&gt;渲染状态设置 &lt;a href=&#34;#%e6%b8%b2%e6%9f%93%e7%8a%b6%e6%80%81%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果在SubShader块中设置了状态，就会应用到全部的Pass。可以在Pass中单独设置状态。&lt;/p&gt;
&lt;h4 id=&#34;pass&#34;&gt;Pass &lt;a href=&#34;#pass&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Shader代码真正起作用的地方，一个Pass对应一个真正意义上运行在GPU上的完整着色流程。&lt;/p&gt;
&lt;p&gt;仅在SubShader中使用的Tag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个SubShader里面可以包含多个Pass，每个Pass会被按顺序执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-03-unity-buildin-renderpipeline-base/2023-07-03-unity-buildin-renderpipeline-base-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cg和glsl常用函数&#34;&gt;CG和GLSL常用函数 &lt;a href=&#34;#cg%e5%92%8cglsl%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;数学函数&#34;&gt;数学函数 &lt;a href=&#34;#%e6%95%b0%e5%ad%a6%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;GLSL语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ceil(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ceil(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;floor(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;floor(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*fmod(x,y)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*mod(x, y)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*返回x/y的余数。如果y为0，结果不可预料。*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*frac(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*fract(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*返回标量或矢量的小数*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;frexp(x, out i)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;将浮点数 x 分解为尾数和指数，即 x = m* 2^exp，返回 m，并将指数存入 exp 中；如果 x 为 0，则尾数和指数都返回 0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;modf(x, out ip)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;round(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回四舍五入值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算ex的值，e=2.71828182845904523536&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exp2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算2x的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log2(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算log2(x)的值，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;log10(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算lg(x)的值，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;max(a, b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;max(a, b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;比较两个标量或等长向量元素，返回最大值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;min(a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;min(a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;比较两个标量或等长向量元素，返回最小值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;pow(x, y)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;pow(x, y)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算xy的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sqrt(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sqrt(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;求x的平方根，，x必须大于0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*rsqrt(x)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*inversesqrt(x)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*x的平方根的倒数，x必须大于0*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;abs(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;abs(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回输入参数的绝对值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ldexp(x, n)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x∗2n的值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(M, N)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*M*N**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*矩阵M和矩阵N的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(M, v)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*M*v**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*矩阵M和列向量v的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*mul(v, M)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*v* M**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*行向量v和矩阵M的积*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;determinant(m)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算矩阵的行列式因子。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;transpose(M)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;asin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;asin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反正弦函数,输入参数取值区间为，返回角度值范围为[−π/2,π/2]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;acos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;acos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;反正切函数，返回角度值范围为[−π/2,π/2]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan2(y,x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;atan2(y,x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。atan(x) = atan2(x, float(1))。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sin(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数为弧度，计算正弦值，返回值范围 为[-1,1]&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cos(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回弧度x的余弦值。返回值范围为&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x正切值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sincos(float x, out s, out c)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于“同时需要计算sin值和cos值的情况”，比分别运算要快很多!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sinh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x的双曲正弦&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cosh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tanh(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算x的双曲线切线&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;radians(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;radians(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;函数将角度值转换为弧度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;degrees(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;degrees(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数为弧度值(radians)，函数将其转换为角度值(degrees)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cross(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;cross(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;lit(NdotL, NdotH, m)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 N表示法向量； L表示入射光向量； H表示半角向量； m表示高光系数。 X位表示环境光的贡献，总是1.0; Y位代表散射光的贡献，如果 N∙L&amp;lt;0，则为0；否则为N∙L Z位代表镜面光的贡献，如果N∙L&amp;lt;0 或者N∙H&amp;lt;0，则位0；否则为(N∙L)m; W位始终位1.0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;all(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;all(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果输入参数均不为0，则返回ture； 否则返回flase。&amp;amp;&amp;amp;运算&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;any(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;any(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数只要有其中一个不为0，则返回true。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isfinite(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isinf(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;isnan(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;step(a, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;step(a, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x&amp;lt;a, 返回0；否则返回1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sign(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;sign(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x&amp;gt;0则返回1；如果x=0返回0；如果x&amp;lt;0则返回-1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;dot(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;dot(A,B)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量（输入参数方面，点积和叉积函数有很大不同）。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;noise(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;clamp(x,a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;clamp(x,a,b)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;如果x值小于a，则返回a； 如果x值大于b，返回b； 否则，返回x。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*lerp(a, b, f)*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;em&gt;&lt;em&gt;*&lt;/em&gt;*mix(a, b, f)**&lt;/em&gt;*&lt;/em&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;&lt;strong&gt;*计算或者的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。*&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;saturate(x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把x限制到[0,1]之间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;smoothstep(min, max, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;smoothstep(min, max, x)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;值x位于min、max区间中。 如果x=min，返回0；如果x=max，返回1； 如果x在两者之间，按照下列公式返回数据： –2∗((x–min)/(max–min))3+3∗((x–min)/(max–min))2&lt;strong&gt;&lt;strong&gt;float smoothstep(float a, float b, float x)&lt;/strong&gt;&lt;/strong&gt;{&lt;/strong&gt;    &lt;strong&gt;float t = saturate((x - a)/(b - a)); return t*t*(3.0 - (2.0*t));****}&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;几何函数&#34;&gt;几何函数 &lt;a href=&#34;#%e5%87%a0%e4%bd%95%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;GLSL语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;distance(pt1, pt2)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;distance(pt1, pt2)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;两点之间的欧几里德距离（Euclidean distance）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;faceforward(N,I,Ng)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;faceforward(N,I,Ng)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据 矢量 N 与Nref 调整法向量,如果Ng•I &amp;lt; 0 ，返回 N；否则返回-N。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;length(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;length(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回一个向量的模，即sqrt(dot(v,v))&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;normalize(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;normalize(v)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;返回v向量的单位向量&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;reflect(I, N)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;reflect(I, N)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据入射光方向向量 I，和顶点法向量 N，计算反射光方向向量。 其中 I 和 N 必须被归一化，需要非常注意的是，这个 I 是指向顶点的； 函数只对三元向量有效&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;refract(I,N,eta)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;refract(I,N,eta)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算折射向量，I 为入射光线，N 为法向量，eta 为折射系数； 其中 I 和 N 必须被归一化，如果 I 和 N 之间的夹角太大，则返回（0，0，0），也就是没有折射光线；I 是指向顶点的； 函数只对三元向量有效&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;纹理映射函数&#34;&gt;纹理映射函数 &lt;a href=&#34;#%e7%ba%b9%e7%90%86%e6%98%a0%e5%b0%84%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CG语言&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tex1D(sampler1D tex, float s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;tex1D(sampler1D tex, float s, float dsdx, float dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询一维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1D(sampler1D tex, float2 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询一维纹理， 并进行深度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1Dproj(sampler1D tex, float2 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维投影纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex1Dproj(sampler1D tex, float3 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一维投影纹理查询，并比较深度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float2 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询二维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float3 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;使用导数值（derivatives）查询二维纹理，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2Dproj(sampler2D tex, float3 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex2Dproj(sampler2D tex, float4 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影纹理查询，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT(samplerRECT tex, float2 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;exRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影使用导数的矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT (samplerRECT tex, float3 sz)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影深度比较矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT proj(samplerRECT tex, float3 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影矩形纹理查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texRECT proj(samplerRECT tex, float3 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;二维投影矩形纹理深度比较查询（OpenGL独有）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3D(sampler3D tex, float s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;三维纹理查询&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;结合导数值（derivatives）查询三维纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Tex3Dproj(sampler3D tex, float4 szq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询三维投影纹理，并进行深度值比较&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBE(samplerCUBE tex, float3 s)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;结合导数值（derivatives）查询立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;texCUBEproj (samplerCUBE tex, float4 sq)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;查询投影立方体纹理&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;偏导函数&#34;&gt;偏导函数 &lt;a href=&#34;#%e5%81%8f%e5%af%bc%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ddx(a)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;近似a关于屏幕空间x轴的偏导数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;ddy(a)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;近似a关于屏幕空间y轴的偏导数&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;unity常用内置函数和变量&#34;&gt;Unity常用内置函数和变量 &lt;a href=&#34;#unity%e5%b8%b8%e7%94%a8%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0%e5%92%8c%e5%8f%98%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;顶点着色器输入结构体&#34;&gt;顶点着色器输入结构体 &lt;a href=&#34;#%e9%a1%b6%e7%82%b9%e7%9d%80%e8%89%b2%e5%99%a8%e8%be%93%e5%85%a5%e7%bb%93%e6%9e%84%e4%bd%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包含的变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_base&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点法线、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_tan&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点切线、顶点法线、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_full&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、顶点切线、顶点法线、四组（或更多）纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;appdata_img&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输入&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;顶点位置、第一组纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_base&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_tan&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 tangent : TANGENT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_full&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 tangent : TANGENT;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float3 normal : NORMAL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord1 : TEXCOORD1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord2 : TEXCOORD2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 texcoord3 : TEXCOORD3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fixed4 color : COLOR;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appdata_img&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    float4 vertex : POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    half2 texcoord : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;顶点着色器输出&#34;&gt;顶点着色器输出 &lt;a href=&#34;#%e9%a1%b6%e7%82%b9%e7%9d%80%e8%89%b2%e5%99%a8%e8%be%93%e5%87%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;包含的变量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;v2f_img&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于顶点着色器输出&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;裁剪空间中的位置、纹理坐标&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v2f_img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        float4 pos : SV_POSITION;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        half2 uv : TEXCOORD0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNITY_VERTEX_INPUT_INSTANCE_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        UNITY_VERTEX_OUTPUT_STEREO
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;空间变换函数&#34;&gt;空间变换函数 &lt;a href=&#34;#%e7%a9%ba%e9%97%b4%e5%8f%98%e6%8d%a2%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 UnityWorldToClipPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把世界坐标空间中某一点pos变换到齐次裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 UnityViewToClipPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把观察坐标空间中某一点pos变换到齐次裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToViewPos(float3 pos或float4 pos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;模型局部空间坐标系中某一个点pos变换到观察空间坐标系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldToViewPos(float3 pos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把世界坐标系下的一个点pos变换到观察空间坐标系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToWorldDir(float3 dir )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把方向矢量从模型空间转换到世界空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldToObjectDir(float3 dir )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把方向矢量从世界空间转换到模型空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityObjectToWorldNormal(float3 norm )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;将法线从模型空间转换到世界空间（方向已单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldSpaceLightDir(float3 worldPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数worldPos是一个世界坐标系下的坐标，得到世界空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 WorldSpaceLightDir(float4 localPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到世界空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 ObjSpaceLightDir(float4 v )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到模型空间中从该点到光源（_WorldSpaceLightPos0）的光照方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 UnityWorldSpaceViewDir(float3 worldPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入参数worldPos是一个世界坐标系下的坐标，得到世界空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 WorldSpaceViewDir(float4 localPos )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到世界空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 ObjSpaceViewDir(float4 v )&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;输入一个模型顶点坐标，得到模型空间中从该点到摄像机的观察方向。（方向没单位化）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;屏幕空间函数&#34;&gt;屏幕空间函数 &lt;a href=&#34;#%e5%b1%8f%e5%b9%95%e7%a9%ba%e9%97%b4%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 ComputeScreenPos (float4 clipPos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算用于执行屏幕空间贴图纹理采样的纹理坐标。输入是裁剪空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 ComputeGrabScreenPos (float4 clipPos)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;计算用于 GrabPass 纹理采样的纹理坐标。输入是裁剪空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;内置变量矩阵&#34;&gt;内置变量矩阵 &lt;a href=&#34;#%e5%86%85%e7%bd%ae%e5%8f%98%e9%87%8f%e7%9f%a9%e9%98%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;变量名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MVP&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的模型*观察*投影矩阵，用于将顶点/方向矢量从模型空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的模型*观察矩阵，用于将顶点/方向矢量从模型空间转换到观察空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_V&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的观察矩阵，用于将顶点/方向矢量从世界空间转换到观察空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_P&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的投影矩阵，用于将顶点/方向矢量从观察空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_VP&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前的观察*投影矩阵，用于将顶点/方向矢量从世界空间转换到裁剪空间&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_T_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV的转置矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_IT_MV&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;UNITY_MATRIX_MV的逆转置矩阵，用于将法线从模型空间转换到观察空间，也可以用于得到UNITY_MATRIX_MV的逆矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;unity_ObjectToWorld&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前模型矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;unity_WorldToObject&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;当前世界矩阵的逆矩阵。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;摄像机和屏幕参数&#34;&gt;摄像机和屏幕参数 &lt;a href=&#34;#%e6%91%84%e5%83%8f%e6%9c%ba%e5%92%8c%e5%b1%8f%e5%b9%95%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float3 _WorldSpaceCameraPos&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机在世界空间中的位置&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ProjectionParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=1.0(或-1.0，如果正在使用一个翻转的投影矩阵进行渲染)，y=Near,z=Far,w=1.0+1.0/Far,其中Near和Far分别是近裁剪平面和远裁剪平面到摄像机的距离&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ScreenParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=width,y=height,z=1.0+1.0/width,w=1.0+1.0/height,其中width和height分别是该摄像机的渲染目标（render target）的像素宽度和高度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _ZBufferParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=1-Far/Near,y=Far/Near,z=x/Far,w=y/Far,该变量用于线性化Z缓存中的深度值&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_OrthoParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;x=width,y=height,z没有定义,w=1.0(该摄像机是正交摄像机)或w=0.0（该摄像机是透视摄像机），其中width和height是正交投影摄像机的宽度和高度&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 unity_CameraProjection&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的投影矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 unity_CameraInvProjection&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的投影矩阵的逆矩阵&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_CameraWorldClipPlanes[6]&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;该摄像机的6个裁剪平面在世界空间下的等式，按左、右、下、上、近、远裁剪平面&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;时间参数&#34;&gt;时间参数 &lt;a href=&#34;#%e6%97%b6%e9%97%b4%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _Time&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;自关卡加载以来的时间 (t/20, t, t*2, t*3)，用于将着色器中的内容动画化&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _SinTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;时间正弦：(t/8, t/4, t/2, t)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _CosTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;时间余弦：(t/8, t/4, t/2, t)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_DeltaTime&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;增量时间：(dt, 1/dt, smoothDt, 1/smoothDt)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;光照相关参数前向渲染&#34;&gt;光照相关参数(前向渲染) &lt;a href=&#34;#%e5%85%89%e7%85%a7%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0%e5%89%8d%e5%90%91%e6%b8%b2%e6%9f%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 _LightColor0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（在 Lighting.cginc 中声明）光源颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 _WorldSpaceLightPos0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;方向光：（世界空间方向，0）。其他光源：（世界空间位置，1）。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4 _LightMatrix0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（在 AutoLight.cginc 中声明） 世界/光源矩阵。用于对剪影和衰减纹理进行采样。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_4LightPosX0、unity_4LightPosY0、unity_4LightPosZ0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的世界空间位置。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_4LightAtten0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的衰减因子。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half4[4] unity_LightColor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;（仅限 ForwardBase 通道）前四个非重要点光源的颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4x4[4] unity_WorldToShadow&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;世界/阴影矩阵。聚光灯的一个矩阵，方向光级联最多有四个矩阵。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;光照相关参数延迟渲染&#34;&gt;光照相关参数(延迟渲染) &lt;a href=&#34;#%e5%85%89%e7%85%a7%e7%9b%b8%e5%85%b3%e5%8f%82%e6%95%b0%e5%bb%b6%e8%bf%9f%e6%b8%b2%e6%9f%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;参数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientSky&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的天空环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientEquato&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的赤道环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_AmbientGround&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;梯度环境光照情况下的地面环境光照颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 UNITY_LIGHTMODEL_AMBIENT&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;环境光照颜色（梯度环境情况下的天空颜色）。旧版变量。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;fixed4 unity_FogColor&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;雾效颜色。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float4 unity_FogParams&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用于雾效计算的参数：(density / sqrt(ln(2))、density / ln(2)、–1/(end-start) 和 end/(end-start))。x 对于 Exp2 雾模式很有用；*y* 对于 Exp 模式很有用，*z* 和 w 对于 Linear 模式很有用。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;数学常量&#34;&gt;数学常量 &lt;a href=&#34;#%e6%95%b0%e5%ad%a6%e5%b8%b8%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#ifndef UNITY_CG_INCLUDED
#define UNITY_CG_INCLUDED
#define UNITY_PI 3.14159265359f //圆周率
#define UNITY_TWO_PI 6.28318530718f //2倍圆周率
#define UNITY_FOUR_PI 12.56637061436f //4倍圆周率
#define UNITY_INV_PI 0.31830988618f //圆周率的倒数
#define UNITY_INV_TWO_PI 0.15915494309f //2倍圆周率的倒数
#define UNITY_INV_FOUR_PI 0.07957747155f //4倍圆周率的倒数
#define UNITY_HALF_PI 1.57079632679f //半圆周率
#define UNITY_INV_HALF_PI 0.636619772367f //半圆周率的倒数
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;颜色空间&#34;&gt;颜色空间 &lt;a href=&#34;#%e9%a2%9c%e8%89%b2%e7%a9%ba%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;函数名&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;bool IsGammaSpace()&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;根据宏UNITY_COLORSPACE_GAMMA是否被启用了，判断当前是否启用了伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float GammaToLinearSpaceExact (float value)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把一个颜色值精确地从伽马颜色空间(sRGB颜色空间)变化到线性空间(CIE-XYZ颜色空间)。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half3 GammaToLinearSpace (half3 sRGB)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用一个近似模拟的函数把颜色值近似地从伽马空间变换到线性空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;float LinearToGammaSpaceExact (float value)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;把一个颜色值精确地从线性空间变换到伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;half3 LinearToGammaSpace (half3 linRGB)&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;用一个近似模拟的函数把颜色值近似地从线性空间变换到伽马颜色空间。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>游戏数学基础</title>
      <link>https://www.chenqiaoqian.com/2023/07/03/2023-07-05-unity-mathematics-1/</link>
      <pubDate>Mon, 03 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/03/2023-07-05-unity-mathematics-1/</guid>
      <description>&lt;p&gt;3D数学是一门和计算几何相关的学科，计算几何则是研究用数值方法解决几何问题的学科。&lt;/p&gt;
&lt;h2 id=&#34;游戏数学&#34;&gt;游戏数学 &lt;a href=&#34;#%e6%b8%b8%e6%88%8f%e6%95%b0%e5%ad%a6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;向量vector&#34;&gt;向量(Vector) &lt;a href=&#34;#%e5%90%91%e9%87%8fvector&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在物理、工程中又称矢量，指一个同时具有大小和方向，且满足平行四边形法则的几何对象。向量不关心绝对的开始位置，将向量平移到任何地方，向量始终一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_A_to_B.svg.png&#34; alt=&#34;2023-07-05-unity-mathematics-1_A_to_B.svg&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;verctor-normalization&#34;&gt;Verctor Normalization &lt;a href=&#34;#verctor-normalization&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;单位向量，长度为一个单位（即模为1）的向量，叫做单位向量。一般用来表示方向向量，不关心其长度。&lt;/p&gt;
&lt;h4 id=&#34;verctor-addition&#34;&gt;Verctor Addition &lt;a href=&#34;#verctor-addition&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;向量加法，满足平行四边形法则和三角形法则。具体地讲两个向量A和B相加，得到另一个向量，这个向量可以表示为向量A和B的起点重合后，以它们邻边构成的平行四边形对角线，或者表示为向量A的起点执行向量B的终点的向量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_addition.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;vector-subtraction&#34;&gt;Vector Subtraction &lt;a href=&#34;#vector-subtraction&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;向量减法，两个向量A和B相减，向量A加上一个向量B大小想等，方向相反的向量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_subtraction.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;dot-product&#34;&gt;Dot Product &lt;a href=&#34;#dot-product&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_dot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点乘的数学定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_dot-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点乘的几何意义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_dot-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;向量的点乘可以用来计算两个向量之间的夹角，进一步判断这两个向量是否正交（垂直）等方向关系。同时，还可以用来计算一个向量在另一个向量方向上的投影长度。&lt;/p&gt;
&lt;h4 id=&#34;cross-product&#34;&gt;Cross Product &lt;a href=&#34;#cross-product&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_cross-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;叉乘的数学定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_cross-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;叉乘的几何定义：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Vector_cross-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量组成的坐标平面垂直。叉乘根据右手定则确定其方向。&lt;/p&gt;
&lt;p&gt;叉乘的几何意义：&lt;/p&gt;
&lt;p&gt;1、构建指教坐标系&lt;/p&gt;
&lt;p&gt;2、构建向量a和向量b的平行四边&lt;/p&gt;
&lt;p&gt;3、判断向量左右，判断向量的内外&lt;/p&gt;
&lt;h3 id=&#34;矩阵matrix&#34;&gt;矩阵(Matrix) &lt;a href=&#34;#%e7%9f%a9%e9%98%b5matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;矩阵是一种描述线性变换的数学工具。&lt;/p&gt;
&lt;p&gt;矩阵的基本运算&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-1_Metrix-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;矩阵不符合交换律，符合结合律。&lt;/p&gt;
&lt;h4 id=&#34;matrix-vector-multiplication&#34;&gt;Matrix-Vector Multiplication &lt;a href=&#34;#matrix-vector-multiplication&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;矩阵和向量相乘&lt;/p&gt;
&lt;p&gt;将向量写成M * 1的列向量&lt;/p&gt;
&lt;p&gt;确保矩阵能和M*1矩阵相乘&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2d---scale-matrix&#34;&gt;2D - Scale Matrix &lt;a href=&#34;#2d---scale-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2d---rotation-matrix&#34;&gt;2D - Rotation Matrix &lt;a href=&#34;#2d---rotation-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;缩放矩阵推导&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2d-transiation-matrix&#34;&gt;2D-Transiation Matrix &lt;a href=&#34;#2d-transiation-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;齐次坐标&#34;&gt;齐次坐标 &lt;a href=&#34;#%e9%bd%90%e6%ac%a1%e5%9d%90%e6%a0%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;齐次坐标就是将一个原本是n维的向量用一个n+1维向量来表示，是计算机图形学的重要手段之一，它既能够用来明确区分向量和点，同时也更易用于进行仿射（线性）几何变换。其主要用在一是区分向量和点；二是易于进行仿射变化(Affine Transformation) 。&lt;/p&gt;
&lt;p&gt;齐次坐标中Ponit的(n+1)为1，Vector的(n+1)为0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vector + Vector  = Vector&lt;/li&gt;
&lt;li&gt;Point - Point = Vector&lt;/li&gt;
&lt;li&gt;Point + Vector  = Point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个2D点在齐次坐标系中的表示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;齐次坐标系中的2D矩阵&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3d-transformations&#34;&gt;3D Transformations &lt;a href=&#34;#3d-transformations&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3d---scale-matrix&#34;&gt;3D - Scale Matrix &lt;a href=&#34;#3d---scale-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3d---transiation-matrix&#34;&gt;3D - Transiation Matrix &lt;a href=&#34;#3d---transiation-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3d---rotation-matrix&#34;&gt;3D - Rotation Matrix &lt;a href=&#34;#3d---rotation-matrix&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面分别对应按照X，Y，Z轴进行旋转。&lt;/p&gt;
&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照那个轴旋转，则该轴不动，旋转对应两个轴即可。&lt;/li&gt;
&lt;li&gt;旋转矩阵的推导，遵循右手定责，进行叉乘计算得出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;欧拉角&#34;&gt;欧拉角 &lt;a href=&#34;#%e6%ac%a7%e6%8b%89%e8%a7%92&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;欧拉角计算公式分别按照α、β、γ进行旋转。&lt;/p&gt;
&lt;h4 id=&#34;单位矩阵&#34;&gt;单位矩阵 &lt;a href=&#34;#%e5%8d%95%e4%bd%8d%e7%9f%a9%e9%98%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;单位矩阵从左上角到右下角的对角线（称为主对角线）上的元素均为1。除此以外全都为0，任何矩阵与单位矩阵相乘都等于本身。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;逆矩阵&#34;&gt;逆矩阵 &lt;a href=&#34;#%e9%80%86%e7%9f%a9%e9%98%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;逆矩阵的意义在于变化之后的回退。当一个值通过一个矩阵运算后，如果想回退会原来的值，则使用逆矩阵进行计算即可。&lt;/p&gt;
&lt;p&gt;你矩阵的推导：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-05-unity-mathematics-1/2023-07-05-unity-mathematics-2_Metrix-9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity Dots概念与原理</title>
      <link>https://www.chenqiaoqian.com/2023/07/02/dots-concepts-and-principles/</link>
      <pubDate>Sun, 02 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/02/dots-concepts-and-principles/</guid>
      <description>&lt;p&gt;DOTS是指可以利用多核处理器来实现数据的并行处理并提高Unity项目的性能。&lt;/p&gt;
&lt;h2 id=&#34;dots相关概念与原理&#34;&gt;Dots相关概念与原理 &lt;a href=&#34;#dots%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5%e4%b8%8e%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;dots&#34;&gt;Dots &lt;a href=&#34;#dots&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;DOTS（Data-Oriented Technology Stack）是一种数据驱动的技术堆栈，旨在提高Unity游戏引擎的性能和可伸缩性。主要包含以下三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Burst&lt;/strong&gt;：Burst是一种高性能编译器，专门用于将C#代码编译成本机代码，从而提高游戏性能。它能够分析C#代码并生成最佳的本机代码，减少了虚拟机的开销。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job System&lt;/strong&gt;：JobSystem是一种可以极大提高游戏性能的工具，可以让开发人员使用并行运算来处理数据。它允许在多个线程上同时执行代码，从而使游戏更加流畅和轻松处理计算密集型任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Entity Component System&lt;/strong&gt;：ECS（实体组件系统）是一种有别于传统OOP（面向对象思想）的编程模式，其编程模式对CPU Catch友好，因此可提升CPU效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意事项(理解误区)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOTS分为三个组件：ECS、JobSystem、Burst 三个组件可相互独立使用，并非必须捆绑使用。(区别在于单个组件的扩展项可能在其他的组件中，故而有可能会加入进来)&lt;/li&gt;
&lt;li&gt;JobSystem无需配合ECS使用，各种需要大量或并行计算的地方都可以使用。&lt;/li&gt;
&lt;li&gt;Burst无需配合ECS使用，各种计算密集的同步方法也可以使用。&lt;/li&gt;
&lt;li&gt;使用ECS不代表整个项目必须全用ECS来编写，可根据项目需求将ECS和传统面对对象方式组合使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;burst&#34;&gt;Burst &lt;a href=&#34;#burst&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;概念&#34;&gt;概念 &lt;a href=&#34;#%e6%a6%82%e5%bf%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Burst Compiler&lt;/strong&gt;：是Unity的一种编译器，它可以将C#代码编译为高效的本地代码，从而提高Unity应用程序的性能。Burst Compiler的优势在于它可以自动将C#代码转换为本地代码，并且可以使用SIMD指令和多线程技术来优化代码的性能。Burst在UnityEditor模式下采用JIT即时编译，在构建完成后运行的应用中使用AOT静态编译。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/burst.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SIMD&lt;/strong&gt;：Single Instruction Multiple Data，单指令多数据流，可以使用一条指令同时完成多个数据的运算操作。传统的指令架构是SISD就是单指令单数据流，每条指令只能对一个数据执行操作。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/simd.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JIT&lt;/strong&gt;：(即时编译Just In Time)，程序在运行过程中，讲CIL的byte code转译为目标平台的原生指令。
Unity的Scripting Backend的Mono模式就是采用JIT编译。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/jit.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AOT&lt;/strong&gt;：(提前编译Ahead Of Time)，程序运行前，将exe或dll文件中的CIL的byte code转译为目标平台的原生指令并存储。
Unity的Scripting Backend的IL2CPP模式就是采用AOT编译。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/aot.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装&#34;&gt;安装 &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在Unity编辑器中，可以在Package Manager中搜索Burst，然后点击安装即可。&lt;/p&gt;
&lt;h4 id=&#34;设置&#34;&gt;设置 &lt;a href=&#34;#%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在Unity编辑器中，Edit &amp;gt; Player Settings &amp;gt; Burst AOT Settings。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/burst_setting.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;在C#代码中使用Burst Attribute来标记要使用Burst编译的方法或类。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[BurstCompile]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a + b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[BurstCompile]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BurstCompileJob&lt;/span&gt; : IJob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Execute()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;jobsystem&#34;&gt;JobSystem &lt;a href=&#34;#jobsystem&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;概念-1&#34;&gt;概念 &lt;a href=&#34;#%e6%a6%82%e5%bf%b5-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JobSystem&lt;/strong&gt;：管理一组多核中的工作线程(Work Thread)，为避免上下文切换通常一个逻辑配一个工作线程，JobSystem 持有一个 Job 队列，工作线程从该队列中获取 Job 执行，JobSystem 执行时复制而非引用数据，避免了数据竞争，但 JobSystem 只能使用memcpy复制 blittable数据。。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Job&lt;/strong&gt;：一个job就是一个任务单位，一般在Worker Thread上执行(也有情况在Main Thread上执行)，类似于可以在不同的thread上执行function一样，但是Job是一个struct。Job会接收参数并对数据进行操作，其行为方式类似于方法调用。Job可以是独立的，也可依赖其他Job完成之后才能运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SafetySystem&lt;/strong&gt;：多线程编程中，为了避免出现竞争条件(不同线程同时访问一份数据)，在给Job输送数据的时候，一律都是值类型，来避免不同thread使用值类型去修改同一份数据，减少出现竞争条件的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Native Container&lt;/strong&gt;：NativeContainer是一种托管的值类型，为原生内存提供一种相对安全的C#封装。它包括一个指向非托管分配内存的指针。当和Unity C# Job System一起使用时，一个NativeContainer使得一个Job可以访问和主线程共享的数据，而不是在一份拷贝数据上工作。
Job内部只能访问blittable类型的数据和NativeContainer容器，并且不应访问静态数据。
Unity 自带 NativeContainer类型为 NativeArray，ECS 包又扩展了NativeList、NativeHashMap、NativeMultiHashMap和NativeQueue。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NativeContainer Allocator&lt;/strong&gt;：每个Native Container都需要一个Allocator，Allocator代表NativeContainer的生命周期。
Allocator.Temp：分配速度最快，适用于在一帧内的主线程执行逻辑，不能将此类容器传递给Job使用。
Allocator.TempJob：分配速度稍慢，适用于生命周期最长四帧的逻辑，并具有线程安全性，大多数Job使用的容器是此类型的。
Allocator.Persistent：分配速度最慢，并且可以在整个游戏生命周期一直存在，适用于持续时间长的Job。
所有的NativeContainer容器作为托管类型都需要被手动释放，使用NativeContainer.Dispose()函数进行释放。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例-1&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;IJob：简单的任务单位，返回一个JobHandle，可以实现依赖运行。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RunJob&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; _originalData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; _outputData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; JobHandle _jobHandle;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Run()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _originalData = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, Allocator.TempJob);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _originalData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _originalData[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _outputData = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, Allocator.TempJob);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BurstCompileJob job = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BurstCompileJob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            OriginalData = _originalData,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            OutPutData = _outputData
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _jobHandle = job.Schedule();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Ensure the job has completed	确保任务已经完成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// It is not recommended to Complete a job immediately, 不建议立即完成任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// since that gives you no actual parallelism. 因为没有实际的并行性&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// You optimally want to schedule a job early in a frame and then wait for it later in the frame.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 你最好在一个帧的早期调度一个作业，然后在该帧的后期等待它。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _jobHandle.Complete();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Debug.Log(_outputData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Tick()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_jobHandle.IsCompleted)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _jobHandle.Complete();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Debug.Log(_outputData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//依赖执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DependenciesRun()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BurstCompileJob job1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BurstCompileJob();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; jobHandle1 = job1.Schedule();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BurstCompileJob job2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BurstCompileJob();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; jobHandle2 = job2.Schedule(jobHandle1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        jobHandle2.Complete();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[BurstCompile]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BurstCompileJob&lt;/span&gt; : IJob
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [ReadOnly]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; OriginalData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [WriteOnly]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; NativeArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; OutPutData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Execute()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OutPutData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = OriginalData[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] + OriginalData[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;IJobParallelFor：并行任务，当一个Job中同时存在大量重复计算的时候使用。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _worldEdgeSize = &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; NativeArray&amp;lt;Vector3&amp;gt; _outputs;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; NativeArray&amp;lt;Vector3&amp;gt; _originals;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; JobHandle _parallelJobHandle;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Initial()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _outputs = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NativeArray&amp;lt;Vector3&amp;gt;(_worldEdgeSize * _worldEdgeSize * _worldEdgeSize, Allocator.TempJob);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _originals = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NativeArray&amp;lt;Vector3&amp;gt;(_worldEdgeSize * _worldEdgeSize * _worldEdgeSize, Allocator.TempJob);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; index = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; x &amp;lt; _worldEdgeSize; x++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; y &amp;lt; _worldEdgeSize; y++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; z = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; z &amp;lt; _worldEdgeSize; z++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _originals[index] = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector3(x, y, z) * &lt;span style=&#34;color:#ae81ff&#34;&gt;5f&lt;/span&gt; - &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Vector3(_worldEdgeSize * &lt;span style=&#34;color:#ae81ff&#34;&gt;5f&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5f&lt;/span&gt;, _worldEdgeSize * &lt;span style=&#34;color:#ae81ff&#34;&gt;5f&lt;/span&gt; * &lt;span style=&#34;color:#ae81ff&#34;&gt;0.5f&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                index++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//直接运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Run()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; _originals.Length; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sinx = Mathf.Sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;1f&lt;/span&gt; * Time.time + Mathf.PerlinNoise(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].x + Time.time, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].x + Time.time));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; siny = Mathf.Cos(&lt;span style=&#34;color:#ae81ff&#34;&gt;1f&lt;/span&gt; * Time.time + Mathf.PerlinNoise(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].y + Time.time, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].y + Time.time));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; sinz = Mathf.Sin(&lt;span style=&#34;color:#ae81ff&#34;&gt;1f&lt;/span&gt; * Time.time + Mathf.PerlinNoise(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].z + Time.time, &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3f&lt;/span&gt; * _originals[i].z + Time.time));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//job并行运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ParallelJobRun()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; paralleJob = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BurstCompileJobParallelFor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ElapsedTime = Time.time,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OriginalData = _originals,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        OutPutData = _outputs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _parallelJobHandle = paralleJob.Schedule(_originals.Length, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, _parallelJobHandle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _parallelJobHandle.Complete();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;运行结果：上图为主线程直接运行，执行时间565ms；下图为并行到Job线程里执行，执行时间161ms。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/jobsystem.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ecs&#34;&gt;ECS &lt;a href=&#34;#ecs&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;概念-2&#34;&gt;概念 &lt;a href=&#34;#%e6%a6%82%e5%bf%b5-2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Entity：不代表任何意义的实体，仅包含一个 ID(代表包含哪些component，没有任何数据和行为)。&lt;/li&gt;
&lt;li&gt;Component：只包含数据的组件。&lt;/li&gt;
&lt;li&gt;System：处理数据的系统，负责处理 Entity 和Component 之间的交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;原理&#34;&gt;原理 &lt;a href=&#34;#%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;传统的面向对象设计对CPU从Cache读取数据，往往并不需要一个对象的全部数据，比如想操控一个GameObject的Position数据却要读取整个GameObject和其继承的MonoBehaviour的数据，大量的不需要的数据被写入CPU Catch，就会造成频繁的Catch Miss；此外托管类型的存储空间排列分散，寻址到所需的数据也需要一定时间，相比ECS在System处理数据时只会读取需要的数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-02-unity-dots-concepts-and-principles/ecs_read.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;entities&#34;&gt;Entities &lt;a href=&#34;#entities&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Entitas是一个运行效率高的轻量级C# Entity-Component-System(ECS)框架，专门为unity订制。提供内部缓存和快速的组件访问。它经过精心设计，可以在垃圾收集环境中发挥最佳作用。
在Unity编辑器中，可以在Package Manager中搜索Entities，然后点击安装即可。
&lt;strong&gt;具体自己去实践。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;实例-2&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b-2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 单独实体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 建立关联component的ID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Entity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddComponent&amp;lt;T&amp;gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; T GetComponent&amp;lt;T&amp;gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; T : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;(T);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IComponent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// UI组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UI&lt;/span&gt; : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 三消组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Match&lt;/span&gt; : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 城建组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Town&lt;/span&gt; : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 三消项目system&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Match3System&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Work(List&amp;lt;IComponent&amp;gt; components)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MatchGame&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//entity创建只做演示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Entity _uiEntity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Entity _matchEntity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Entity _townEntity;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MatchGame()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _uiEntity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Entity();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _uiEntity.AddComponent&amp;lt;UI&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _matchEntity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Entity();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _matchEntity.AddComponent&amp;lt;Match&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _townEntity = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Entity();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _townEntity.AddComponent&amp;lt;Town&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//只做演示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//开发hs版本三消 ui+三消+城建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&amp;lt;IComponent&amp;gt; hsMatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;IComponent&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _uiEntity.GetComponent&amp;lt;UI&amp;gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _matchEntity.GetComponent&amp;lt;Match&amp;gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _townEntity.GetComponent&amp;lt;Town&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; matchSystem1 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Match3System();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        matchSystem1.Work(hsMatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//开发rm版本三消 ui+三消&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        List&amp;lt;IComponent&amp;gt; rmMatch = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;IComponent&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _uiEntity.GetComponent&amp;lt;UI&amp;gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _matchEntity.GetComponent&amp;lt;Match&amp;gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; matchSystem2 = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Match3System();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        matchSystem2.Work(rmMatch);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity内置渲染管线-概述</title>
      <link>https://www.chenqiaoqian.com/2023/07/01/buildin-renderpipeline-overview/</link>
      <pubDate>Sat, 01 Jul 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/07/01/buildin-renderpipeline-overview/</guid>
      <description>&lt;p&gt;渲染是指以软件由模型生成图像的过程。模型是用语言或者数据结构进行严格定义的三维物体或虚拟场景的描述，它包括几何、视点、纹理、照明和阴影等信息。图像是数字图像或者位图图像。彩现用于描述：计算视频编辑软件中的效果，以生成最终视频的输出过程。&lt;/p&gt;
&lt;h2 id=&#34;内置渲染管线概述&#34;&gt;内置渲染管线概述 &lt;a href=&#34;#%e5%86%85%e7%bd%ae%e6%b8%b2%e6%9f%93%e7%ae%a1%e7%ba%bf%e6%a6%82%e8%bf%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;渲染管线是将三维场景模型转换到屏幕像素空间输出的过程。图形渲染管线接受一组3D坐标，然后把它们转变为屏幕上的有色2D像素输出。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-overview-1.png&#34; alt=&#34;&#34;&gt;
内置渲染管线由两部分组成CPU应用程序端渲染逻辑和GPU渲染管线。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-struction-2.png&#34; alt=&#34;&#34;&gt;
内置管线渲染流程图，如下：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-detail-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cpu应用程序阶段&#34;&gt;CPU应用程序阶段 &lt;a href=&#34;#cpu%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;剔除culling&#34;&gt;剔除Culling &lt;a href=&#34;#%e5%89%94%e9%99%a4culling&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;视锥体剔除(Frustum Culling)，视锥体是指由摄像机的FOV、Near和Far组成的金字塔形状的立方体，场景里的物体和视锥体进行碰撞检测，如有相交则说明物体在视锥体范围内，需要进行绘制，反之剔除，不进行绘制。(碰撞检测可以通过给场景里的物体叫Box来进行优化)。&lt;/li&gt;
&lt;li&gt;层级剔除(Layer Culling Mask)，对物体进行层级设置，然后在摄像机处进行层级筛选。&lt;/li&gt;
&lt;li&gt;遮挡剔除(Occlusion Culling)，剔除场景中完全被遮挡住的物体，防止此类物体进行渲染计算。&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;排序sort&#34;&gt;排序Sort &lt;a href=&#34;#%e6%8e%92%e5%ba%8fsort&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;渲染队列排序RenderQueue，数值越小则越靠前渲染。&lt;/li&gt;
&lt;li&gt;不透明队列(RenderQueue &amp;lt; 2500)，按摄像机距离&lt;strong&gt;从前到后&lt;/strong&gt;排序。&lt;/li&gt;
&lt;li&gt;半透明队列(RenderQueue &amp;gt; 2500)，按摄像机距离&lt;strong&gt;从后往前&lt;/strong&gt;排序。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-sort-4.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;打包数据发给cpu&#34;&gt;打包数据发给CPU &lt;a href=&#34;#%e6%89%93%e5%8c%85%e6%95%b0%e6%8d%ae%e5%8f%91%e7%bb%99cpu&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;模型信息：顶点坐标、法线、UV、切线、顶点色和索引列表。&lt;/li&gt;
&lt;li&gt;变换矩阵：世界变换矩阵、摄像机位置以及fov等参数。&lt;/li&gt;
&lt;li&gt;灯光、材质参数：shader、材质信息和灯光信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模型文件数据：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-batch-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;gpu渲染阶段&#34;&gt;GPU渲染阶段 &lt;a href=&#34;#gpu%e6%b8%b2%e6%9f%93%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;GPU渲染流程如下：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-1.png&#34; alt=&#34;&#34;&gt;
注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型空间顶点：3D建模软件里面的模型坐标；&lt;/li&gt;
&lt;li&gt;图元转配置：对顶点进行连线，组成三角形。&lt;/li&gt;
&lt;li&gt;光栅化：对每个图元插值生成片段，可以理解成没有上色的像素。&lt;/li&gt;
&lt;li&gt;片元着色：对片元进行上色。&lt;/li&gt;
&lt;li&gt;输出合并：处理前后遮挡关系，以及混合合并。
Shader与GPU渲染管线对应关系：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-3.png&#34; alt=&#34;&#34;&gt;
对应关系：&lt;/li&gt;
&lt;li&gt;第一阶段，告诉CPU端，需要顶点坐标和UV。&lt;/li&gt;
&lt;li&gt;第二阶段，进行顶点shader，所有的顶点都会调用，来完成投影成像的操作(模型空间-&amp;gt;裁剪空间)。&lt;/li&gt;
&lt;li&gt;第三阶段，顶点shader输出，裁剪空间下的顶点坐标和UV等等，提供给片元shader使用。&lt;/li&gt;
&lt;li&gt;第四阶段，所有片元都会调用，进行着色。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顶点shader&#34;&gt;顶点Shader &lt;a href=&#34;#%e9%a1%b6%e7%82%b9shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;将顶点坐标从模型空间变换为裁剪空间。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模型空间：建模软件坐标系。&lt;/li&gt;
&lt;li&gt;世界空间：游戏引擎坐标系。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;硬件操作阶段&#34;&gt;硬件操作阶段 &lt;a href=&#34;#%e7%a1%ac%e4%bb%b6%e6%93%8d%e4%bd%9c%e9%98%b6%e6%ae%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;硬件操作阶段有叫光栅化阶段，发生在平台的硬件层面，其行为不可操作。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-gpu-process-5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;裁剪操作：物体转换到裁剪空间后，根据裁剪空间大小，对范围外的进行裁剪。&lt;/li&gt;
&lt;li&gt;NDC：将物体坐标坐标归一化，(0,0) -&amp;gt;(1,1)。&lt;/li&gt;
&lt;li&gt;背面剔除：对背对摄像机的三角面剔除。&lt;/li&gt;
&lt;li&gt;屏幕坐标：将NDC坐标转换为屏幕坐标的像素坐标。&lt;/li&gt;
&lt;li&gt;图元装配：根据顶点生成三角形片元。&lt;/li&gt;
&lt;li&gt;光栅化：忽略Z坐标，根据X、Y坐标对片元进行颜色插值，光栅化会产生锯齿。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-hard-process-1.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;片元shader&#34;&gt;片元Shader &lt;a href=&#34;#%e7%89%87%e5%85%83shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;重要任务是上色，主要通过纹理技术(Texturing)和光照计算(Lighting)。&lt;/p&gt;
&lt;h5 id=&#34;纹理技术&#34;&gt;纹理技术 &lt;a href=&#34;#%e7%ba%b9%e7%90%86%e6%8a%80%e6%9c%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;纹理采样：根据纹理坐标，在纹素地址中查找对应的颜色值。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-1.png&#34; alt=&#34;&#34;&gt;
纹理过滤机制：用来解决纹理失真所采用的手段。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​	Point：最容易理解的一个。由于每个像素的纹理坐标，刚好对应贴图上的一个采样点纹素，所以最近点采样就是直接取最接近的纹素进行采样。如果纹理大小和被贴合的三维模型大小差不多时，这种方法会比较有效和快捷，但是如果大小不同，纹理就会变得矮胖、变形或者模糊，容易出现块状的像素，使得处理出的效果很差。&lt;/li&gt;
&lt;li&gt;​	Bilinear：双线性过滤以像素对应的纹理坐标为中心，采集这个坐标周围的4个纹素的像素，再取平均，最后以这个平均值作为采样值。这样过滤后的像素则会更加平滑，至少不会出现块状像素了。但双线性过滤只作用于一个MipMap Level，它选取纹素和像素之间大小最接近的那一层MipMap进行采样。这意味着如果和像素匹配大小的纹素大小在两层	MipMap Level之间的话，双线性过滤的效果就有限了，因此有了三线性过滤。&lt;/li&gt;
&lt;li&gt;​	Trilinear：三线性过滤以双线性过滤为基础。会对像素大小于纹素大小最接近的两层MipMap Level分别进行双线性过滤，然后再对两层得到的结果生成线性插值。在各向同性的情况下，三线性过滤能获得很不错的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Minmap：为了解决纹理大小和图像大小不匹配，所产生的问题。
纹理寻址模式：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-frame-process-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;光照计算&#34;&gt;光照计算 &lt;a href=&#34;#%e5%85%89%e7%85%a7%e8%ae%a1%e7%ae%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;光照组成：直接光照和间接光照。
光照模型：Phong光照模型。基本组成：直接光漫反射+直接光镜面反射+间接光漫反射+间接光镜面反射。&lt;/p&gt;
&lt;h4 id=&#34;输出合并&#34;&gt;输出合并 &lt;a href=&#34;#%e8%be%93%e5%87%ba%e5%90%88%e5%b9%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;处理遮挡关系、处理半透明混合。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-1.png&#34; alt=&#34;&#34;&gt;
Alpha测试：低于某个数值则直接丢弃。&lt;/p&gt;
&lt;p&gt;深度测试：同一个点上，重叠的两个片元，进行选择，比较Depth，Depth值越小，越靠近摄像机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ZWrite深度写入：ZWrite如果被关闭也不会被写入深度缓冲区，但是不影响颜色缓冲区的写入。&lt;/li&gt;
&lt;li&gt;ZTest深度测试：设置通关深度测试的规则。ZTest Less（深度小于当前缓存则通过）， ZTest Greater（深度大于当前缓存则通过）&amp;hellip;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-2.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;帧缓冲区：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜色缓冲区&lt;/li&gt;
&lt;li&gt;深度缓冲区&lt;/li&gt;
&lt;li&gt;模版缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;混合Blending：对缓冲区重叠的部分进行混合，Blend SrcAlpha OneMinusSrcAlpha、Blend One OneMinusSrcAlpha&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半透明混合从前到后&lt;/li&gt;
&lt;li&gt;半透明混合关闭ZWrite
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-07-01-unity-buildin-renderpipeline-overview/2023-07-01-unity-buildin-renderpipeline-input-process-3.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity-shader-ase</title>
      <link>https://www.chenqiaoqian.com/2023/06/20/shader-ase-1/</link>
      <pubDate>Tue, 20 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/20/shader-ase-1/</guid>
      <description>&lt;p&gt;Amplify Shader Editor是行业领先开放且紧密集成的解决方案，它提供了一个Unity开发者易于上手的开发环境，可以与Unity编辑器和着色器使用无缝融合。通过这款工具，开发者能轻松实现AAA级质量的作品，并能灵活地应用在任何Unity项目开发之中，进而大大缩短了制作团队在美术效果上的迭代时间。&lt;/p&gt;
&lt;h2 id=&#34;amplify-shader-editorase&#34;&gt;Amplify Shader Editor(ASE) &lt;a href=&#34;#amplify-shader-editorase&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;安装&#34;&gt;安装 &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Unity资源商店中搜索Amplify Shader Editor进行安装。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-1.png&#34; alt=&#34;&#34;&gt;
导入后展开Amplify Shader Editor目录结构：
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;编辑器界面简介&#34;&gt;编辑器界面简介 &lt;a href=&#34;#%e7%bc%96%e8%be%91%e5%99%a8%e7%95%8c%e9%9d%a2%e7%ae%80%e4%bb%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;打开amplify-shader-editor编辑器界面&#34;&gt;打开Amplify Shader Editor编辑器界面 &lt;a href=&#34;#%e6%89%93%e5%bc%80amplify-shader-editor%e7%bc%96%e8%be%91%e5%99%a8%e7%95%8c%e9%9d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-3.png&#34; alt=&#34;&#34;&gt;
依次点击Window → Amplify Shader Editor → Open Canvas打开编辑器画布（Canvas）界面；或者可以双击Amplify Shader Editor（下文简称ASE）材质或着色器自动打开画布界面。&lt;/p&gt;
&lt;h4 id=&#34;创建amplify表面着色器surface-shader&#34;&gt;创建Amplify表面着色器（Surface Shader） &lt;a href=&#34;#%e5%88%9b%e5%bb%baamplify%e8%a1%a8%e9%9d%a2%e7%9d%80%e8%89%b2%e5%99%a8surface-shader&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-4.png&#34; alt=&#34;&#34;&gt;
在项目（Project）界面选中资源文件夹的情况下，依次点击 Assets → Create → Shader → Amplify Surface Shader创建；或者依次点击右键 → Create → Shader → Amplify Surface Shader进行创建。&lt;/p&gt;
&lt;h4 id=&#34;画布ui交互&#34;&gt;画布UI交互 &lt;a href=&#34;#%e7%94%bb%e5%b8%83ui%e4%ba%a4%e4%ba%92&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-5.png&#34; alt=&#34;&#34;&gt;
1.节点属性界面
​	&lt;strong&gt;主属性（Main Properties）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;着色器类型（Shader Type）：此区域显示所使用的当前着色器类型。&lt;/li&gt;
&lt;li&gt;着色器名称（Shader Name）：可编辑文本框，定义着色器的名称和路径。使用正斜杠“/”定义其类别和名称，例如UserSamples / EnvironmentGradient。请注意，此框中显示的名称与文件名不同，必须单独设置。&lt;/li&gt;
&lt;li&gt;光照模型（Light Model）：定义表面如何反射光，通常称为所使用的着色器类型。 ASE目前提供标准（金属 Standard（Metallic））、标准镜面（Standard Specular）、Lambert和Blinn Phong。&lt;/li&gt;
&lt;li&gt;着色器模型（Shader Model）：当编写表面着色器或常规着色器程序时，HLSL源可以编译成不同的“着色器模型”。更高的着色器编译目标允许使用更多的现代GPU功能，但可能使得着色器不能在较旧的GPU或平台上工作。&lt;/li&gt;
&lt;li&gt;精度（Precision）：定义内部计算的精度，使用较低类型提供了额外的性能提升以换取一些精度。默认设置为Float。&lt;/li&gt;
&lt;li&gt;剔除模式（Cull Mode）：Front – 剔除前向几何体，Back – 剔除后向几何体，关闭 - 禁用剔除（双面材料）。默认情况下设置为Back。&lt;/li&gt;
&lt;li&gt;渲染路径（Render Path）：允许您定义着色器支持哪种模式（提前Forward / 延时Deferred）。默认设置为全部。&lt;/li&gt;
&lt;li&gt;投射阴影（Cast Shadows）：定义使用着色器的对象是否投射阴影。&lt;/li&gt;
&lt;li&gt;接收阴影（Receive Shadows）：定义使用着色器的对象是否接收阴影，这包括自阴影（只有使用正向渲染）。&lt;/li&gt;
&lt;li&gt;队列索引（Queue Index）：渲染队列偏移值，接受正（较晚）和负（较早）整数。&lt;/li&gt;
&lt;li&gt;自定义编辑器（Custom Editor）：自定义检查器允许您自定义ASE材料检查器。
​	&lt;strong&gt;混合模式（Blend Mode）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-7.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;混合模式（Blend Mode）：所选模式自动调整可用参数;不透明（Opaque），遮罩（Masked），透明（Transparent），Alpha预乘（Alpha Transparent）或自定义（Custom）。&lt;/li&gt;
&lt;li&gt;渲染类型（Render Type）：该标记将着色器分为几个预定义组。可用标签：不透明（Opaque），透明（Transparent），透明抠出（Transparent Cutout），背景（Background），覆盖（Overlay），不透明树（Tree Opaque），透明树剪出（Tree Transparent Cutout），布告板树（Tree Billboard），草和布告板草皮（Grass and Grass Billboard）。&lt;/li&gt;
&lt;li&gt;渲染队列（Render Queue）：为了获得最佳性能，通过几何体渲染队列排布，从而优化对象的绘制顺序。所有其他渲染队列按距离对对象进行排序，从最远的那些开始渲染，并以最接近的结束。可用选项有背景、几何、Alpha测试、透明和覆盖。&lt;/li&gt;
&lt;li&gt;掩码片段值（Mask Clip Value）：要与不透明度alpha比较的默认值。 0完全不透明，1完全掩蔽。默认设置为0，常用于透明抠出（Transparent Cutout）材质。&lt;/li&gt;
&lt;li&gt;混合RGB和混合Alpha（Blend RGB and Blend Alpha）：当渲染图形时，在所有着色器执行并且所有纹理都应用后，像素被写入屏幕。它们如何与已经存在的内容组合由Blend命令控制。 ASE目前提供定制、Alpha混合（Alpha Blend）、预乘（Premultiplied）、加法（Additive）、软加法（Soft Additive）、乘法（Multiplicative）和2x乘法（2x Multiplicative）模式。&lt;/li&gt;
&lt;li&gt;混合因子（Blend Factor）（SrcFactor ＆ DstFactor）：以下所有属性都适用于混合命令中的SrcFactor＆DstFactor。源指的是计算的颜色，目标是已经在屏幕上的颜色。如果BlendOp使用逻辑运算，则忽略混合因子。&lt;/li&gt;
&lt;li&gt;混合操作RGB和混合操作Alpha（Blend Op RGB &amp;amp; Blend Op Alpha）：添加（Add）、子（Sub）、修改子（Rev Sub）、最小（Min）和最大（Max）。&lt;/li&gt;
&lt;li&gt;颜色蒙版（Color Mask）：设置颜色通道写入蒙版，将其全部关闭使其不可见。
​	&lt;strong&gt;模版缓冲（Stencil Buffer）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-8.png&#34; alt=&#34;&#34;&gt;
模板缓冲器可以用作每像素掩模的通用目的，用于保存或丢弃像素。它通常是每个像素8位整数。该值可以写入、递增或递减。 后续绘制调用可以根据该值进行测试，以决定是否应该在运行像素着色器之前丢弃该像素。&lt;/li&gt;
&lt;li&gt;参考（Reference）：要比较的值和/或要写入缓冲区的值（如果Pass，Fail或ZFail设置为替换）。范围是0-255整数。&lt;/li&gt;
&lt;li&gt;读取掩码（Read Mask）：作为0-255整数的8位掩码，用于将参考值与缓冲区（referenceValue＆readMask），比较方法comparisonFunction（stencilBufferValue＆readMask）的内容进行比较。默认值是255。&lt;/li&gt;
&lt;li&gt;写掩码（Write Mask）：8位掩码，作为0-255整数，写入缓冲区时使用。默认值是255。&lt;/li&gt;
&lt;li&gt;比较（Comparison）：用于将参考值与缓冲区的当前内容进行比较的函数。默认值是always。&lt;/li&gt;
&lt;li&gt;通过（Pass）：如果模板测试（和深度测试）通过，对缓冲区的内容做什么。默认值是keep。&lt;/li&gt;
&lt;li&gt;失败（Fail）：如果模板测试失败，对缓冲区的内容做什么。默认值是keep。&lt;/li&gt;
&lt;li&gt;ZFail（ZFail）：如果模板测试通过，则缓冲区的内容如何处理，但深度测试失败。默认值是keep。
​	&lt;strong&gt;曲面细分（Tessellation）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-9.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;冯氏曲面细分（Phong）：修改细分面的位置，使得生成的面稍微跟随网格法线，默认设置为OFF。&lt;/li&gt;
&lt;li&gt;类型（Type）：定义所使用的技术，基于距离、固定、边长和边长Cull。&lt;/li&gt;
&lt;li&gt;曲面细分因子（Tess）：范围是1-32。&lt;/li&gt;
&lt;li&gt;最小值（Min）：最小细分距离。&lt;/li&gt;
&lt;li&gt;最大值（Max）：最大细分距离。
​	&lt;strong&gt;深度（Depth）&lt;/strong&gt;
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-10.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;ZWrite模式（ZWrite Mode）：控制来自此对象的像素是否写入深度缓冲区（默认为开）。如果你画的是实体对象，请保持此状态。如果您绘制半透明效果，请切换到ZWrite Off。&lt;/li&gt;
&lt;li&gt;ZTest模式（ZTest Mode）：如何进行深度测试。默认值为LEqual（将对象从现有对象或远距离绘制为现有对象;隐藏其后面的对象）。 ASE提供ZTest 小于（Less）、大于（Greater）、小于等于（LEqual）、大于等于（GEqual）、等于（Equal）、不等于（NotEqual）和通常（Always）。&lt;/li&gt;
&lt;li&gt;偏移（Offset）：允许您使用两个参数指定深度偏移 — 因子和单位。因子相对于多边形的X或Y缩放最大Z斜率，单位缩放最小可分辨深度缓冲区值。这允许您强制一个多边形绘制在另一个顶部，虽然它们实际上在相同的位置。例如，偏移（0，-1）拉动多边形更接近相机忽略多边形的斜率，而偏移（-1，-1）将拉近多边形，看看掠角。&lt;/li&gt;
&lt;li&gt;因子（Factor）：相对于多边形的X或Y，缩放最大Z斜率。&lt;/li&gt;
&lt;li&gt;单位（Units）：单位缩放最小可分辨深度缓冲区值。
​	&lt;strong&gt;渲染平台（Rendering Platforms）&lt;/strong&gt;
​	定义支持哪些平台， 默认设置为全部。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-11.png&#34; alt=&#34;&#34;&gt;
​	&lt;strong&gt;可用属性（Available Properties）&lt;/strong&gt;
​	设置为属性（Property）的变量将在此部分中列出，您可以通过拖动它们来调整它们的位置。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-12.png&#34; alt=&#34;&#34;&gt;
2.保存按钮：手动保存/更新着色器数据。修改着色器名称只有在点击这个按钮之后才会正式生效。
3.自动切换按钮：切换自动保存/更新着色器数据。
4.文本编辑按钮：将着色器文件在文本编辑器中打开。
5.选择回归按钮：屏幕视角回归到选择的节点。
6.主节点回归按钮：屏幕视角回归到主节点。
7.清除按钮：删除已经断开连接的节点。
8.节点选项板界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用类型和函数&#34;&gt;常用类型和函数 &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e7%b1%bb%e5%9e%8b%e5%92%8c%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;数据类型&#34;&gt;数据类型 &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算符&#34;&gt;运算符 &lt;a href=&#34;#%e8%bf%90%e7%ae%97%e7%ac%a6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算函数&#34;&gt;运算函数 &lt;a href=&#34;#%e8%bf%90%e7%ae%97%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-15.png&#34; alt=&#34;&#34;&gt;
Abs：绝对值运算
One Minus：把所有的数值用1减，常用来取反。
Power幂：次方运算
Lerp：线性插值，以Alpha数值为标准，输出A和B之间的线性插值，Alpha是1时输出B，0时输出A，0.5时AB各一半。
Clamp：约束，min和max数值可以自定义，截取输入值，并将其约束到min和max两个数值中间，如果输入值小于0，则输出0，如果输入值大于1，则输出1.
Remap：重映射，将值从一个范围重映射到另一个范围。例如sin函数在-1~1之间变化，我们可以通过重映射将-1~1变化为0~1，这样就不会有负值情况了。
Step：阶梯函数，(非黑即白，常用于硬溶解)如果A≤B，则输出1，如果A&amp;gt;B，则输出0。
SmoothStep：平滑阶梯函数，如果输入值在啊min和max之间，则输出0和1之间的平滑Hermite插值。&lt;/p&gt;
&lt;h4 id=&#34;uv&#34;&gt;UV &lt;a href=&#34;#uv&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-16.png&#34; alt=&#34;&#34;&gt;
Texture Coordinates：UV坐标。
Rotator：UV旋转，该节点将会把输入的UV或者2维量围绕你定义的Anchor点进行旋转，需要输入Time动态时间，不然会固定住，不会自动旋转。&lt;/p&gt;
&lt;h4 id=&#34;坐标与朝向&#34;&gt;坐标与朝向 &lt;a href=&#34;#%e5%9d%90%e6%a0%87%e4%b8%8e%e6%9c%9d%e5%90%91&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-17.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;时间&#34;&gt;时间 &lt;a href=&#34;#%e6%97%b6%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-18.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;其他 &lt;a href=&#34;#%e5%85%b6%e4%bb%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-06-20-unity-shader-ase-1/2023-06-20-unity-shader-ase-1-19.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-总结</title>
      <link>https://www.chenqiaoqian.com/2023/06/17/designpattern-summary/</link>
      <pubDate>Sat, 17 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/17/designpattern-summary/</guid>
      <description>&lt;p&gt;设计模式的目的是为了提高代码重用性、可读性、可扩展性、可靠性以及使程序呈现高内聚、低耦合的特性。&lt;/p&gt;
&lt;h2 id=&#34;设计模式总结&#34;&gt;设计模式总结 &lt;a href=&#34;#%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;分类&#34;&gt;分类 &lt;a href=&#34;#%e5%88%86%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;创建型模式&#34;&gt;创建型模式 &lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e5%9e%8b%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;创建型模式是处理对象创建的设计模式，试图根据实际情况来使用合适的方式创建对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式(Singleton)&lt;/li&gt;
&lt;li&gt;抽象工厂模式(Abstract Factory)&lt;/li&gt;
&lt;li&gt;建造者模式(Builder)&lt;/li&gt;
&lt;li&gt;工厂方法模式(Factory Method)&lt;/li&gt;
&lt;li&gt;原型模式(Pototype)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构型模式&#34;&gt;结构型模式 &lt;a href=&#34;#%e7%bb%93%e6%9e%84%e5%9e%8b%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;结构型模式是主要研究的是类和对象的组合的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器模式(Adapter)&lt;/li&gt;
&lt;li&gt;桥接模式(Bridge)&lt;/li&gt;
&lt;li&gt;装饰器模式(Decorator)&lt;/li&gt;
&lt;li&gt;组合模式(Composite)&lt;/li&gt;
&lt;li&gt;外观模式(Facade)&lt;/li&gt;
&lt;li&gt;享元模式(Flyweight)&lt;/li&gt;
&lt;li&gt;代理模式(Proxy)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;行为型模式&#34;&gt;行为型模式 &lt;a href=&#34;#%e8%a1%8c%e4%b8%ba%e5%9e%8b%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;行为型模式是用来识别对象之间的常用交流模式并加以实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模版方法模式(Template Method)&lt;/li&gt;
&lt;li&gt;解释器模式(Interpreter)&lt;/li&gt;
&lt;li&gt;备忘录模式(Memento)&lt;/li&gt;
&lt;li&gt;访问者模式(Visitor)&lt;/li&gt;
&lt;li&gt;策略模式(Stragety)&lt;/li&gt;
&lt;li&gt;状态模式(State)&lt;/li&gt;
&lt;li&gt;职责链模式(Chain of Responsibility)&lt;/li&gt;
&lt;li&gt;中介者模式(Mediator)&lt;/li&gt;
&lt;li&gt;观察者模式(Observer)&lt;/li&gt;
&lt;li&gt;迭代器模式(Iterator)&lt;/li&gt;
&lt;li&gt;命令模式(Command)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计模式七大原则&#34;&gt;设计模式七大原则 &lt;a href=&#34;#%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f%e4%b8%83%e5%a4%a7%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;单一职责原则&#34;&gt;单一职责原则 &lt;a href=&#34;#%e5%8d%95%e4%b8%80%e8%81%8c%e8%b4%a3%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;单一职责原则 (SRP：Single Responsibility Principle))： 它规定一个类应该只负责一项职责，以低耦合、高内聚为面向对象原则。相反职责过多，引起变化的原因就越多，这样就会导致职责依赖，大大损伤其内聚性和耦合度。&lt;/p&gt;
&lt;h4 id=&#34;开闭原则&#34;&gt;开闭原则 &lt;a href=&#34;#%e5%bc%80%e9%97%ad%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;开闭原则(OCP：Open Closed Principle)：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。模块应尽量在不修改原代码的情况下进行扩展。&lt;/p&gt;
&lt;h4 id=&#34;里氏替换原则&#34;&gt;里氏替换原则 &lt;a href=&#34;#%e9%87%8c%e6%b0%8f%e6%9b%bf%e6%8d%a2%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;里氏替换原则(LSP：Liskov Substitution Principle)：所有引用基类的地方必须能透明地使用其子类的对象，子类可以扩展父类的功能，但不能改变父类原有的功能。&lt;/p&gt;
&lt;h4 id=&#34;依赖倒置原则&#34;&gt;依赖倒置原则 &lt;a href=&#34;#%e4%be%9d%e8%b5%96%e5%80%92%e7%bd%ae%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;依赖倒转原则(DIP：Dependency Inversion Principle)：程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。&lt;/p&gt;
&lt;h4 id=&#34;接口隔离原则&#34;&gt;接口隔离原则 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e9%9a%94%e7%a6%bb%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;接口隔离原则(ISP：Interface Segregation Principle)：客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上，将接口拆分成几个独立的接口。&lt;/p&gt;
&lt;h4 id=&#34;迪米特法则&#34;&gt;迪米特法则 &lt;a href=&#34;#%e8%bf%aa%e7%b1%b3%e7%89%b9%e6%b3%95%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;迪米特法则(LOD：Law of Demeter)，又称最少知道原则：一个实体应尽可能少地与其他实体发生相互作用。&lt;/p&gt;
&lt;h4 id=&#34;合成复用原则&#34;&gt;合成复用原则 &lt;a href=&#34;#%e5%90%88%e6%88%90%e5%a4%8d%e7%94%a8%e5%8e%9f%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;合成复用原则(CRP：Composite Reuse Principle)：尽量使用合成/聚合的方式，而不是使用继承。&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！
感谢Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides。
感谢狂飙，&amp;ldquo;感谢&amp;quot;Piggyi。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-解释器模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/15/designpattern-interpreter/</link>
      <pubDate>Thu, 15 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/15/designpattern-interpreter/</guid>
      <description>&lt;p&gt;Interpreter解释器模式属于行为型设计模式，该模式定义其语法的表示以及使用该表示来解释该语言中的句子的解释器。&lt;/p&gt;
&lt;h2 id=&#34;design-patterninterpreter&#34;&gt;Design Pattern:Interpreter &lt;a href=&#34;#design-patterninterpreter&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Abstract Expression：抽象表达式类，定义解释器的接口，约定解释器的解释操作，其中定义Interpret接口，专门用来解释该解释器所要实现的功能。&lt;/li&gt;
&lt;li&gt;Terminal Expression：终端表达式类，实现了抽象表达式类所要求的接口，每一个终端符都有一个具体终端表达式与之相对应。例如：A = A1+A2，A1和A2为终端运算符。&lt;/li&gt;
&lt;li&gt;Nonterminal Expression：非终端表达式类，一般是语法中的运算符或者其他关键字，比如公式A=A1+A2中，“+”就是非终端符，解析“+”的解释器就是一个非终端符表达式。&lt;/li&gt;
&lt;li&gt;Context：上下文类，用来存放语法中各个终端符所对应的具体值，提供给解释器进行解析和解释的输入以及从中获得的输出，例如：A=A1+A2，A1赋值10，给A2赋值20。&lt;/li&gt;
&lt;li&gt;Client：解释器客户端类，构建一个抽象语法树，表示语法定义的语言中的特定句子。抽象语法树由 Nonterminal Expression 和 Terminal Expression 类的实例组装而成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;较高的可扩展性和可修改性，每个语法规则都会自动继承父类的属性和方法。通过这种方式，可以向子类添加更改和扩展，以增量方式修改、扩展和更改语法规则。&lt;/li&gt;
&lt;li&gt;语法规则易于实现： 此模式将语法类表示为语法树，其中每个节点表示一个语法规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对于复杂语法难以实现。&lt;/li&gt;
&lt;li&gt;执行效率较低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中解释器模式的实例，我准备使用解释器模式实现一套加减乘除运算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象表达式类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Expression&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 终端表达式类 数字常量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NumberExpression&lt;/span&gt; : Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; NumberExpression(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _number = number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 非终端表达式类 加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AddExpression&lt;/span&gt; : Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AddExpression(Expression number1, Expression number2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression1 = number1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression2 = number2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _numberExpression1.Interpret(context) + _numberExpression2.Interpret(context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 非终端表达式类 减&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SubtractExpression&lt;/span&gt; : Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; SubtractExpression(Expression number1, Expression number2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression1 = number1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression2 = number2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _numberExpression1.Interpret(context) - _numberExpression2.Interpret(context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 非终端表达式类 乘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MultiplyExpression&lt;/span&gt; : Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; MultiplyExpression(Expression number1, Expression number2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression1 = number1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression2 = number2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _numberExpression1.Interpret(context) * _numberExpression2.Interpret(context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 非终端表达式类 除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DivideExpression&lt;/span&gt; : Expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Expression _numberExpression2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; DivideExpression(Expression number1, Expression number2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression1 = number1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numberExpression2 = number2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Interpret(Context context)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _numberExpression1.Interpret(context) / _numberExpression2.Interpret(context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 上下文类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; _numbers;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Context()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numbers = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetNumber(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; key, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; number)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _numbers.Add(key, number);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetNumber(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_numbers.ContainsKey(key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _numbers[key];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; context = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Context();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context.SetNumber(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context.SetNumber(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; expression = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AddExpression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NumberExpression(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MultiplyExpression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NumberExpression(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AddExpression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NumberExpression(context.GetNumber(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number1&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; NumberExpression(context.GetNumber(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Number2&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        expression.Interpret(context);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-备忘录模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/13/designpattern-memento/</link>
      <pubDate>Tue, 13 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/13/designpattern-memento/</guid>
      <description>&lt;p&gt;Memento备忘录模式属于行为型设计模式，该模式在不违反封装性的情况下，捕获并保存对象的内部状态，以便稍后可以将对象恢复到该状态。&lt;/p&gt;
&lt;h2 id=&#34;design-patternmemento&#34;&gt;Design Pattern:Memento &lt;a href=&#34;#design-patternmemento&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Originator：发起者类，需要保存和恢复状态的对象。负责创建一个备忘录Memento，用以记录当前时刻自身的内部状态，并可使用备忘录恢复内部状态。&lt;/li&gt;
&lt;li&gt;Memento：备忘录类，负责存储发起人对象的内部状态，在进行恢复时提供给发起人需要的状态，并可以防止Originator以外的其他对象访问备忘录。&lt;/li&gt;
&lt;li&gt;Caretaker：管理者类，负责保存备忘录对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可能需要维护多个备份，会带来很多额外的资源消耗。&lt;/li&gt;
&lt;li&gt;当Originator的状态改变的时候，这个备份将会失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中备忘录模式的实例，随着工作室的员工越来越多，我决定备份一下女员工的联系方式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 员工联系方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmployeeContact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 发起者 - 老板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BossOriginator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;EmployeeContact&amp;gt; _employeeContacts = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;EmployeeContact&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmployeeContactMemento CreateMemento()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EmployeeContactMemento mementoCaretaker = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EmployeeContactMemento(_employeeContacts);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; mementoCaretaker;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ResetMemento(EmployeeContactMemento mementoCaretaker)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _employeeContacts = mementoCaretaker.EmployeeContacts;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 备忘录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmployeeContactMemento&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&amp;lt;EmployeeContact&amp;gt; EmployeeContacts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmployeeContactMemento(List&amp;lt;EmployeeContact&amp;gt; contacts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EmployeeContacts = contacts;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 管理者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MementoCaretaker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmployeeContactMemento EmployeeContact;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BossOriginator bossOriginator = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BossOriginator();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MementoCaretaker caretaker = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MementoCaretaker();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;caretaker.EmployeeContact = bossOriginator.CreateMemento();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bossOriginator.ResetMemento(caretaker.EmployeeContact);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-访问者模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/11/designpattern-visitor/</link>
      <pubDate>Sun, 11 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/11/designpattern-visitor/</guid>
      <description>&lt;p&gt;Visitor访问者模式属于行为型设计模式，该模式作用于某对象结构中的各个元素的操作。它可以在不改变各元素的类的前提下定义作用于这些元素的新的操作。&lt;/p&gt;
&lt;h2 id=&#34;design-patternvisitor&#34;&gt;Design Pattern:Visitor &lt;a href=&#34;#design-patternvisitor&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vistor：抽象访问类，定义操作接口，不同的ConcreteElement作为参数，则需要定义不同的接口。&lt;/li&gt;
&lt;li&gt;ConcreteVistor：具体访问类，实现Vistor定义的操作接口。&lt;/li&gt;
&lt;li&gt;Element：抽象元素类，定义接受操作的接口，接受受访者作为参数。&lt;/li&gt;
&lt;li&gt;ConcreteElement：具体元素类，实现Element所规定的接受操作。&lt;/li&gt;
&lt;li&gt;ObjectStructure：结构对象类，元素类的容器，管理不同的元素类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;访问者模式使得添加新的操作变得容易。&lt;/li&gt;
&lt;li&gt;访问者模式可以访问属于不同的等级结构的成员对象。&lt;/li&gt;
&lt;li&gt;访问者模式扩展对象的功能比其他方法（例如继承）更直接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;添加ConcreteElement变得负责，Vistor需要对新添加的ConcreteElement进行接口拓展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中访问者模式的实例，工作室的员工刚刚收到公司，然后我发起了一项大声喊出你工资的行动。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象访问类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Visitor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(PlanningElement e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(EngineerElement e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(TestingElement e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体访问类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AloudVisitor&lt;/span&gt; : Visitor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(PlanningElement e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是策划，工资是10000&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(EngineerElement e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是程序，工资是1000&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AloudSalary(TestingElement e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是测试，工资是1000&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象元素类 - 接受访问&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Element&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor visitor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体元素类 - 策划受访者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlanningElement&lt;/span&gt; : Element
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor visitor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        visitor.AloudSalary(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体元素类 - 程序受访者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EngineerElement&lt;/span&gt; : Element
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor visitor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        visitor.AloudSalary(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体元素类 - 测试受访者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestingElement&lt;/span&gt; : Element
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor visitor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        visitor.AloudSalary(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 结构对象类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employees&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;Element&amp;gt; _elements = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Element&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Add(Element e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _elements.Add(e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Remove(Element e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _elements.Remove(e);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Accept(Visitor visitor)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; _elements.Count; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _elements[i].Accept(visitor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Employees employees = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employees();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;employees.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EngineerElement());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;employees.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlanningElement());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;employees.Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestingElement());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AloudVisitor aloudVisitor = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AloudVisitor();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;employees.Accept(aloudVisitor);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-策略模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/09/designpattern-stragety/</link>
      <pubDate>Fri, 09 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/09/designpattern-stragety/</guid>
      <description>&lt;p&gt;Stragety策略模式属于行为型设计模式，该定义了一系列算法，封装了每个算法，并使它们可以互换。这种模式使算法能够独立于使用它的客户而变化。&lt;/p&gt;
&lt;h2 id=&#34;design-patternstragety&#34;&gt;Design Pattern:Stragety &lt;a href=&#34;#design-patternstragety&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Context：上下文类，持有并维护一个Strategy类的引用，并定义访问Strategy类的接口。&lt;/li&gt;
&lt;li&gt;Strategy：抽象策略类，定义公共算法接口，各种不同的算法以不同的方式实现这个接口。&lt;/li&gt;
&lt;li&gt;ConcreteStrategy：具体策略类，实现Strategy类定义的算法接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;允许客户端选择在运行时使用的算法。&lt;/li&gt;
&lt;li&gt;将每个算法封装在一个类中，使其易于修改和扩展而不影响其他算法。&lt;/li&gt;
&lt;li&gt;避免使用多重条件选择语句。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户必须了解所有的具体策略类。&lt;/li&gt;
&lt;li&gt;定了许多策略类，增加了对象数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中策略模式的实例，马上到10号了，又要给员工开发发工资了，我们计算一下每个员工的工资。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 上下文类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SalaryCalculator _calculator;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Context(SalaryCalculator state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _calculator = state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 设置工资计算器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;state&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetSalaryCalculator(SalaryCalculator state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _calculator = state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 获取工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetSalary()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _calculator.GetSalary();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象策略类 - 工资计算器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SalaryCalculator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 获得工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetSalary();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 策划计算器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlanningSalaryCalculator&lt;/span&gt; : SalaryCalculator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetSalary()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是策划，工资 = 基本工资 + 流水提成&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 程序工资计算器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EngineerSalaryCalculator&lt;/span&gt; : SalaryCalculator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetSalary()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是程序，工资 = 基本工资&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 测试工资计算器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestingSalaryCalculator&lt;/span&gt; : SalaryCalculator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetSalary()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是测试，工资 = 基本工资&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PlanningSalaryCalculator planningSalaryCalculator = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlanningSalaryCalculator();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EngineerSalaryCalculator engineerSalaryCalculator = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EngineerSalaryCalculator();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestingSalaryCalculator testingSalaryCalculator = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestingSalaryCalculator();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Context context = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Context(planningSalaryCalculator);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.GetSalary();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.SetSalaryCalculator(engineerSalaryCalculator);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.GetSalary();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.SetSalaryCalculator(testingSalaryCalculator);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.GetSalary();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-状态模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/07/designpattern-state/</link>
      <pubDate>Wed, 07 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/07/designpattern-state/</guid>
      <description>&lt;p&gt;State状态模式属于行为型设计模式，该模式允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。&lt;/p&gt;
&lt;h2 id=&#34;design-patternstate&#34;&gt;Design Pattern:State &lt;a href=&#34;#design-patternstate&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Context：上下文类，定义客户交互的接口，持有具体状态对象的引用，并用来更改当前的状态。&lt;/li&gt;
&lt;li&gt;State：抽象状态类，定义一个接口，用于封装与上下文的特定状态相关的行为。&lt;/li&gt;
&lt;li&gt;ConcreteState：具体状态类，实现了Context的一个状态所对应的行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;该模式使封装了转换规则，使状态转换变得明确。&lt;/li&gt;
&lt;li&gt;状态对象可以共享，不同的Context可以使用同一个State。&lt;/li&gt;
&lt;li&gt;代码结构更加清晰，不同行为分不到不同State里。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;增加上下文类和状态类对象的个数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中状态模式的实例，游戏工作室开张喽了，开始第一个功能开发，策划案子-&amp;gt;程序开发-&amp;gt;QA验收。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 上下文类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; FunctionState _functionState;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Context(FunctionState state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _functionState = state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 状态切换&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;state&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; ChangeState(FunctionState state)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _functionState = state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Execute()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _functionState.Action();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象状态类 - 功能开发&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FunctionState&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Action();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体状态类 - 策划状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlanningState&lt;/span&gt; : FunctionState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Action()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是策划，策划文档已经审核完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体状态类 - 程序状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EngineerState&lt;/span&gt; : FunctionState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Action()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是程序，功能开发完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体状态类 - 测试状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestingState&lt;/span&gt; : FunctionState
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Action()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是测试，功能验收完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PlanningState planningState = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlanningState();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EngineerState engineerState = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EngineerState();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestingState testingState = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestingState();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Context context = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Context(planningState);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.Execute();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.ChangeState(engineerState);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.Execute();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.ChangeState(testingState);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.Execute();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-职责链模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/05/designpattern-chainofresponsibility/</link>
      <pubDate>Mon, 05 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/05/designpattern-chainofresponsibility/</guid>
      <description>&lt;p&gt;Chain of Responsibility职责链模式属于行为型设计模式，避免请求发送者与接收者耦合在一起，让多个对象都有可能接受请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。&lt;/p&gt;
&lt;h2 id=&#34;design-patternchain-of-responsibility&#34;&gt;Design Pattern:Chain of Responsibility &lt;a href=&#34;#design-patternchain-of-responsibility&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Handler：抽象处理者类，定义了一个处理请求的接口，并且持有一个后继者的引用。&lt;/li&gt;
&lt;li&gt;ConcreteHandler：具体处理者类，处理用户请求，如果可以处理该请求，则会处理；否则它将请求转发给其后继者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;发送者和接收者职责分配灵活，有效降低耦合。&lt;/li&gt;
&lt;li&gt;动态配置链以及添加或删除处理程序的灵活性。&lt;/li&gt;
&lt;li&gt;可简化对象的相互连接，处理者类仅需维持一个指向其后继者的引用。&lt;/li&gt;
&lt;li&gt;新增请求处理类很方便，使代码保持灵活。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于请求可能没有明确的处理者，因此无法保证该请求一定会得到处理。&lt;/li&gt;
&lt;li&gt;如果链很长或很复杂，性能可能会受到影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中职责链模式的实例，游戏工作室刚刚成立，肯定很多报销需要签字，如果每笔报销都需要我签字，我将痛不欲生，所以我根据报销金额，来找对应职级的人签字即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象处理者类 - 审批人&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Approver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Approver _nextApprover;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetNextApprover(Approver approver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _nextApprover = approver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 处理流程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;amount&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Process(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体处理者类 - 部门经理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Manager&lt;/span&gt; : Approver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Process(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (amount &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是部门经理，报销完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _nextApprover?.Process(amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体处理者类 - 首席财务官&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CFO&lt;/span&gt; : Approver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Process(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (amount &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &amp;amp;&amp;amp; amount &amp;lt;= &lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是首席财务官，报销完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _nextApprover?.Process(amount);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体处理者类 - 首席执行官&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CEO&lt;/span&gt; : Approver
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Process(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; amount)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是首席执行官，报销完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Approver manager = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Manager();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFO cfo = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CFO();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CEO ceo = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CEO();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manager.SetNextApprover(cfo);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cfo.SetNextApprover(ceo);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manager.Process(&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manager.Process(&lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manager.Process(&lt;span style=&#34;color:#ae81ff&#34;&gt;15000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-中介者模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/03/designpattern-mediator/</link>
      <pubDate>Sat, 03 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/03/designpattern-mediator/</guid>
      <description>&lt;p&gt;Mediator中介者模式属于行为型设计模式，中介者模式定义了一个中介对象来封装一系列对象之间的交互关系。中介者使各个对象之间不需要显式地相互引用，从而使耦合性降低，而且可以独立地改变它们之间的交互行为。&lt;/p&gt;
&lt;h2 id=&#34;design-patternmediator&#34;&gt;Design Pattern:Mediator &lt;a href=&#34;#design-patternmediator&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Mediator：抽象中介者类，定义各个Colleague之间交互接口。&lt;/li&gt;
&lt;li&gt;ConcreteMediator：具体中介者类，持有各个ConcreteColleague对象的引用，并负责具体的协调ConcreteColleague对象之间的交互关系。&lt;/li&gt;
&lt;li&gt;Colleague：抽象同事类，持有Mediator对象的引用，并且定义ConcreteColleague之间的公共功能。&lt;/li&gt;
&lt;li&gt;ConcreteColleague：具体同事类，通过持有的中介者与各个ConcreteColleague进行通信，并且实现公共功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;中介者模式通过把多个同事对象之间的交互封装到中介对象里面，从而使得对象之间松散耦合，基本上可以做到互不依赖。&lt;/li&gt;
&lt;li&gt;多个同事对象的交互，被封装在中介者对象里面集中管理，实现集中控制交互。&lt;/li&gt;
&lt;li&gt;同事之间的对应关系由多对多变成了一对多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;中介者对象的大小和复杂性很容易增加，变得难以管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中介者模式的实例，当了一段时间董事长，我发现还是喜欢开发游戏，所以我有钱的老爸给我投资了一个游戏工作室。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象中介者类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mediator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Command(Colleague colleague);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体中介者类 - 项目经理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductionManagerMediator&lt;/span&gt; : Mediator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PlanningColleague _planning;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; EngineerColleague _engineer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; TestingColleague _testing;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetPlanningColleague(PlanningColleague planning)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _planning = planning;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetPlanningColleague(EngineerColleague engineer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _engineer = engineer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetPlanningColleague(TestingColleague testing)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _testing = testing;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Command(Colleague colleague)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (colleague.GetType() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(PlanningColleague))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _engineer.Apply();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (colleague.GetType() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(EngineerColleague))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _testing.Apply();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (colleague.GetType() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(TestingColleague))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _planning.Apply();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象同事类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Colleague&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Mediator _mediator;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Colleague(Mediator mediator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _mediator = mediator;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 发送消息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Send();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Apply();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体同事类 - 策划同事&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PlanningColleague&lt;/span&gt; : Colleague
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PlanningColleague(Mediator mediator) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(mediator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Send()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _mediator.Command(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Apply()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是策划，产品验收完毕。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体同事类 - 技术同事&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EngineerColleague&lt;/span&gt; : Colleague
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EngineerColleague(Mediator mediator) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(mediator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Send()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _mediator.Command(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Apply()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是程序，收到策划案，开始研发工作。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体同事类 - 测试同事&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestingColleague&lt;/span&gt; : Colleague
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TestingColleague(Mediator mediator) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(mediator)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Send()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _mediator.Command(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Apply()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我是测试，收到产品，开始测试工作。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProductionManagerMediator productionManager = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductionManagerMediator();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PlanningColleague planning = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PlanningColleague(productionManager);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EngineerColleague engineer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EngineerColleague(productionManager);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestingColleague testing = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TestingColleague(productionManager);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;planning.Send();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;engineer.Send();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;testing.Send();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-观察者模式</title>
      <link>https://www.chenqiaoqian.com/2023/06/01/designpattern-observer/</link>
      <pubDate>Thu, 01 Jun 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/06/01/designpattern-observer/</guid>
      <description>&lt;p&gt;Observer观察者模式属于行为型设计模式，观察者设计模式定义了对象之间的一对多依赖关系，以便当一个对象更改状态时，它的所有依赖项都会得到通知并自动更新。&lt;/p&gt;
&lt;h2 id=&#34;design-patternobserver&#34;&gt;Design Pattern:Observer &lt;a href=&#34;#design-patternobserver&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Subject：抽象主题类，持有所有观察者对象的引用保存在一个列表中，并提供注册和删除观察者对象的操作，并且保证消息时序性。&lt;/li&gt;
&lt;li&gt;ConcreteSubject：具体主题类，负责跟踪Subject的状态并通知观察者其中的任何变化。&lt;/li&gt;
&lt;li&gt;Observer：抽象观察者类，定义更新观察者状态的接口。&lt;/li&gt;
&lt;li&gt;ConcreteObserver：具体观察者类，实现观察者更新接口，使其状态与主体保持一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;表示层和数据逻辑层的分离，并实现了稳定的更新消息传递机制。&lt;/li&gt;
&lt;li&gt;允许添加更多观察者而无需更改主题的代码，即它支持开放/关闭原则。&lt;/li&gt;
&lt;li&gt;被观察者和观察者之间建立了一个抽象的耦合，被观察者并不知道任何一个具体的观察者，只是保存着抽象观察者的列表，每个具体观察者都符合一个抽象观察者的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;被观察者被很多观察者订阅，向所有的观察者都通知到会花费很多时间。&lt;/li&gt;
&lt;li&gt;对于观察者来讲，消息的来源无法确定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中观察者模式的实例，终于到月初了，我们开始给员工发工资，然后银行会给每个员工发送短信。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象观察者类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Account&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 账户名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 账户金额&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _total;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 账户是否变更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; bChange;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Account(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; total)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _total = total;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 发工资&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;salary&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetGalaryMoney(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; salary)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _total += salary;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 账户资产变更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体观察者类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EmployeeAccout&lt;/span&gt; : Account
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; EmployeeAccout(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; total) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(name, total)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 账户资产变更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Update()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;{_name} : total {_total}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 被观察者基类-抽象主题类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BankMessageSystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 观察者李彪&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; List&amp;lt;Account&amp;gt; _observers = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Account&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 注册账号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;account&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegAccount(Account account);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 移除账号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;account&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnRegAccount(Account account);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 发送通知&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Notify()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &amp;lt; _observers.Count; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_observers[i].bChange)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _observers[i].Update();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _observers[i].bChange = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体观察者类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HomeLandBank&lt;/span&gt; : BankMessageSystem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegAccount(Account account)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _observers.Add(account);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnRegAccount(Account account)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _observers.Remove(account);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Account dongwenyi = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EmployeeAccout(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dongwenyi&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Account sunchangpeng = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EmployeeAccout(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sunchangpeng&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HomeLandBank bank = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HomeLandBank();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bank.RegAccount(dongwenyi);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bank.RegAccount(sunchangpeng);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dongwenyi.SetGalaryMoney(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sunchangpeng.SetGalaryMoney(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bank.Notify();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-迭代器模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/31/designpattern-iterator/</link>
      <pubDate>Wed, 31 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/31/designpattern-iterator/</guid>
      <description>&lt;p&gt;Iterator迭代器模式属于行为型设计模式，为了解决遍历集合使用统一的接口问题，提供了一种在不暴露其内部表示的情况下顺序访问聚合对象元素的方法。&lt;/p&gt;
&lt;h2 id=&#34;design-patterniterator&#34;&gt;Design Pattern:Iterator &lt;a href=&#34;#design-patterniterator&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Iterator：抽象迭代器类，用来定义访问和遍历序列中元素的操作的接口。&lt;/li&gt;
&lt;li&gt;ConcreteIterator：具体迭代器类，实现了Iterator接口，完成对序列对象的遍历，同时在对聚合进行遍历时跟踪其当前位置。&lt;/li&gt;
&lt;li&gt;Aggregate：抽象聚合类，用于定义创建迭代器对象的操作。&lt;/li&gt;
&lt;li&gt;ConcreteAggregate：具体聚合类，实现了Aggregate相应迭代器的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;迭代器模式访问或者遍历聚合对象的内容时无需暴露聚合对象的内部表示。&lt;/li&gt;
&lt;li&gt;迭代器模式为遍历不同的集合结构提供了一个统一的接口，不关心集合结构的算法是什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;迭代器模式不是直接访问集合结构，会带来一些性能上的消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中迭代器模式的实例，通过这段时间的创业，我决定去家族旗下的某个集团当个董事长，上任第一件事就是认识一下所有员工。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Employee&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 员工名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 员工Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Name = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Id = id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象迭代器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iterator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 首个item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Employee FirstItem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 下一个item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Employee NextItem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 是否存在下一个item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HasNext();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 当前item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Employee CurrentItem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体迭代器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteIterator&lt;/span&gt; : Iterator
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; ConcreteAggregate _aggregate;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _currentItemIndex = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; ConcreteIterator(ConcreteAggregate cAggregate)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _aggregate = cAggregate;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee FirstItem()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _aggregate[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee NextItem()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Employee returnObj = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_currentItemIndex &amp;lt; _aggregate.Count - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            returnObj = _aggregate[++_currentItemIndex];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; returnObj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee CurrentItem()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _aggregate[_currentItemIndex];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; HasNext()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _currentItemIndex &amp;gt;= _aggregate.Count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象聚合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Aggregate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 创建迭代器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Iterator Create();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 具体聚合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ConcreteAggregate&lt;/span&gt; : Aggregate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; List&amp;lt;Employee&amp;gt; _employees = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;Employee&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Iterator Create()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteIterator(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Count =&amp;gt; _employees.Count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Employee &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; index]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; =&amp;gt; _employees[index];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; =&amp;gt; _employees.Insert(index, &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ConcreteAggregate aggregate = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ConcreteAggregate();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aggregate[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employee(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dongweiyi&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aggregate[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Employee(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sunchangpeng&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Iterator iterator = aggregate.Create();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Employee currentItem = iterator.FirstItem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (currentItem != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentItem = iterator.NextItem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-命令模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/29/designpattern-command/</link>
      <pubDate>Mon, 29 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/29/designpattern-command/</guid>
      <description>&lt;p&gt;Command命令模式属于行为型设计模式，将请求封装为一个对象，从而允许对不同请求的客户端进行参数化，并提供请求的历史记录。它还允许撤销请求。&lt;/p&gt;
&lt;h2 id=&#34;design-patterncommand&#34;&gt;Design Pattern:Command &lt;a href=&#34;#design-patterncommand&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Client：客户角色类，创建具体的命令对象，并且设置命令对象的接收者。&lt;/li&gt;
&lt;li&gt;Command：命令接口，声明一个用于执行操作的接口。&lt;/li&gt;
&lt;li&gt;ConcreteCommand：具体命令类，Command的实现对象，要持有Receiver，并调用Receiver的功能来完成命令要执行的操作。&lt;/li&gt;
&lt;li&gt;Invoker：请求者类，使用命令对象的入口，持有很多命令对象，真正触发命令并要求命令执行相应操作的地方。&lt;/li&gt;
&lt;li&gt;Receiver：接受者类，真正执行命令的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;命令模式属于可扩展的设计模式，可以在不更改或干扰现有类和代码的情况下添加更多命令。&lt;/li&gt;
&lt;li&gt;可以实现命令延迟。&lt;/li&gt;
&lt;li&gt;对命令进行记录的功能，可以实现对请求的Undo和Redo操作。&lt;/li&gt;
&lt;li&gt;多个命令对象可以组合使用，形成复杂的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码变得负责，同时增加出不少具体命令类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中命令模式的实例，我干了两天厨师觉得不太累了，于是决定改行房地产，于是我来到了家族旗下的房地产公司当起了建筑师，主要任务是盖房。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Receiver 接受者类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Receiver&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildWall()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;建造墙体。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PullDownWall()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;拆毁墙体。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildRoof()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;建造房顶。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PullDownRoof()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;拆毁房顶。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Command 命令接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ICommand&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Do();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 撤销&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnDo();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// ConcreteCommand 建墙&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BuildWallCmd&lt;/span&gt; : ICommand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Receiver _receiver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BuildWallCmd(Receiver receiver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver = receiver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Do()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver.BuildWall();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnDo()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver.PullDownWall();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// ConcreteCommand 建房顶&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BuildRoofCmd&lt;/span&gt; : ICommand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Receiver _receiver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BuildRoofCmd(Receiver receiver)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver = receiver;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Do()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver.BuildRoof();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; UnDo()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _receiver.PullDownRoof();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Invoker 调用类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Invoker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 执行指令记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; List&amp;lt;ICommand&amp;gt; _commands = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;ICommand&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddAndExecute(ICommand command)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _commands.Add(command);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        command.Do();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Receiver receiver = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Receiver();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Invoker invoker = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Invoker();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BuildWallCmd buildWallCmd = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BuildWallCmd(receiver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BuildRoofCmd buildRoofCmd = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; BuildRoofCmd(receiver);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoker.AddAndExecute(buildWallCmd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;invoker.AddAndExecute(buildRoofCmd);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-模版方法模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/27/designpattern-templatemethod/</link>
      <pubDate>Sat, 27 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/27/designpattern-templatemethod/</guid>
      <description>&lt;p&gt;Template Method模版方法模式属于行为型设计模式，定义操作中算法的框架，将一些步骤推迟到子类。模板方法允许子类在不改变算法结构的情况下重新定义算法的某些步骤。&lt;/p&gt;
&lt;h2 id=&#34;design-patterntemplate-method&#34;&gt;Design Pattern:Template Method &lt;a href=&#34;#design-patterntemplate-method&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;AbstractClass：抽象角色类，定义模板方法和抽象操作。&lt;/li&gt;
&lt;li&gt;ConcreteClass：具体角色类，继承抽象角色类并覆盖抽象角色类操作的子类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;易于处理和更高的可读性，易于维护，不影响其他具体角色类运行。&lt;/li&gt;
&lt;li&gt;减少了代码重复。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果抽象操作过多，子类必须覆盖的操作太多，整个程序就会变得复杂。&lt;/li&gt;
&lt;li&gt;具体角色类不能改变算法结构的运行步骤。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中模版方法模式的实例，我下定决心改行当厨师，于是我来到了家族旗下的酒店的厨房当起了学徒。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象角色类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractClass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 做包子流程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 模板方法，方法里面包含了做包子的算法步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakeBuns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MakingDough();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MakingStuffing();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BagBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BraiseBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 和面 相当于模板方法的第一步&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingDough();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 只做馅料 相当于模板方法的第二步&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingStuffing();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 包包子 相当于模板方法的第三步&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BagBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 蒸包子 相当于模板方法的第四步&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BraiseBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 肉包子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MeatBuns&lt;/span&gt; : AbstractClass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingDough()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;和面的时候放些苹果汁，增加颜色和味道&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingStuffing()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用猪肉做馅。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BagBuns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;包包子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BraiseBuns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;蒸包子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 蔬菜包子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;VegetablesBuns&lt;/span&gt; : AbstractClass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingDough()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;和面的时候放些胡萝卜汁，增加颜色和味道&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakingStuffing()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;用白菜做馅。&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BagBuns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;包包子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BraiseBuns()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;蒸包子&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//肉包子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AbstractClass buns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MeatBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buns.MakeBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//蔬菜包子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buns = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; VegetablesBuns();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buns.MakeBuns();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-代理模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/25/designpattern-proxy/</link>
      <pubDate>Thu, 25 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/25/designpattern-proxy/</guid>
      <description>&lt;p&gt;Proxy代理模式属于结构型设计模式，它允许使用代理对象来控制对实际对象的访问，并在不修改实际对象的情况下提供附加功能。&lt;/p&gt;
&lt;h2 id=&#34;design-patternproxy&#34;&gt;Design Pattern:Proxy &lt;a href=&#34;#design-patternproxy&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Subject：抽象主题类，声明Proxy和RealSubject的公共接口，这样在使用RealSubject的任何地方都可以使用Proxy。&lt;/li&gt;
&lt;li&gt;Proxy：代理类，内部含有RealSubject的引用，可以根据需要访问 RealSubject类成员。&lt;/li&gt;
&lt;li&gt;RealSubject：真实主题类，定义了Proxy所代表的真实对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代理模式能够将真正被调用的对象隔离，降低了系统的耦合度。&lt;/li&gt;
&lt;li&gt;代理对象在客户端和目标对象之间起到一个中介的作用，这样可以起到对目标对象的保护。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码变得复杂，因为必须定义许多新类。&lt;/li&gt;
&lt;li&gt;客户端和RealSubject之间增加了一个Proxy，所以会造成请求的处理速度变慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分类&#34;&gt;分类 &lt;a href=&#34;#%e5%88%86%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;远程代理：客户端必须使用代理类实例访问另一个网络上的远程资源。&lt;/li&gt;
&lt;li&gt;虚拟代理：根据需要创建一个资源消耗较大的对象，使得对象只在需要时才会被真正创建。&lt;/li&gt;
&lt;li&gt;保护代理：通过为客户端代码添加某种身份验证来创建资源的安全代理，资源受代理保护并且客户端代码必须通过身份验证过程。&lt;/li&gt;
&lt;li&gt;智能代理：用于添加某种功能以有效地管理资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中代理模式的实例，比方说我们开发一个计算器模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Subject：抽象主题类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;  Sub(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;  Mul(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;  Div(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// RealSubject：真实主题类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RealMath&lt;/span&gt; : Math
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x + y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Sub(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x - y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Mul(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x * y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Div(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x / y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// Proxy：代理类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MathProxy&lt;/span&gt; : Math
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; RealMath _realMath = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RealMath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _realMath.Add(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Sub(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _realMath.Sub(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Mul(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _realMath.Mul(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; Div(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _realMath.Div(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MathProxy proxy = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; MathProxy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6 + 2 = &amp;#34;&lt;/span&gt; + proxy.Add(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6 - 2 = &amp;#34;&lt;/span&gt; + proxy.Sub(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6 * 2 = &amp;#34;&lt;/span&gt; + proxy.Mul(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;6 / 2 = &amp;#34;&lt;/span&gt; + proxy.Div(&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-享元模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/23/designpattern-flyweight/</link>
      <pubDate>Tue, 23 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/23/designpattern-flyweight/</guid>
      <description>&lt;p&gt;Flyweight享元模式属于结构型设计模式，旨在通过在相似对象之间共享数据来减少内存使用，以提高性能。&lt;/p&gt;
&lt;h2 id=&#34;design-patternflyweight&#34;&gt;Design Pattern:Flyweight &lt;a href=&#34;#design-patternflyweight&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Flyweight：抽象享元类，规定出需要实现的公共接口，可以通过该接口接收外部状态并对其进行操作。&lt;/li&gt;
&lt;li&gt;ConcreteFlyweight：具体享元类，实现抽象享元类所规定的接口，如果有内部状态的话，为内在状态添加存储。&lt;/li&gt;
&lt;li&gt;FlyweightFactory：享元工厂类，创建和管理享元对象，当客户端请求享元时，享元工厂对象将现有实例赋值或创建一个实例。&lt;/li&gt;
&lt;li&gt;Client：客户类，维护对享元的引用，计算或存储享元的外部状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;通过创建共享对象（享元）来减少对象的数量，从而减少了内存，提高了性能。&lt;/li&gt;
&lt;li&gt;由于使用了外部状态，外部状态相对独立，不会影响到内部状态，所以享元对象能够在不同的环境被共享。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;需要区分外部状态和内部状态，使得代码在某种程度上来说更加复杂化了。&lt;/li&gt;
&lt;li&gt;为了使对象可以共享，享元模式需要将享元对象的状态外部化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中享元模式的实例，比方说我们开发一款画图工具，里面需要画各种颜色的圆形，我们不可能每种颜色的圆形做一个实例，这个时候我们可以享元模型，共享形状，然后添加不同的颜色。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Shape&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 设置颜色值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;color&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetColor(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; color);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 绘制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Draw();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 圆形&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Circle&lt;/span&gt; : Shape
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _strColor;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetColor(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; color)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _strColor = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Draw()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Circle color &amp;#34;&lt;/span&gt; + _strColor);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 形状工程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ShapeFactory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Shape&amp;gt; _shapes = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, Shape&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Shape GetShape(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; shapetype)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!_shapes.ContainsKey(shapetype))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//switch缩略写法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (shapetype)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Circle&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; shape = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Circle();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        _shapes.Add(shapetype, shape);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _shapes[shapetype];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Circle redCircle = (Circle)ShapeFactory.GetShape(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Circle&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redCircle.SetColor(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;redCircle.Draw();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Circle greenCircle = (Circle)ShapeFactory.GetShape(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Circle&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;greenCircle.SetColor(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Green&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;greenCircle.Draw();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Circle orangeCircle = (Circle)ShapeFactory.GetShape(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Circle&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;orangeCircle.SetColor(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Orange&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;orangeCircle.Draw();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-外观模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/21/designpattern-facade/</link>
      <pubDate>Sun, 21 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/21/designpattern-facade/</guid>
      <description>&lt;p&gt;Facade外观模式属于结构型设计模式，为子系统中的一组接口提供统一的接口Facade设计模式定义了一个更高级的接口，使子系统更易于使用。&lt;/p&gt;
&lt;h2 id=&#34;design-patternfacade&#34;&gt;Design Pattern:Facade &lt;a href=&#34;#design-patternfacade&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Facade：外观类，外观类中关联(一个或多个)子系统的功能和责任，将客户请求委托给适当的子系统对象。&lt;/li&gt;
&lt;li&gt;Subsystem classes：子系统类，处理Facade对象分配的工作，子系统不知道Facade的存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户屏蔽了子系统组件，从而简化了接口，减少了客户处理的对象数目并使子系统的使用更加简单。&lt;/li&gt;
&lt;li&gt;子系统和客户耦合较低，子系统的组件变化不会影响到它的客户。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新增的子系统可能需要修改Facade类或客户端的源代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中外观模式的实例，我们从电子城出来后，准备去吃饭，然后到了一家饭馆，开始下单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 菜品系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ProductSystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 获取菜品详情&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; GetProductDetails()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;获取菜品&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 支付系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PaymentSystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 支付&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; MakePayment()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;付款&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 发票系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InvoiceSystem&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 开发票&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SendInvoice()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;开具发票&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 餐馆&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RestaurantFacade&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; ProductSystem _productSystem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; PaymentSystem _paymentSystem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; InvoiceSystem _invoiceSystem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; RestaurantFacade()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _productSystem = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ProductSystem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _paymentSystem = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PaymentSystem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _invoiceSystem = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InvoiceSystem();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 点菜指令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DishOrder()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//获取菜品&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _productSystem.GetProductDetails();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//支付系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _paymentSystem.MakePayment();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//开具发票&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _invoiceSystem.SendInvoice();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RestaurantFacade facade = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RestaurantFacade();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;facade.DishOrder();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-复合模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/19/designpattern-composite/</link>
      <pubDate>Fri, 19 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/19/designpattern-composite/</guid>
      <description>&lt;p&gt;Composite组合模式属于结构型设计模式，将对象组合成树结构以表示部分-整体层次结构，Composite 让客户可以统一地对待单个对象和对象的组合。&lt;/p&gt;
&lt;h2 id=&#34;design-patterncomposite&#34;&gt;Design Pattern:Composite &lt;a href=&#34;#design-patterncomposite&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Component：抽象组件类，为层次结构中的所有对象定义公共的接口及默认行为。&lt;/li&gt;
&lt;li&gt;Leaf：树叶类，树叶类是没有下级子对象的对象，定义了组合中原始对象的行为。&lt;/li&gt;
&lt;li&gt;Composite：树枝类，树枝类是拥有下级子对象组合的对象，定义了可以对子对象组合执行的必要操作。&lt;/li&gt;
&lt;li&gt;Client：客户使用类，通过Component接口操作组合中对象的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;有助于在包含原始对象类型和复合对象类型的对象层次结构中实现统一性。&lt;/li&gt;
&lt;li&gt;遵循开放/封闭原则，可以在不更改现有代码的情况下添加更多组件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于其统一性，复合模式有时会变得过于笼统，有时很难为具有许多不同功能的类定义标准接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中组合模式的实例，下面我们来到电子城，根据自己的需求组装一台电脑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IComponent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 显示价格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DisplayPrice();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 树叶类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Leaf&lt;/span&gt; : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 组件名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _componentName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 组件价格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _componentPrice;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Leaf(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; price)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _componentName = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _componentPrice = price;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DisplayPrice()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;\tComponent Name: {_componentName} and Price: {_componentPrice}&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 树枝类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Composite&lt;/span&gt; : IComponent
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 组件名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; _componentName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 子组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;IComponent&amp;gt; _components = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;IComponent&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Composite(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _componentName = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 添加组件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;param name=&amp;#34;component&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; AddComposite(IComponent component)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _components.Add(component);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; DisplayPrice()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; component &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; _components)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            component.DisplayPrice();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//CPU&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IComponent cpu = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Leaf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CPU&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//鼠标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IComponent mouse = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Leaf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Mouse&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//键盘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IComponent keyboard = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Leaf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Keyboard&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//输入设备&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Composite inputEquipment = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Composite(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;InputEquipment&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputEquipment.AddComposite(mouse);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputEquipment.AddComposite(keyboard);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//电脑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Composite computer = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Composite(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Computer&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;computer.AddComposite(cpu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;computer.AddComposite(inputEquipment);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//显示设备价格&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;computer.DisplayPrice();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-装饰器模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/17/designpattern-decorator/</link>
      <pubDate>Wed, 17 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/17/designpattern-decorator/</guid>
      <description>&lt;p&gt;Decorator装饰器模式属于结构型设计模式，动态地给一个对象增加一些额外的职责，扩展功能提供了一种灵活的子类替代方法。&lt;/p&gt;
&lt;h2 id=&#34;design-patterndecorator&#34;&gt;Design Pattern:Decorator &lt;a href=&#34;#design-patterndecorator&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Component：抽象组件类，为可以动态添加职责的对象定义接口。&lt;/li&gt;
&lt;li&gt;Concrete Component：具体组件类，动态添加职责的实际对象。&lt;/li&gt;
&lt;li&gt;Decorator：装饰类，持有组件（Component）对象的实例，并实现一个与抽象组件接口一致的接口。&lt;/li&gt;
&lt;li&gt;Concrete Decorator：具体装饰类，负责给组件对象添加上附加的职责。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在不更改原始代码的情况下向现有对象添加新功能。&lt;/li&gt;
&lt;li&gt;无需使用继承即可创建复杂的设计。&lt;/li&gt;
&lt;li&gt;支持开闭原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当实现接口很大时使用装饰器模式会很复杂。&lt;/li&gt;
&lt;li&gt;增加的复杂性使调试更加困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中装饰器模式的实例，华为手机有很多型号，然后屏幕有刘海屏和曲面屏等等，我们以组装手机时获取屏幕的样式为例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 手机屏幕&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 屏幕样式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Style();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LiuHaiScreen&lt;/span&gt; : Screen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Style()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;刘海屏屏幕&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;QuMianScreen&lt;/span&gt; : Screen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Style()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;曲面屏屏幕&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Phone&lt;/span&gt; : Screen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Screen _screen;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Phone(Screen screen)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _screen = screen;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Style()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 华为P系列手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaWeiPXPhone&lt;/span&gt; : Phone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HuaWeiPXPhone(Screen screen) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(screen)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Style()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;.Style();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Screen liuhai = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LiuHaiScreen();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Screen qumian = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; QuMianScreen();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone pxPhone = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaWeiPXPhone(liuhai);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone mxPhone = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaWeiMXPhone(qumian);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-桥接模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/15/designpattern-bridge/</link>
      <pubDate>Mon, 15 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/15/designpattern-bridge/</guid>
      <description>&lt;p&gt;Bridge桥接模式属于结构型设计模式，用将抽象部分与实现部分分离，使它们都可以独立地变化。&lt;/p&gt;
&lt;h2 id=&#34;design-patternbridge&#34;&gt;Design Pattern:Bridge &lt;a href=&#34;#design-patternbridge&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Abstraction：抽象角色类，定义抽象接口，并且维护(Bridge Abstraction)的引用。&lt;/li&gt;
&lt;li&gt;Redefined Abstraction：重新定义抽象类，继承自抽象类的类(Abstraction)，并且实现抽象类定义的接口。&lt;/li&gt;
&lt;li&gt;Bridge：桥可以是接口，也可以是抽象类，为所有Bridge Implementations声明通用功能的接口，Abstraction使用它的引用在运行时与实现进行通信。&lt;/li&gt;
&lt;li&gt;Bridge Implementations：桥的具体实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把抽象接口与其实现解耦。&lt;/li&gt;
&lt;li&gt;抽象和实现可以独立扩展，不会影响到对方。&lt;/li&gt;
&lt;li&gt;更好的贴合Open-Closed原则，可以独立开发新的抽象和实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;增加了系统的复杂度。&lt;/li&gt;
&lt;li&gt;采用Bridge设计模式，将功能调用请求从抽象转发给实现者，因此在系统中引入了一种间接性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中适配器模式的实例，代码写累了想打开电视看会电视，然后找到遥控器打开/关闭电视，由于我家里有两台分别是华为电视和小米电视，那我就使用桥接模式来实现一下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 桥接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Bridge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 打开电视&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 关闭电视&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 切换频道&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 华为控制器部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaWeiControl&lt;/span&gt; : Bridge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Switch On : HuaWei TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Switch Off : HuaWei TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set Channel : HuaWei TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 小米控制器部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XiaoMiControl&lt;/span&gt; : Bridge
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Switch On : XiaoMi TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Switch Off : XiaoMi TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Set Channel : XiaoMi TV&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 遥控器抽象类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractRemoteControl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Bridge _bridge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AbstractRemoteControl(Bridge bridge)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge = bridge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 华为遥控器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaWeiRemoteControl&lt;/span&gt; : AbstractRemoteControl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HuaWeiRemoteControl(Bridge bridge) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(bridge)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SwitchOff();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 小米遥控器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;XiaoMiRemoteControl&lt;/span&gt; : AbstractRemoteControl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; XiaoMiRemoteControl(Bridge bridge) : &lt;span style=&#34;color:#66d9ef&#34;&gt;base&lt;/span&gt;(bridge)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOn()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SwitchOff()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SwitchOff();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; SetChannel()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _bridge.SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AbstractRemoteControl huawei = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaWeiRemoteControl(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaWeiControl());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huawei.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huawei.SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huawei.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AbstractRemoteControl xiaomi = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XiaoMiRemoteControl(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; XiaoMiControl());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xiaomi.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xiaomi.SetChannel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;xiaomi.SwitchOn();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-适配器模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/09/designpattern-adapter/</link>
      <pubDate>Tue, 09 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/09/designpattern-adapter/</guid>
      <description>&lt;p&gt;Adapter适配器模式属于结构型设计模式，用来充当两个不兼容接口之间的桥梁。&lt;/p&gt;
&lt;h2 id=&#34;design-patternadapter&#34;&gt;Design Pattern:Adapter &lt;a href=&#34;#design-patternadapter&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Target：定义Client使用的与特定功能相关的接口。&lt;/li&gt;
&lt;li&gt;Adapter：将Adaptee接口适配为Target 接口。&lt;/li&gt;
&lt;li&gt;Adaptee：Client所需功能的类。但其接口与客户端不兼容，需要调整的现有接口。&lt;/li&gt;
&lt;li&gt;Client：与符合 Target 接口的对象协作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以在不修改原有代码的基础上来复用现有类，从而满足开闭原则。&lt;/li&gt;
&lt;li&gt;将接口或数据转换代码从程序的主要业务逻辑中分离出来，从而满足单一职责原则。&lt;/li&gt;
&lt;li&gt;可以重新定义Adaptee(被适配的类)的部分行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码的整体复杂度增加了，因为我们需要引入一组新的接口和类。&lt;/li&gt;
&lt;li&gt;Client 和 Adaptee 在额外的需求下需要重新定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;种类&#34;&gt;种类 &lt;a href=&#34;#%e7%a7%8d%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对象适配器模式：适配器实现一个对象的接口并包装另一个对象。可由所有流行的编程语言实现，它使用组合来实现功能。&lt;/li&gt;
&lt;li&gt;类适配器模式：类适配器模式与对象适配器模式的工作方式相同，只是它通过继承来处理不兼容问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中适配器模式的实例，我家里有两台安卓手机分别要用USB Type-C和Micro USB来进行充电，但是我手里只有MicroUsb口的充电线，有没有发工资我也不能在去买一根TypeC口的线，只能写个适配器适配一下。&lt;/p&gt;
&lt;h4 id=&#34;对象适配器&#34;&gt;对象适配器： &lt;a href=&#34;#%e5%af%b9%e8%b1%a1%e9%80%82%e9%85%8d%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MicroUsbTarget target = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypeCAdapter();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target.Recharge();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 目标接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MicroUsbTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 开始充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Recharge()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;使用MicroUse进行充电&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 被适配的对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeCAdaptee&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 开始充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TypeCRecharge()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;使用TypeC也可以进行充电&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 适配器类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeCAdapter&lt;/span&gt; : MicroUsbTarget
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; TypeCAdaptee _typeCAdaptee = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypeCAdaptee();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 实现typec接口的充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Recharge()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//具体转换工作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _typeCAdaptee.TypeCRecharge();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;类适配器&#34;&gt;类适配器： &lt;a href=&#34;#%e7%b1%bb%e9%80%82%e9%85%8d%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IMicroUsbTarget target = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TypeCAdapter();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target.Recharge();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 目标接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IMicroUsbTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 开始充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Recharge();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 被适配的对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeCAdaptee&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 开始充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; TypeCRecharge()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;使用TypeC也可以进行充电&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 适配器类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TypeCAdapter&lt;/span&gt; : TypeCAdaptee, IMicroUsbTarget
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 实现typec接口的充电&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Recharge()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//具体转换工作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TypeCRecharge();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-原型模式</title>
      <link>https://www.chenqiaoqian.com/2023/05/04/designpattern-prototype/</link>
      <pubDate>Thu, 04 May 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/05/04/designpattern-prototype/</guid>
      <description>&lt;p&gt;Factory Method Pototype原型模式属于创建型设计模式，用于通过拷贝模型来创建新的对象。&lt;/p&gt;
&lt;h2 id=&#34;design-patternpototype&#34;&gt;Design Pattern:Pototype &lt;a href=&#34;#design-patternpototype&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Prototype：原型类，声明一个用于克隆自身的接口。&lt;/li&gt;
&lt;li&gt;ConcretePrototype：实际原型类，实现用于克隆自身的原型接口的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;避免了创建新实例的复杂性。&lt;/li&gt;
&lt;li&gt;可以动态增加或删除产品类。&lt;/li&gt;
&lt;li&gt;通过改变值或结构指定新对象。&lt;/li&gt;
&lt;li&gt;减少子类化，允许克隆现有对象而不是要求工厂创建新实例。原型模式消除了为创建产品引入子类化的需要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;每个类必须配备一个克隆方法。&lt;/li&gt;
&lt;li&gt;对于值类型和引用类型，深拷贝和浅拷贝必须理解到位。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中原型模式的实例，下面我们又来到了富士康的手机模具车间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prototype&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 手机壳模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ShouJiKePrototype&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; ShouJiKePrototype Clone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ConcretePrototype&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 华为手机壳&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaWeiShouJiKePrototype&lt;/span&gt; : ShouJiKePrototype
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; ShouJiKePrototype Clone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (HuaWeiShouJiKePrototype)&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.MemberwiseClone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ShouJiKePrototype prototype = new HuaWeiShouJiKePrototype();
ShouJiKePrototype prototype1 = prototype.Clone();
ShouJiKePrototype prototype2 = prototype.Clone();
ShouJiKePrototype prototype3 = prototype.Clone();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;额外拓展&#34;&gt;额外拓展 &lt;a href=&#34;#%e9%a2%9d%e5%a4%96%e6%8b%93%e5%b1%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MemberwiseClone介绍
&lt;ul&gt;
&lt;li&gt;MemberwiseClone 方法是System.Object类的一部分，它创建给定对象的浅表副本。&lt;/li&gt;
&lt;li&gt;MemberwiseClone 方法只是将对象的非静态字段复制到新对象中。&lt;/li&gt;
&lt;li&gt;复制过程中，如果某个字段是值类型，则对该字段进行逐位复制。如果字段是引用类型，则复制引用但不复制引用的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深拷贝和浅拷贝
&lt;ul&gt;
&lt;li&gt;浅拷贝:从现有对象创建克隆对象，然后将现有对象的值类型字段复制到新对象。但是对于引用类型属性，它只会复制引用，而不是实际对象本身。因此，在引用类型的情况下，现有对象和克隆对象引用相同的内存位置。&lt;/li&gt;
&lt;li&gt;深拷贝:从现有对象创建克隆对象，然后将现有对象的字段复制到新创建的克隆对象。如果该字段是值类型，则将执行该字段的逐位复制。如果字段是引用类型，则将创建引用对象的新副本。这意味着，与浅拷贝不同，在深拷贝的情况下，现有对象和克隆对象的引用类型属性都具有不同的内存位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AgeInfo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AgeInfo(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Number = age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AgeInfo Age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 浅拷贝&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person ShallowCopy()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (Person) &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.MemberwiseClone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 深拷贝&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person DeepCopy()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Person otherPerson = (Person) &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.MemberwiseClone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        otherPerson.Age = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AgeInfo(Age.Number);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        otherPerson.Name = String.Copy(Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; otherPerson;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-工厂方法模式</title>
      <link>https://www.chenqiaoqian.com/2023/04/25/designpattern-factorymethod/</link>
      <pubDate>Tue, 25 Apr 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/04/25/designpattern-factorymethod/</guid>
      <description>&lt;p&gt;Factory Method Pattern工厂方法模式，定义了一个用于创建对象的接口，但让子类决定实例化哪个类。此模式让类将实例化延迟到子类。&lt;/p&gt;
&lt;h2 id=&#34;design-patternfactory-method&#34;&gt;Design Pattern:Factory Method &lt;a href=&#34;#design-patternfactory-method&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Creator：抽象工厂，定义工厂所有的操作接口，包括创建Product类型方法，所有ConcreteCreator都必须继承Creator类。&lt;/li&gt;
&lt;li&gt;ConcreteCreator：实际工厂，实现Creator类定义的抽象方法，用来创建实际产品。&lt;/li&gt;
&lt;li&gt;Product：抽象产品，定义产品所有的操作接口，所有ConcreteProduct都必须继承Product类。&lt;/li&gt;
&lt;li&gt;ConcreteProduct：实际产品，实现Product类定义的抽象方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用户只需要知道所要产品的具体工厂，无须关系具体的创建过程。&lt;/li&gt;
&lt;li&gt;增加新产品时，只需定义自己的实际产品和实际工厂，无需对旧工厂进行修改，更符合开闭原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码变得复杂，因为您创建了越来越多的类来实现该模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中工厂方法模式的实例，下面我们又来到了富士康的手机装配车间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象工厂类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Factory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 工厂方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; Phone CreatePhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ConcreteCreator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 生产华为手机工厂&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaweiPhoneFactory&lt;/span&gt; : Factory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 生产华为手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Phone CreatePhone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaweiPhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 生产苹果手机工厂&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PingGuoFactory&lt;/span&gt; : Factory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// 生产苹果手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Phone CreatePhone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PingGuoPhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Product&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 手机抽象类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Phone&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 打电话&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Call();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ConcreteProduct&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 华为手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaweiPhone&lt;/span&gt; : Phone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Call()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我在用华为手机给你打电话！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 苹果手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PingGuoPhone&lt;/span&gt; : Phone
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Call()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我在用苹果手机给你打电话！&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化创建手机的两个工厂&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Factory huaweiPhoneFactory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaweiPhoneFactory();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Factory pingGuoPhoneFactory = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PingGuoPhoneFactory();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 生产一部华为手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone huawei = huaweiPhoneFactory.CreatePhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huawei.Call();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//生产一部苹果手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone pingguo = pingGuoPhoneFactory.CreatePhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pingguo.Call();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-建造者模式</title>
      <link>https://www.chenqiaoqian.com/2023/04/24/designpattern-builderpattern/</link>
      <pubDate>Mon, 24 Apr 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/04/24/designpattern-builderpattern/</guid>
      <description>&lt;p&gt;Builder建造者模式又称生成器模式属于创建型设计模式，用于将一个复杂对象的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;h2 id=&#34;design-patternbuilder&#34;&gt;Design Pattern:Builder &lt;a href=&#34;#design-patternbuilder&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Builder：抽象建造者，用于创建一个Product对象的各个部件指定抽象接口。&lt;/li&gt;
&lt;li&gt;ConcreteBuilder：实际建造者，实现抽象建造者角色Builder的方法。&lt;/li&gt;
&lt;li&gt;Director：监督者，从Builder那里获取单独的构建流程，并定义构建产品的顺序。&lt;/li&gt;
&lt;li&gt;Product：产品，正在构建的复杂对象。包括定义的类和装配组件的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;建造者类之间是相互独立的，容易扩展，对建造过程逐步细化，而不对其他的模块产生任何影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;代码量有所增加Build对象以及Director类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中建造者模式的实例，下面我们来到富士康的手机装配车间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Builder&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 抽象建造者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 安装CPU&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildCPU();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 安装屏幕&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildScreen();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; Phone GetPhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ConcreteBuilder&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 实际创建者，华为、苹果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PingGuoBuilder&lt;/span&gt; : Builder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Phone pingGuo = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Phone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildCPU()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pingGuo.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PingGuo CPU&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildScreen()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pingGuo.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PingGuo Screen&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Phone GetPhone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pingGuo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 实际创建者，华为、苹果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HuaWeiBuilder&lt;/span&gt; : Builder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Phone huaWei = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Phone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildCPU()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        huaWei.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HuaWei CPU&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; BuildScreen()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        huaWei.Add(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HuaWei Screen&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Phone GetPhone()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; huaWei;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Director&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 监督者 负责流程和顺序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Director&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 组装手机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Construct(Builder builder)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        builder.BuildCPU();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        builder.BuildScreen();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Product&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// 手机类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Phone&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 手机部件集合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt; parts = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 把单个部件添加到手机部件集合中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; part)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parts.Add(part);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;手机组装开始&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; part &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; parts)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Console.WriteLine(part + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;组件已安装完毕&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;手机组装结束&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Director director = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Director();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Builder pingGuoBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PingGuoBuilder();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Builder huaWeiBuilder = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HuaWeiBuilder();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;director.Construct(pingGuoBuilder);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone pingGuo = pingGuoBuilder.GetPhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pingGuo.Show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;director.Construct(huaWeiBuilder);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Phone huaWei = huaWeiBuilder.GetPhone();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;huaWei.Show();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-抽象工厂模式</title>
      <link>https://www.chenqiaoqian.com/2023/04/23/designpattern-abstractfactory/</link>
      <pubDate>Sun, 23 Apr 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/04/23/designpattern-abstractfactory/</guid>
      <description>&lt;p&gt;Abstract Factory抽象工厂模式属于创建型设计模式，用于提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。&lt;/p&gt;
&lt;h2 id=&#34;design-patternabstract-factory&#34;&gt;Design Pattern:Abstract Factory &lt;a href=&#34;#design-patternabstract-factory&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;AbstractFactory：抽象工厂，用于创建抽象产品的接口。&lt;/li&gt;
&lt;li&gt;ConcreteFactory：实际工厂，实现 AbstractFactory 接口以创建具体产品的类。&lt;/li&gt;
&lt;li&gt;AbstractProduct：抽象产品，声明一种产品对象的接口。&lt;/li&gt;
&lt;li&gt;ConcreteProduct：实际产品，实现 AbstractProduct 接口以创建产品的类。&lt;/li&gt;
&lt;li&gt;Client：客户，持有AbstractFactory 和 AbstractProduct 接口创建一系列相关对象的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;将系列产品的创建工作延迟到具体工厂的子类中，Client代码和具体产品类的代码分离，降低耦合度。&lt;/li&gt;
&lt;li&gt;促进了产品的一致性，简化了产品之间的交换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;由于使系列产品保持一致性，导致了加入新系列产品的难度增加&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中抽象工厂模式的实例，我们生活的大陆上每天都在发生着流血惨案，食草动物不停的被食肉动物吞噬。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractFactory&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//地球大陆    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LandFactory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; Herbivore CreateHerbivore();&lt;span style=&#34;color:#75715e&#34;&gt;//食草动物&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; Carnivore CreateCarnivore();&lt;span style=&#34;color:#75715e&#34;&gt;//食肉动物&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ConcreteFactory&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//欧洲大陆    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EuropeFactory&lt;/span&gt; : LandFactory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Herbivore CreateHerbivore()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Antelope();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Carnivore CreateCarnivore()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Lion();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//非洲大陆&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AmericaFactory&lt;/span&gt; : LandFactory
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Herbivore CreateHerbivore()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Squirrel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; Carnivore CreateCarnivore()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Wolf();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AbstractProduct&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//食草动物基类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Herbivore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//食肉动物基类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Carnivore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Eat(Herbivore h);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Product&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//羚羊&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Antelope&lt;/span&gt; : Herbivore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//狮子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Lion&lt;/span&gt; : Carnivore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Eat(Herbivore h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetType().Name + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt; + h.GetType().Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//松鼠&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Squirrel&lt;/span&gt; : Herbivore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//狼&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Wolf&lt;/span&gt; : Carnivore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Eat(Herbivore h)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Console.WriteLine(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.GetType().Name + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt; + h.GetType().Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Client&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;World&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Herbivore _herbivore;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Carnivore _carnivore;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AnimalWorld(ContinentFactory factory)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _carnivore = factory.CreateCarnivore();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _herbivore = factory.CreateHerbivore();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RunFoodChain()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _carnivore.Eat(_herbivore);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LandFactory europe = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EuropeFactory();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;World world = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; World(europe);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;world.RunFoodChain();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LandFactory america = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AmericaFactory();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;world = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; World(america);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;world.RunFoodChain();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;输出：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Lion -&amp;gt; Antelope
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Wolf -&amp;gt; Squirrel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式-单例模式</title>
      <link>https://www.chenqiaoqian.com/2023/04/19/designpattern-singleton/</link>
      <pubDate>Wed, 19 Apr 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/04/19/designpattern-singleton/</guid>
      <description>&lt;p&gt;Singleton单例模式属于创建型设计模式，确保一个类只有一个实例，并提供该实例的全局访问点。&lt;/p&gt;
&lt;h2 id=&#34;design-patternsingleton&#34;&gt;Design Pattern:Singleton &lt;a href=&#34;#design-patternsingleton&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;基本介绍&#34;&gt;基本介绍 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;构成&#34;&gt;构成 &lt;a href=&#34;#%e6%9e%84%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;密封类&lt;/li&gt;
&lt;li&gt;私有和无参的单一构造函数&lt;/li&gt;
&lt;li&gt;获取实例引用的静态和开放方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点 &lt;a href=&#34;#%e4%bc%98%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;单例模式可以实现接口&lt;/li&gt;
&lt;li&gt;可以实现延迟加载并且可以使用静态初始化&lt;/li&gt;
&lt;li&gt;规范依赖关系&lt;/li&gt;
&lt;li&gt;单点访问，易于维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;缺点 &lt;a href=&#34;#%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不能继承，与单一职责原则冲突&lt;/li&gt;
&lt;li&gt;降低了并行执行的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;C#中有多种实现单例设计模式的方法&lt;/p&gt;
&lt;h4 id=&#34;无线程安全的单例&#34;&gt;无线程安全的单例 &lt;a href=&#34;#%e6%97%a0%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e5%8d%95%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton Instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_instance == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程情况下不安全，多线程中会触发多次if (instance == null)为真，构造多份实例，违背单一构造原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用锁的线程安全单例&#34;&gt;使用锁的线程安全单例 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e9%94%81%e7%9a%84%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e5%8d%95%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; _lock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton Instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;lock&lt;/span&gt; (_lock)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_instance == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全，使用锁来确保只创建一个实例。&lt;/li&gt;
&lt;li&gt;性能受影响，每次请求实例都需要获取锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;使用双重检查锁定实现线程安全单例&#34;&gt;使用双重检查锁定实现线程安全单例 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e5%8f%8c%e9%87%8d%e6%a3%80%e6%9f%a5%e9%94%81%e5%ae%9a%e5%ae%9e%e7%8e%b0%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e5%8d%95%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; _lock = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton Instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_instance == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;lock&lt;/span&gt; (_lock)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (_instance == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依然存在性能问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;无锁线程安全函数单例&#34;&gt;无锁线程安全函数单例 &lt;a href=&#34;#%e6%97%a0%e9%94%81%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e5%87%bd%e6%95%b0%e5%8d%95%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Singleton _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton Instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态构造函数用于初始化任何静态数据，或执行仅需执行一次的特定操作。 将在创建第一个实例或引用任何静态成员之前自动调用静态构造函数。 静态构造函数最多调用一次。当类型有BeforeFieldInit标志时指定调用此类型的静态方法并不强制系统初始化此类型。&lt;/li&gt;
&lt;li&gt;实例创建，需要对实例以外的静态成员的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lazyt-泛型类在单例&#34;&gt;Lazy&lt;!-- raw HTML omitted --&gt; 泛型类在单例 &lt;a href=&#34;#lazyt-%e6%b3%9b%e5%9e%8b%e7%b1%bb%e5%9c%a8%e5%8d%95%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Singleton&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt; _instance = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt;(() =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Singleton());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Singleton Instance { &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; _instance.Value; } }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; Singleton()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET 4或更高版本。&lt;/li&gt;
&lt;li&gt;Lazy&lt;!-- raw HTML omitted --&gt; 类提供从多个线程进行访问的延迟初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity 本地推送 安卓篇</title>
      <link>https://www.chenqiaoqian.com/2023/03/30/mobilenotifications-android/</link>
      <pubDate>Thu, 06 Apr 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/03/30/mobilenotifications-android/</guid>
      <description>&lt;p&gt;Unity Mobile Notifications 在Android和IOS平台上进行&lt;strong&gt;本地推送通知&lt;/strong&gt;支持一次性和可重复的通知。&lt;strong&gt;安卓篇&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;mobile-notifications&#34;&gt;Mobile Notifications &lt;a href=&#34;#mobile-notifications&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;要求&#34;&gt;要求 &lt;a href=&#34;#%e8%a6%81%e6%b1%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;兼容 Unity 2019.4 或以上版本。
兼容 Android 4.4+ (API 19) 和 iOS 10.0+。&lt;/p&gt;
&lt;h3 id=&#34;支持的功能&#34;&gt;支持的功能 &lt;a href=&#34;#%e6%94%af%e6%8c%81%e7%9a%84%e5%8a%9f%e8%83%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;发布本地一次性或可重复的通知。
取消已经显示和即将到来的（预定的）通知。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装 &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在Unity中打开PackageManager(Window &amp;gt; Package Manager)，找到Mobile Notifications，然后Install。&lt;/p&gt;
&lt;h3 id=&#34;安卓&#34;&gt;安卓 &lt;a href=&#34;#%e5%ae%89%e5%8d%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;权限&#34;&gt;权限 &lt;a href=&#34;#%e6%9d%83%e9%99%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;android.permission.SCHEDULE_EXACT_ALARM (Android 12.0起精确时间调度)
android.permission.USE_EXACT_ALARM (Android 13.0起精确时间调度)
从Android13.0开始，需要征得用户许可才能显示通知。当应用程序API小于33时，操作系统会在应用程序启动时自动请求权限。当API33或更高版本为目标时，请求权限取决于应用程序本身，否则通知将不会显示在托盘中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!Permission.HasUserAuthorizedPermission(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.POST_NOTIFICATIONS&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Permission.RequestUserPermission(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;android.permission.POST_NOTIFICATIONS&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;关键类&#34;&gt;关键类 &lt;a href=&#34;#%e5%85%b3%e9%94%ae%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;AndroidNotificationChannel对通知分配一个频道，可以设置设备收到通知后设备的表现，例如：是否闪光、是否开启震动、锁定屏幕显示位置、通知样式等等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; channel = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AndroidNotificationChannel()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Id = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local_Notice&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Name = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Channel&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Importance = Importance.Default,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Description = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Local Notifications&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AndroidNotificationCenter.RegisterNotificationChannel(channel);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AndroidNotificationCenter执行发送、更新和删除通知等操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发送通知&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**发送通知，同时返回通知Id，对该通知进行追踪。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; SendNotification(AndroidNotification notification, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; channelId)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除通知&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消所有之前显示的通知。该应用程序显示的所有通知将从状态栏中删除。所有预定的通知仍将按预定时间显示。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelAllDisplayedNotifications()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消应用程序安排或之前显示的所有通知。所有预定的通知将被取消。该应用程序显示的所有通知将从状态栏中删除。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelAllNotifications()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消应用程序安排的所有通知。所有预定的通知将被取消。如果通知已经显示，它们将不会从状态栏中删除。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelAllScheduledNotifications()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消之前显示的通知。通知将从状态栏中删除。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelDisplayedNotification(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消预定的或之前显示的通知。通知将不再在预定时间显示。如果它已经交付，它将从状态栏中删除。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelNotification(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**取消预定的通知。通知将不再在预定时间显示。如果它已经交付，它不会从状态栏中删除。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; CancelScheduledNotification(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息频道注册&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**将创建的消息通道注册到消息中心。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; RegisterNotificationChannel(AndroidNotificationChannel channel)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;频道重要性级别
对于您定义的每个频道，您将为其分配一个重要性级别，用来控制每个通道的行为（取代优先级）。
重要性级别具有以下限制：
您分配的重要性级别将是频道的默认值。用户可以在 Android 设置中更改频道的重要性级别。一旦你选择了一个重要性级别，你就可以限制你如何改变它：你只能降低重要性，并且只有在用户没有明确改变它的情况下。
频道重要性的选择应考虑到用户的时间和注意力。当一个不重要的通知被伪装成紧急通知时，它会产生不必要的警报。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;重要性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;行为&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;用法&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;例子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;高的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发出 声音并 出现在 屏幕上&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户 必须立即了解或采取行动的时间关键信息&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;短信、闹钟、 电话&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;默认&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;发出 声音&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;应该在用户方便的时候尽早看到的信息 ，但不会 打断他们正在做的事情&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;路况提醒、任务 提醒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;低的&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有声音&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不满足 其他重要性级别要求的通知渠道&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户 订阅的新内容、 社交网络 邀请&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;最小值&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;没有声音或 视觉 干扰&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可以等待或与用户不特别相关的非必要信息&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;附近名胜 、天气、 宣传内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检测打开应用的通知&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**允许检索用于打开应用程序的通知。当返回值!=Null时，意味着通过点击该通知打开的应用程序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; AndroidNotificationIntentData GetLastNotificationIntent()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收到事件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**收到通知事件。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;event&lt;/span&gt; AndroidNotificationCenter.NotificationReceivedCallback OnNotificationReceived
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他关键类型，AndroidNotification用于安排本地通知，其中包括通知的内容等等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**创建一个通知，title通知标题，text通知内容，fireTime显示时间(DateTime.Now 立即显示)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AndroidNotification(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; title, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text, DateTime fireTime)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**创建一个可重复的通知结构，title通知标题，text通知内容，fireTime显示时间(DateTime.Now 立即显示),repeatInterval重复间隔
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; AndroidNotification(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; title, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; text, DateTime fireTime, TimeSpan repeatInterval)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**存储数据字段，发送通知的时候设置了改值，则收到通知后同样可以取到该值，用于收发通知的数据传递
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; IntentData { &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; LargeIcon { &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; SmallIcon { &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	通知Icon设置在Unity中的设置:Editor-&amp;gt;Project Settings-&amp;gt;Mobile Notigficationd，Small小图标、Large大图标。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-04-12-unity-mobilenotifications/MobileNotigficationd_ProjectSetting.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;通知展示&#34;&gt;通知展示 &lt;a href=&#34;#%e9%80%9a%e7%9f%a5%e5%b1%95%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-04-12-unity-mobilenotifications/Notice.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SmallIcon小图标&lt;/li&gt;
&lt;li&gt;应用名称(系统提供)&lt;/li&gt;
&lt;li&gt;收到时间(系统提供)&lt;/li&gt;
&lt;li&gt;LargeIcon大图标&lt;/li&gt;
&lt;li&gt;通知标题&lt;/li&gt;
&lt;li&gt;通知内容&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常见问题&#34;&gt;常见问题 &lt;a href=&#34;#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;为什么 Android 小图标在编辑器通知设置预览中是白色的？
因为小通知图标是单色的，Android 会忽略图标图像中的所有非 alpha 通道，Unity 会自动去除所有 RGB 通道。
解决方法:将它们放在\Assets\Plugins\Android\res\drawable-{scaleFactor}不会自动处理的文件夹中。但是，包含非 alpha 通道的图标将无法在 Android 5.0 及更高版本上正确显示。&lt;/li&gt;
&lt;li&gt;为什么当我的应用程序关闭且不在后台运行时，某些华为和小米手机上没有发送通知？
华为（包括荣耀）和小米似乎使用了激进的节电技术来限制应用程序后台活动，除非该应用程序已被用户在设备设置中列入白名单。这意味着如果应用程序关闭或未在后台运行，则不会发送预定的通知。目前，除了鼓励用户将您的应用列入白名单外，没有可用的解决方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity 使用 TexturePacker 优化渲染</title>
      <link>https://www.chenqiaoqian.com/2023/03/30/unity-texturepacker/</link>
      <pubDate>Thu, 30 Mar 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/03/30/unity-texturepacker/</guid>
      <description>&lt;p&gt;TexturePacker 是一款用于游戏和应用程序开发的软件工具，用于创建和管理图片精灵表。精灵表是包含多个较小图形或精灵的单个图像文件。&lt;/p&gt;
&lt;h2 id=&#34;texturepacker优势&#34;&gt;TexturePacker优势 &lt;a href=&#34;#texturepacker%e4%bc%98%e5%8a%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;性能方面&#34;&gt;性能方面: &lt;a href=&#34;#%e6%80%a7%e8%83%bd%e6%96%b9%e9%9d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;通过优化Sprite网格提高性能，打包算法Polygon中使用Tracer Tolerance影响网格的质量，从而降低顶点数量和面数，降低CPU和GPU的计算渲染压力。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-03-30-unity-texturepacker/SpriteMeshes.jpg&#34; alt=&#34;SpriteMeshes&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;内存方面&#34;&gt;内存方面： &lt;a href=&#34;#%e5%86%85%e5%ad%98%e6%96%b9%e9%9d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Sprite打包通过Polygon Packing算法，是不规则的图片打包成紧凑的图集，从而降低纹理内存大小。
&lt;img src=&#34;https://www.chenqiaoqian.com/2023-03-30-unity-texturepacker/PolygonAtlas.jpg&#34; alt=&#34;PolygonAtlas&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;png优化&#34;&gt;PNG优化： &lt;a href=&#34;#png%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PNG优化的意义在于在不影响图形品质的情况下实现降低文件大小，从而改善游戏的下载和启动时间。
常用的PNG文件优化方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无损压缩：此方法使用高级压缩算法并从文件中删除不必要的元数据以减小其大小而不降低图像质量。&lt;/li&gt;
&lt;li&gt;有损压缩：此方法涉及减少图像中的颜色数量。如果图像具有大量相似的颜色，这会特别有效。通过减少颜色数量，PNG 文件可以作为索引文件写入，占用的空间明显减少。
TexturePacker 中对PNG的优化：&lt;/li&gt;
&lt;li&gt;TextureFormat：PNG-32 和 PNG-8(索引)。PNG-32 (无损模式)提供更高的质量，但尺寸也更大，而 PNG-8(降低颜色数量)提供更小的文件尺寸，但可能会牺牲一些图像质量。&lt;/li&gt;
&lt;li&gt;Dithering (PNG-8 only)：此设置确定在减少图像中的颜色数量时如何近似颜色。选项有PngQuantLow、PngQuantMedium和PngQuantHigh，它们代表不同级别的颜色准确度。PngQuantLow 生成最小的文件大小，但可能会导致可见的颜色伪影，而 PngQuantHigh 提供最佳的颜色精度，但可能会导致较大的文件大小。&lt;/li&gt;
&lt;li&gt;PngOptLevel：此设置控制应用于 PNG 文件的优化级别。选项范围从 0（无优化）到 7（最大优化），级别越高，压缩效果越好。
TexturePacker和TinyPNG 的比较：&lt;/li&gt;
&lt;li&gt;使用PngQuantHigh和PngOptLevel4时，TexturePacker 和 TinyPNG 都提供相似的图像质量和大小。&lt;/li&gt;
&lt;li&gt;使用PngQuantLow和PngQuantMedium时，TexturePacker 通常会生成质量稍差的较小图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;texturepacker在unity中使用&#34;&gt;TexturePacker在Unity中使用 &lt;a href=&#34;#texturepacker%e5%9c%a8unity%e4%b8%ad%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;插件导入&#34;&gt;插件导入 &lt;a href=&#34;#%e6%8f%92%e4%bb%b6%e5%af%bc%e5%85%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unity 资产商店下载 TexturePacker Importer。&lt;/li&gt;
&lt;li&gt;Unity 2021以后版本需要从PackageManger中导入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;资源导入&#34;&gt;资源导入 &lt;a href=&#34;#%e8%b5%84%e6%ba%90%e5%af%bc%e5%85%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;需要将导出后的 .tpsheet 文件与 .png 文件同时放入工程中使用。&lt;/p&gt;
&lt;h3 id=&#34;程序调用&#34;&gt;程序调用 &lt;a href=&#34;#%e7%a8%8b%e5%ba%8f%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在Resource中的调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Sprite[] sprites = Resources.LoadAll&amp;lt;Sprite&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spritesheet&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在AssetBundle中的调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AssetBundle bundle = AssetBundle.LoadFromFile(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Assets/AssetBundles/MyBundle&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (bundle != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sprite[] sprites = bundle.LoadAssetWithSubAssets&amp;lt;Sprite&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spritesheet&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;texturepacker参数详解&#34;&gt;TexturePacker参数详解 &lt;a href=&#34;#texturepacker%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;output&#34;&gt;OutPut &lt;a href=&#34;#output&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Png Opt Level(Png优化选项)：减少png文件大小，所有优化都是无损的。
&lt;ul&gt;
&lt;li&gt;0	总是写 32 位 png 文件&lt;/li&gt;
&lt;li&gt;1	如果可能，写入索引（8 位）png 文件（默认）&lt;/li&gt;
&lt;li&gt;2……7	激活额外的文件大小优化步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Premultiplied Alpha:带透明度图片纹理可以正常的进行线性插值&lt;/li&gt;
&lt;li&gt;DPI(Dots Per Inch):每英寸打印的像素点，值越大图片越清晰，默认27&lt;/li&gt;
&lt;li&gt;Dithering:抖动算法，用于对减色格式提高画质指令(RGBA8888之外)
&lt;ul&gt;
&lt;li&gt;NearestNeighbour	颜色误差最小，但颜色分布导致的对比度低于线性。&lt;/li&gt;
&lt;li&gt;Linear	创建具有一些颜色误差但比 NearestNeighbour 更好的对比度的线性颜色分布。&lt;/li&gt;
&lt;li&gt;FloydSteinberg	使用 Floyd-Steinberg 抖动算法。&lt;/li&gt;
&lt;li&gt;FloydSteinbergAlpha	使用具有 alpha 值的 Floyd-Steinberg 抖动算法。&lt;/li&gt;
&lt;li&gt;Atkinson	使用阿特金森抖动算法。&lt;/li&gt;
&lt;li&gt;AtkinsonAlpha	使用具有 alpha 值的阿特金森抖动算法。&lt;/li&gt;
&lt;li&gt;PngQuantLow	仅限 PNG-8：最小抖动。&lt;/li&gt;
&lt;li&gt;PngQuantMedium	仅限 PNG-8：中等抖动。&lt;/li&gt;
&lt;li&gt;PngQuantHigh	仅限 PNG-8：强烈抖动。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;geometry&#34;&gt;Geometry &lt;a href=&#34;#geometry&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Size constraints:纹理强制限制
&lt;ul&gt;
&lt;li&gt;POT	强制纹理具有 2 的幂大小（2、4、8、16、32、64、128、256 &amp;hellip;）。&lt;/li&gt;
&lt;li&gt;WordAligned	字对齐纹理确保纹理中的每一行都使用完整的内存字。&lt;/li&gt;
&lt;li&gt;AnySize	允许纹理具有任何大小。TexturePacker 尝试找到最小尺寸。&lt;/li&gt;
&lt;li&gt;Force squared:强制纹理平方大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scale:纹理缩放比&lt;/li&gt;
&lt;li&gt;ScaleMode:缩放模式
&lt;ul&gt;
&lt;li&gt;Smooth	通过混合像素进行缩放 - 最适合缩小。放大时留下模糊的结果。&lt;/li&gt;
&lt;li&gt;Fast	最近邻缩放 - 可以缩小。放大时提供像素化图像。&lt;/li&gt;
&lt;li&gt;Scale2x	固定尺寸放大 2 倍。尝试优化像素边缘。&lt;/li&gt;
&lt;li&gt;Scale3x	固定尺寸放大 3 倍。尝试优化像素边缘。&lt;/li&gt;
&lt;li&gt;Scale4x	固定尺寸放大 4 倍。尝试优化像素边缘。&lt;/li&gt;
&lt;li&gt;Eagle	固定尺寸放大 2 倍。尝试优化像素边缘。&lt;/li&gt;
&lt;li&gt;Hq2x	固定尺寸放大 2 倍。尝试优化像素边缘。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;layout&#34;&gt;Layout &lt;a href=&#34;#layout&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Algorithm:打包算法
&lt;ul&gt;
&lt;li&gt;Polygon	非矩形精灵的最佳打包算法。尝试为多边形精灵轮廓找到紧凑的包装。由于 sprite 边界框可能会重叠，因此只能在您的框架支持导入网格顶点时使用此打包算法。&lt;/li&gt;
&lt;li&gt;MaxRects	目前最好的矩形打包算法。尝试通过在放置精灵时应用不同的启发式方法来使用最少的纹理空间。&lt;/li&gt;
&lt;li&gt;Basic	通过从左到右填充精灵直到达到纹理的最大宽度来进行简单布局。适用于固定大小的精灵。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sort By:图片在列表中排序&lt;/li&gt;
&lt;li&gt;Order:排序规则
&lt;ul&gt;
&lt;li&gt;Ascending	将值从小到大排序&lt;/li&gt;
&lt;li&gt;Descending	将值从大到小排序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multipack:创建多个导出文件&lt;/li&gt;
&lt;li&gt;Trim mode:透明像素处理
&lt;ul&gt;
&lt;li&gt;没有任何	None	保持精灵原样。不要删除透明像素。&lt;/li&gt;
&lt;li&gt;修剪	Trim	移除精灵周围的透明度。精灵在使用时似乎具有其原始大小。此选项可能并非在所有框架中都可用。&lt;/li&gt;
&lt;li&gt;裁剪，保持位置	CropKeepPos	移除精灵周围的透明度。精灵在使用时看起来尺寸较小。存储原始精灵中的位置。此选项可能并非在所有框架中都可用。&lt;/li&gt;
&lt;li&gt;裁剪，丢失位置	Crop	移除精灵周围的透明度。精灵在使用时看起来尺寸较小。原始精灵中的位置设置为 0/0。精灵出现在工作表中，就好像它从来没有任何透明度一样。&lt;/li&gt;
&lt;li&gt;多边形	Polygon	使用多边形路径近似精灵的轮廓。使用这种修剪模式，多边形打包器可以比任何基于矩形的打包算法更紧密地打包精灵。基于多边形轮廓可以导出三角形网格，您的框架可以使用它来显着减少需要处理的透明像素的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tracer Tolerance：仅Polygon可用，确定多边形Sprite轮廓的精确度，值越小多边形密度越高。&lt;/li&gt;
&lt;li&gt;Enable Rotation:是否允许纹理旋转&lt;/li&gt;
&lt;li&gt;Border padding:纹理之间空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;官方推荐设置&#34;&gt;官方推荐设置 &lt;a href=&#34;#%e5%ae%98%e6%96%b9%e6%8e%a8%e8%8d%90%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无损压缩
&lt;ul&gt;
&lt;li&gt;TextureFormat	PNG-32&lt;/li&gt;
&lt;li&gt;PngOptLevel	2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有损压缩
&lt;ul&gt;
&lt;li&gt;TextureFormat	PNG-8&lt;/li&gt;
&lt;li&gt;Dithering	PngQuantHigh&lt;/li&gt;
&lt;li&gt;PngOptLevel	1 or 4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity 四叉树</title>
      <link>https://www.chenqiaoqian.com/2023/03/26/unity-quad-tree/</link>
      <pubDate>Sun, 26 Mar 2023 11:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/03/26/unity-quad-tree/</guid>
      <description>&lt;p&gt;四叉树是一种树状数据结构，每个节点上都有四个子区块，也可以理解成每个子节点分为四个象限，可以是矩形或者任意图形。常用来表示空间索引或者二位空间碰撞检测等等。&lt;/p&gt;
&lt;h2 id=&#34;四叉树特点&#34;&gt;四叉树特点 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e7%89%b9%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;可以分解成各自的区块。&lt;/li&gt;
&lt;li&gt;每个区块都有自己存储的数量上限，当节点达到上限则会节点分裂。&lt;/li&gt;
&lt;li&gt;每个区块的子树相当于独立的四叉树。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实例&#34;&gt;实例 &lt;a href=&#34;#%e5%ae%9e%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;需求：将摄像机范围的场景物体进行隐藏裁剪，只显示摄像机范围的场景物体。
开发环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引擎：Unity&lt;/li&gt;
&lt;li&gt;语言：C#&lt;/li&gt;
&lt;li&gt;摄像机：正交摄像机
实现：基于上述理解，我构建了一个四叉树，只是现实了5个方法，上述功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//当前树的位置和大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; Rect _treeRect;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//子四叉树最大数量为4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; List&amp;lt;QuadTree&amp;gt; _childTrees;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//当前四叉树插入的Object的数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; List&amp;lt;ObjRect&amp;gt; _objects;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//当前四叉树深度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _depth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//最大深度(常量)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _maxDepth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//四叉树当前节点允许存储的最大Object数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; _maxRectObjectCount;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;四叉树构建&#34;&gt;四叉树构建 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e6%9e%84%e5%bb%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** Rect为根Rect可以理解为整个四叉树的最大矩形(x、y、width、heigh)，需要注意rect锚点位置，需要实现Overlaps、Contains方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** depth为当前四叉树深度，默认为0，每每分裂一次++。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 注意:需要默认设置最大depth和当前节点区域最大数量上限
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; QuadTree(Rect rect,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; depth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;四叉树分裂&#34;&gt;四叉树分裂 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e5%88%86%e8%a3%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 将当前区块节点分裂成4个子树，分别为当前Rect的右上、右下、左上和左下四个区域。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 同时深度++
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Split()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;四叉树获取象限&#34;&gt;四叉树获取象限 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e8%8e%b7%e5%8f%96%e8%b1%a1%e9%99%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 根据传入ObjRect的Rect获取在当前四叉树的那些象限
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 使用数组是因为一个足够大的ObjRect可能会同时存在多个象限，所以对每个象限都要进入插入。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 返回值为象限索引数组，提前规划好右上、右下、左上和左下四个子节点区域的索引。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; GetSpaceIndex(ObjRect rect)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;四叉树插入&#34;&gt;四叉树插入 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e6%8f%92%e5%85%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 插入规则:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 1、该区域节点已经分裂(存在子四叉树数组)，直接调用GetSpaceIndex返回对应象限索引，直接插入即可。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 2、该区域节点未分裂，直接插入到区域对象数组里，当数组达到上限后，执行Split分裂，分裂后，讲数组的对象，依次调用**GetSpaceIndex获取象限索引，直接插入即可。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 注意:插入为一个递归的过程，根据depth依次插入。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Insert(ObjRect rect)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;四叉树遍历检测重叠的对象&#34;&gt;四叉树遍历检测重叠的对象 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e9%81%8d%e5%8e%86%e6%a3%80%e6%b5%8b%e9%87%8d%e5%8f%a0%e7%9a%84%e5%af%b9%e8%b1%a1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 1、通过GetSpaceIndex获取象限索引数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 2、遍历象限索引数组，分别调用象限子树的Retrieve进行递归
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;** 3、遍历象限子树Retrieve返回的List&amp;lt;ObjRect&amp;gt;，进行Overlaps判断是否重叠，对重叠的对象进行保存并且返回。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;**/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&amp;lt;ObjRect&amp;gt; Retrieve(ObjRect rect)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;四叉树最终实现效果&#34;&gt;四叉树最终实现效果 &lt;a href=&#34;#%e5%9b%9b%e5%8f%89%e6%a0%91%e6%9c%80%e7%bb%88%e5%ae%9e%e7%8e%b0%e6%95%88%e6%9e%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://www.chenqiaoqian.com/2023-03-26-unity-quad-tree/unity-quad-tree-animation.gif&#34; alt=&#34;unity-quad-tree-animation&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论 &lt;a href=&#34;#%e7%bb%93%e8%ae%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;搬砖愉快！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.chenqiaoqian.com/2023/03/14/hello-world/</link>
      <pubDate>Tue, 14 Mar 2023 13:13:34 +0800</pubDate>
      
      <guid>https://www.chenqiaoqian.com/2023/03/14/hello-world/</guid>
      <description>&lt;p&gt;Hello World!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
